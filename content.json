[{"title":"陌与墨语","date":"2018-05-04T14:51:45.000Z","path":"article/2018-05-04-陌与墨语.html","text":"似乎很久没写博客了，今天趁上班摸鱼时间，想着干点啥，那就写写自己博客吧。 回忆第一次在github上搭博客以来，已经换了三个域名了，从最初的xiaojwithu.info到后来的dearxiaojie.xyz,两个域名都只维持了一年的时间就没有续费了，当时只是出于玩的目的，所以并没有花什么精力在上面。再看写过的文章，大多都是笔试面试，学习笔记，采坑总结，没有半点干货输出。但是我不会删掉它们，一是因为删了就没内容了（囧…），其次，那也是自己写博客的开始，留点记忆吧。目前换成了新的域名dearxiaojie.top，时间也更长了些，前些天github pages正好支持https了，也将博客设置成https的了。 心里一直有个todolist，但是却久未执行。可能是工作时间长了精力也分散了，买的一摞书也只是堆在那，偶尔躺床上的时候翻开几页看看，和买书时的初衷有些相悖。面对快速更新的技术，有时候显得手足无措。虽然自己知道应该从哪开始，选择哪些，但是心里还是会有莫名的慌乱，学的越多越觉得自己知道的太少，以至于觉得要学的东西就更多，甚至就偏离了方向。 将TODO列出来一个一个执行我估计我还是办不到，至少现在没有心思去整理。 虽不是得过且过，但我一直坚持在学习。 我告诉自己，接下来的路还很长。 以后还是多更新博客吧。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://dearxiaojie.top/tag/随笔/"}]},{"title":"使用JavaScript处理点九图","date":"2018-01-09T17:56:03.000Z","path":"article/2018-01-09-use-javascript-to-handle-9-patch.html","text":"前言在前端开发中，常会将图片作为某个元素的背景图，但是背景图的大小和比例和元素有偏差，所以一般要使元素有全背景的话，只能将图片拉伸。这里不考虑background-repeat。最好的办法还是将图片修改为比例和元素相同以等比缩放。使用微信或者QQ的人应该会发现聊天气泡，气泡会随着内容多少的改变而去适应它，但是并没有使气泡图片有拉伸的效果，这里就用到了点九图 点九图关于点九图这里不做过多介绍，简单来说，它是andriod平台的应用软件开发里的一种特殊的图片形式，扩展名为.9.png。它有两个重要的特点是：四周必须要有四条一像素纯黑的线或点；左上两条线控制拉伸区，右下两条线控制内容区。这里我们需要将上传的点九图片拉伸成指定的或者自适应的比例，在没有接触点九图之前根本没有任何想法，于是上github上找到一个在web端处理点九图的库，将代码拉取到本地即可看到demo。 分析阅读源码发现主要使用border-image和用canvas绘制两种方式实现。首先先取出点九图左边和上边1px，这里以水平方向为例： let tempCtx, tempCanvas;tempCanvas = document.createElement(&apos;canvas&apos;);tempCtx = tempCanvas.getContext(&apos;2d&apos;);tempCtx.drawImage(this.bgImage, 0, 0);let data = tempCtx.getImageData(0, 0, this.bgImage.width, 1).data; 上面的data存放的为只读的ImageData.data属性，返回Uint8ClampedArray,描述一个一维数组，包含以 RGBA 顺序的数据，数据使用 0 至 255（包含）的整数表示。然后遍历这个一维数组，每4位一个step，找到可拉伸的区间数量和区域。NinePatch.prototype.getPieces = function(data, staticColor, repeatColor) &#123; var tempDS, tempPosition, tempWidth, tempColor, tempType; var tempArray = new Array(); tempColor = data[4] + &apos;,&apos; + data[5] + &apos;,&apos; + data[6] + &apos;,&apos; + data[7]; tempDS = (tempColor == staticColor ? &apos;s&apos; : (tempColor == repeatColor ? &apos;r&apos; : &apos;d&apos;)); tempPosition = 1; for (var i = 4, n = data.length - 4; i &lt; n; i += 4) &#123; tempColor = data[i] + &apos;,&apos; + data[i + 1] + &apos;,&apos; + data[i + 2] + &apos;,&apos; + data[i + 3]; tempType = (tempColor == staticColor ? &apos;s&apos; : (tempColor == repeatColor ? &apos;r&apos; : &apos;d&apos;)); if (tempDS != tempType) &#123; // box changed colors tempWidth = (i / 4) - tempPosition; tempArray.push(new Array(tempDS, tempPosition, tempWidth)); tempDS = tempType; tempPosition = i / 4; tempWidth = 1 &#125; &#125; // push end tempWidth = (i / 4) - tempPosition; tempArray.push(new Array(tempDS, tempPosition, tempWidth)); return tempArray;&#125; 上面的getPieces方法存放了可用于判断拉伸区间数量和可拉伸范围的数组。在将其传入绘制函数中。for (var i = 0, n = this.horizontalPieces.length; i &lt; n; i++) &#123; if (this.horizontalPieces[i][0] == &apos;s&apos;) &#123; tempStaticWidth += this.horizontalPieces[i][2]; &#125; else &#123; tempDynamicCount++; // 拉伸区间数量 &#125;&#125;fillWidth = (dWidth - tempStaticWidth) / tempDynamicCount; // 可拉伸区间 再将取得的水平和垂直的1px获取到的数组进行嵌套循环，去填充拉伸图片，这里就不贴代码了，可以查阅源码理解。 新问题找到的这种方式只能将图片进行放大，如果点九图比需要预览的图大，那就不适用了，还有个新问题是，点九图的宽或高跟预览图相比，有个的值大，有一个的值小，如：W点九 &gt; W预览，H点九 &lt; H预览。这种情景也不适用，所以考虑处理点九图。这里只说最终的解决办法，当点九图的宽或高其中一个大于预览图的对应值时，将对应边缩小到预览图的值，再将另一边等比缩小，产生新的点九图片，这样新的点九图肯定比预览图小，可以正常拉伸了。if (this.div.offsetWidth &lt; this.bgImage.width &amp;&amp; this.div.offsetHeight &gt; this.bgImage.height) &#123; tmpCanvas.width = this.div.offsetWidth; tmpCanvas.height = Math.floor(this.bgImage.height * this.div.offsetWidth / this.bgImage.width); tmpCtx.drawImage(this.bgImage, 0, 0, this.div.offsetWidth, Math.floor(this.bgImage.height * this.div.offsetWidth / this.bgImage.width)); let tmpImage = new Image(); tmpImage.src = tmpCanvas.toDataURL(&quot;image/png&quot;); this.bakImage = this.bgImage; this.bgImage = tmpImage;&#125; 遗留的问题按照上面的缩放方式，不论是宽还是高缩小，都会影响原点九图左边或者上面的1px的边界，导致在 getPieces方法中误取可拉伸区间值，这种情况一般发生在边界线离点九图非透明色边界距离较近时发生，暂时没有想到解决方案。想到其实这也是种模拟实现的方式，在实际的产品中不可能多用。不过这个过程收获也是挺大。有好的解决方案欢迎轻敲~~","tags":[{"name":"javascript","slug":"javascript","permalink":"http://dearxiaojie.top/tag/javascript/"},{"name":"canvas","slug":"canvas","permalink":"http://dearxiaojie.top/tag/canvas/"},{"name":"9-patch","slug":"9-patch","permalink":"http://dearxiaojie.top/tag/9-patch/"}]},{"title":"记一次多图上传+本地预览中遇到的问题","date":"2017-11-30T14:54:54.000Z","path":"article/2017-11-30-mutiple-image-upload.html","text":"在web开发中常会遇到图片预览的场景，比如在图片上传的情况下，一个办法是将图片上传到服务器之后，服务端将存储的URL返回来，然后异步通过URL加载刚上传的图片，达到图片的预览。但是在这个过程中会有两次web请求，一次是发送文件，一次是下载文件。我们可以在图片上传前就进行图片的预览，这样可以避免不必要的网络请求和等待。 图片添加&lt;input type=&quot;file&quot; id=&quot;uploadcontainer&quot; name=&quot;images&quot; multiple=&quot;multiple&quot; accept=&quot;image/*&quot;&gt; 如上，input将type设置为file即可以上传文件，accept可以设置接收文件类型，这里是上传图片，所以设置成了image/*,multiple属性可以支持多文件上传。 图片预览 以下代码默认加载了jquery // 监听图片添加$(&apos;#uploadcontainer&apos;).on(&apos;change&apos;, function() &#123; let files = $(this).prop(&apos;files&apos;); that.preview(files);&#125;);preview: function(files) &#123; let that = this; // 遍历预览 $.each(files, function(index, item) &#123; let fileReader = new FileReader(); let tpl = new Template($(&apos;#tpl&apos;).html()); fileReader.readAsDataURL(item); fileReader.onload = function(e) &#123; that.FILES.push(item); // *** 图片onload过程中将图片存在一个全局的数组中,因为在预览过程中还会有分类等处理，会在真正上传的时候添加更多参数 html = tpl.render(&#123; cover_url: e.currentTarget.result, title: item.name.split(&apos;.&apos;)[0], &#125;); // ... 将html放到页面 &#125;; &#125;);&#125; 图片上传 假定我们的接口只支持每次只能上传一张图片 upload: function(f, cb) &#123; // 递归 (function uploads() &#123; let file = f.shift(); if (file) &#123; // 避免重名导致上传混乱，每次都重新创建新的对象 let formData = new FormData(); formData.append(&apos;image&apos;, file.image); formData.append(&apos;title&apos;, file.title); formData.append(&apos;category&apos;, file.category); $.ajax(&#123; type: &apos;POST&apos;, url: &apos;****&apos;, data: formData, contentType: false,// * cache: false, processData: false // * &#125;).always(function(rst) &#123; if (rst.ret == 1) &#123; console.log(file.title + &apos; 上传中...&apos;) &#125; else &#123; console.log(ret.msg || file.title + &apos; 上传失败...&apos;) &#125; uploads(); &#125;); &#125; else &#123; console.log(&apos;上传完成...&apos;); cb(); &#125; &#125;)();&#125;, 后记 使用FormData对象，设置contentType为false, processData为false fileReader.onload的时候缓存图片，不然不能对应图片及增加的参数，导致图片和参数对应混乱 递归上传，每次创建FormData对象，避免重复上传和重名混乱","tags":[{"name":"js","slug":"js","permalink":"http://dearxiaojie.top/tag/js/"}]},{"title":"highcharts线型图表处理","date":"2017-08-29T15:05:40.000Z","path":"article/2017-08-29-diy-highcharts.html","text":"问题分析某次需求中，需要使用highcharts展示数据以对比。可是这批数据量级相差较大，如果在同一张图表中展示，会导致线条相隔很远或者没有波动幅度；还需要在点击某根线条的时候改变图表Y轴为当前线条数量级的，并处理他们的样式以区分。 那么，第一个问题，要在同一张表中展示不同量级的数据，且相互具有参考性，有个办法就是将数据统一处理成一个维度的，如数据归一化，将数据映射到0~1之间的小数，那不同量级的数据之间就有一定的参考性了。第二个问题的话本来想过改源码，但是感觉意义不大，使用场景不多，就找highcharts的api文档，各种拼接。差不多实现了需求. 数据归一化采用min-max标准化，也叫离差标准化，对原始数据的线性变化，结果落到[0, 1]之间。将需要处理的数据组，即series数据先处理，找到每组的最大最小，并计算. function normalizing(arr) &#123; var data = []; for (var i = 0, len = arr.length; i &lt; len; i++) &#123; var cur = arr[i].data; arr[i].visible = false; var name = arr[i].name; arr[i].showInLegend = false; var max = Math.max.apply(null, cur); var min = Math.min.apply(null, cur); var news = cur.map(function (x) &#123; return (x - min) / max; &#125;); var item = &#123; name: name, data: news &#125;; arr.push(item) &#125; return arr;&#125;; 上面代码中，将原数据的每个线条设置为不显示，再将归一化后的数据push到数组后面。即最终图表上显示的是处理后的数据绘制的线条，这样的操作会引发后面的问题，接下来会提到。 展示真实数据在上面一步中，将所有数据都处理成了[0, 1]之间的数据，那鼠标hover上去显示的就是计算后的数据。这显然不是我们想要的，所以才没有去除原来的数据。查看highcharts的api，发现可以改变hover显示的格式，那我只需要找到计算后与之相对应的原数据就能正确显示了。现在hover能够正确显示数据了，图表里的线条也有了一定的对比性，但是Y轴坐标依然是按照归一化后数据量级来的。在考虑到需要在点击线条的时候显示成其原数据量级的Y轴，所以采用以下办法。取出选中线条数据中的最大最小，按照归一化算法逆回去，那么其实现在图表中的线条已经不是[0, 1]之间的数据了，而是分别乘上点击线条最大值，并加上最小值后的数据。那么，Y轴的自然就变成了当前的数据量级。 function adjustSeries(activeName) &#123; var data = chart.series; var max, min; for (var i = 0, len = 6; i &lt; len; i++) &#123; var curName = data[i + 6].name var current = data[i]; if (curName === activeName) &#123; max = Math.max.apply(null, current.yData); min = Math.min.apply(null, current.yData); &#125; &#125; for (var i = 6, len = originData.length; i &lt; len; i++) &#123; var cur = originData[i].data || []; var newc = cur.map(function (item, index) &#123; var cnt = Math.round(item * max) + min; return cnt; &#125;); var upObj = &#123; data: newc, lineWidth: 1, dashStyle: &apos;Dash&apos;, dataLabels: &#123; enabled: false &#125;, className: &apos;half-opacity&apos; &#125;; if (originData[i].name === activeName) &#123; upObj = &#123; data: newc, lineWidth: 4, dashStyle: &apos;Solid&apos;, dataLabels: &#123; enabled: true &#125;, className: &apos;no-opacity&apos; &#125; &#125; chart.series[i].update(upObj); &#125;&#125;; 上面代码中的originData其实就是归一化后存起来的一个副本，因为后面每次点击都会使用这个数据，所以在存数据的时候一定要保证originData不变，存放的是真实数据，而不是数据引用，javascript基础知识，不清楚的可查看javascript中的深拷贝和浅拷贝。 使用到的API plotOptions.series.event.click 点击线条的时候处理相关逻辑 tooltip.formatter 更改鼠标hover的时候显示的数据和样式 chart.series[i].update 动态更新图表数据，定制线条样式 其他… reference Highcharts API 成品链接","tags":[{"name":"js","slug":"js","permalink":"http://dearxiaojie.top/tag/js/"}]},{"title":"在浏览器中懒加载ES2015模块","date":"2017-06-05T19:51:28.000Z","path":"article/2017-06-05-lazy-loading-es2015-modules-in-the-browser.html","text":"ES2015模块在浏览器懒加载 在过去的几年里，开发者们已经无情的将服务端网站移动到了客户端，前提是那样能使页面的性能得到提高。 然而，这可能是不够的。你是否考虑过你的网站也许加载更多于它实际用到的东西？遇到懒加载，一个延迟初始化（加载/分配）某个资源(代码/数据/静态资源)直到它需要的时候再加载。 与此同时，ES2015已经能在生产环境中使用了，通过一些transpilers如Babel。现在你不用参与到使用AMD还是CommonJS的战争中，参照这篇文章的描述（The mind-boggling universe of JavaScript Module strategies）,因为你可以写ES2015模块和让他们transpiled并交付给浏览器同时支持现有CommonJS或AMD模块。 在这篇文章中，我将讨论如何使用System.js同步(在页面加载的时候)和异步(懒加载)加载ES2015模块。 页面加载 vs 懒加载在浏览器上开发JavaScript代码执行时,你必须决定什么时候你让它执行。有一些代码必须在页面加载的同时就执行，比如SPA应用使用了一些框架如Angular，Ember，Backbone，或者React，这些代码可能通过一个或多个&lt;script&gt;标签，必须在一个页面请求返回到浏览器后被引用到HTML文档的主体结构中。 在另一方面，你可能有更多的代码块在一些特定的触发条件发生的时候在执行。经典的例子如： 内容折叠。比如一个评论面板，在用户滚动到页底的时候才显示 事件触发内容显示。比如一个放大的覆盖层，在用户点击图片的时候在显示 少数内容。比如一个‘免运费’的控件，只只用于一些小的页面上 有时间间隔的内容显示。比如一个客服聊天框 这样的话，对于给出一个类似上面的功能，如果他的触发条件未发生，他的代码块就永远不会被执行。因此，那个代码块在页面加载的时候明显是不需要的，是可以延迟加载的。 为了延迟加载，你只需要将在页面加载期间执行的代码从代码块中提取出来。这样在他的触发条件第一次发生的时候就被执行。 这种异步加载引用代码的方式，或者叫懒加载，在提升页面性能上扮演了一个重要的角色，从减少页面首屏时间和速度指数上来看的话。 为了学习更多关于对比页面加载和懒加载对页面性和速度指数的影响的知识，可以阅读这篇文章 Leveling up: Simple steps to optimize the Critical Rendering Path AMD陷阱AMD标准是为在浏览器上异步加载加载创造的，是第一个作为全局JavaScript文件散落在页面的成功替代品。根据Require.js文档: The AMD format comes from wanting a module format that was better than today’s “write a bunch of script tags with implicit dependencies that you have to manually order” and something that was easy to use directly in the browser. 它是基于模块设计模式Module Design Pattern的授权，有一个模块加载器，依赖注入和异步能力。它的一个主要的作用就是执行模块的懒加载。 尽管是一个可怕的想法，它带来了一些固有的复杂性：也就是说，之前理解运行时模块的timelines是不那么重要的。这就意味着开发者们需要知道每个异步模块是什么时候做它预期的工作的。 如果不明白这点，开发者们发现这样的情况：它有时候能正常工作，有时候不能。由于竞态，调试是非常困难的。因为这样的事情，AMD失去了大量的势头和牵引。 学习更多关于AMD的陷阱，查看Moving Past RequireJS ES2015模块101在继续下去之前，我们回顾一下ES2015模块。如果你已经非常熟悉了，那这是一个快速的复习。在ES2015中，模块已经成为官方JavaScript语言的一部分，它们非常强大而且很容易去掌握，站在CommonJS模块这个巨人的肩膀上的话。 作用域通常，一个ES2015模块所有的全局变量仅作用于自己这个文件，模块可以导出数据，也可以导入其他的模块。 导出和导入在一个你想导出的项目(如一个变量，函数、类)的前面加上一个关键词export就可以导出，在下面这个例子中，我们导出Dog和Wolf:// zoo.jsvar getBarkStyle = function(isHowler) &#123; return isHowler? &apos;woooooow!&apos;: &apos;woof, woof!&apos;;&#125;;export class Dog &#123; constructor(name, breed) &#123; this.name = name; this.breed = breed; &#125; bark() &#123; return `$&#123;this.name&#125;: $&#123;getBarkStyle(this.breed === &apos;husky&apos;)&#125;`; &#125;;&#125;export class Wolf &#123; constructor(name) &#123; this.name = name; &#125; bark() &#123; return `$&#123;this.name&#125;: $&#123;getBarkStyle(true)&#125;`; &#125;;&#125; 让我们想想如果在一个单元测试（如Mocha/Chai）用引入这个模块。使用语法import &lt;object&gt; from &lt;path&gt;，至于&lt;object&gt;我们可以选择我们想导入的元素–命名导入（named imports）。接下来我们可以从chai中导入expect，同样，从Zoo中导入Dog和Wolf。这种命名导入的语法很像ES2015的另一个方便的特性–解构赋值// zoo_spec.jsimport &#123; expect &#125; from &apos;chai&apos;; import &#123; Dog, Wolf &#125; from &apos;../src/zoo&apos;;describe(&apos;the zoo module&apos;, () =&gt; &#123; it(&apos;should instantiate a regular dog&apos;, () =&gt; &#123; var dog = new Dog(&apos;Sherlock&apos;, &apos;beagle&apos;); expect(dog.bark()).to.equal(&apos;Sherlock: woof, woof!&apos;); &#125;); it(&apos;should instantiate a husky dog&apos;, () =&gt; &#123; var dog = new Dog(&apos;Whisky&apos;, &apos;husky&apos;); expect(dog.bark()).to.equal(&apos;Whisky: woooooow!&apos;); &#125;); it(&apos;should instantiate a wolf&apos;, () =&gt; &#123; var wolf = new Wolf(&apos;Direwolf&apos;); expect(wolf.bark()).to.equal(&apos;Direwolf: woooooow!&apos;); &#125;);&#125;); 默认如果你只有一个项目要导出，你可以使用export default来将你需要导出的项目作为一个对象// cat.jsexport default class Cat &#123; constructor(name) &#123; this.name = name; &#125; meow() &#123; return `$&#123;this.name&#125;: You gotta be kidding that I&apos;ll obey you, right?`; &#125;&#125; 导入默认的模块更简单，至于结构赋值就不再用到了，你可以直接从模块中导入 // cat_spec.jsimport &#123; expect &#125; from &apos;chai&apos;; import Cat from &apos;../src/cat&apos;;describe(&apos;the cat module&apos;, () =&gt; &#123; it(&apos;should instantiate a cat&apos;, () =&gt; &#123; var cat = new Cat(&apos;Bugsy&apos;); expect(cat.meow()).to.equal(&apos;Bugsy: You gotta be kidding that I\\&apos;ll obey you, right?&apos;); &#125;);&#125;); 学习更多关于ES2015模块的知识，查看文章Exploring ES6 — Modules. ES2015模块加载器和System.js惊奇的发现，ES2015实际上没有一个模块加载规范。这儿是一个非常受欢迎的对动态模块加载的提议–es6-module-loader–受System.js的启发。这个提议已经被撤回了，但是有个WhatWG在讨论阶段的新的加载规范和Domenic Denicola提出的动态导入规范。 然而，System.js目前是最常使用的支持ES2015的模块加载器实现之一，它支持ES2015，AMD，CommonJS和浏览器中的全局脚本，还有NodeJS。它提供了一个异步模块加载器（对比Require.js）和ES2015转换，通过Babel,Traceur或者Typescript。 System.js使用Promises-based API实现了异步模块加载。自从promises可以被链式调用和组合，这是非常长强大和方便的方法。举个例子，如果你想平行的加载多个模块，你可以使用Promises.all，当所有promises都被解决后，listener就可以被解除了。 最后，动态导入规范正在得到更多的牵引，而且已经被编入webpack 2。你可以看看它在webpack2指南上是如何工作的Code splitting with ES2015，这也是受system.js的启发，所以过度起来也很简单。 同步和异步导入模块为了以同步和异步两种方式说明模块的加载，这里有一个简单的项目，将会在页面加载的时候同步加载我们的Cat模块，在用户点击按钮的时候懒加载Zoo模块。代码的github地址lazy-load-es2015-systemjs。 让我们看一看主要的代码块中在页面加载时加载的代码，我们的main.js。 首先，注意通过import同步加载Cat时的表现，然后，创建了一个Cat的实例，调用它的方法meow()，然后添加结果到DOM中：// main.js// Importing Cat module synchronouslyimport Cat from &apos;cat&apos;;// DOM content nodelet contentNode = document.getElementById(&apos;content&apos;);// Rendering catlet myCat = new Cat(&apos;Bugsy&apos;); contentNode.innerHTML += myCat.meow(); 最后，注意通过System.import(&#39;zoo&#39;)异步导入Zoo，最后，Dog和Wolf分别调用他们的方法back()，再次将结果添加到DOM中：// Button to lazy load ZoocontentNode.innerHTML += `&lt;p&gt;&lt;button id=&apos;loadZoo&apos;&gt;Lazy load &lt;b&gt;Zoo&lt;/b&gt;&lt;/button&gt;&lt;/p&gt;`;// Listener to lazy load Zoodocument.getElementById(&apos;loadZoo&apos;).addEventListener(&apos;click&apos;, e =&gt; &#123; // Importing Zoo module asynchronously System.import(&apos;zoo&apos;).then(Zoo =&gt; &#123; // Rendering dog let myDog = new Zoo.Dog(&apos;Sherlock&apos;, &apos;beagle&apos;); contentNode.innerHTML += `$&#123;myDog.bark()&#125;`; // Rendering wolf let myWolf = new Zoo.Wolf(&apos;Direwolf&apos;); contentNode.innerHTML += `&lt;br/&gt;$&#123;myWolf.bark()&#125;`; &#125;);&#125;); 结论掌握遵守页面加载最少必须加载和懒加载可延迟加载的模块可以明显的提升你的页面性能，AMD和CommonJS为ES2015模块铺路。你可以开始使用System.js加载ES2015模块，或者通过webpack 2使用动态导入规范。但是官方的解决方案至今还未发布。 referencelazy-loading-es2015-modules-in-the-browser","tags":[{"name":"ES2015","slug":"ES2015","permalink":"http://dearxiaojie.top/tag/ES2015/"}]},{"title":"8个npm常用技巧和简写","date":"2017-06-03T17:17:15.000Z","path":"article/2017-06-03-several-npm-shorthand-or-trick.html","text":"在篇文章里,将介绍一些非常有用的npm技巧。在这有许多我们不能完全覆盖,所以主要介绍和我们开发工作最相关和最有用的技巧。 最基本的一些简写为了大家在同一起跑线，特别是针对于我们的新手，下面先快速的复习一些基本的简写来保证没人忘记任何简单的东西。 安装package常规：npm install pkg 简写：npm i pkg 全局安装常规： npm install --global pkg 简写：npm i -g pkg 作为项目依赖常规：npm install --save pkg 简写： npm i -S pkg 作为开发依赖常规： npm install --save-dev pkg 简写： npm i -D pkg 更多的简写请查看npm的简写表接下来开始有趣的东西。 初始化一个package我们都知道使用npm init，这是我们创建一个package需要做的第一步。但是，在默认情况下，我们会不停的敲enter键，所以我们怎么避免呢。npm init -y 或 npm init -f就可以一次搞定。 测试命令另一个我们都会的命令是npm test，基本上每天都会使用很多次。倘若我告诉你减少约40%的字符后可以做同样的事呢？非常幸运，这里有个命令npm t，确实能够做到。 列举可用的脚本我们得到了一个新项目,不知道如何开始。通常想知道：如何运行它?哪些脚本可用?有一种方式是打开package.json文件，查看scripts部分。但是我们可以做的更好，所以我们可以简单的运行npm run，之后就可以获得可用脚本的列表。另一个方式是安装ntl(npm i -g ntl)，然后在项目根目录运行ntl，就会列举出可用脚本，并可以直接选择运行，非常方便。 列举已安装的packages类似于可用的脚本,有时候我们需要知道在我们的项目的依赖关系。再次的，我们可以打开package.json文件查看。但是我们已经知道我们可以做的更好，那就是npm ls --depth 0如果需要列出全局安装的packages，我们运行同样的命令加上-g标志。npm ls -g --depth 0 运行安装的可执行文件我们安装了一个包在我们的项目中,它带有一个可执行的文件,但只有通过npm脚本运行它。你想知道为什么,或者如何克服它吗?首先，我们理解为什么–当我们在我们终端执行命令的时候，其根本其实是在我们PATH环境变量中列举的路径中寻找同名的可执行文件。这就是他们可从任何地方访问的神奇之处。本地安装包在本地注册他们的可执行文件,所以他们没有列在我们的PATH中，也就不会被发现。当我们通过一个npm脚本运行可执行文件，它是如何工作的？好问题！因为这种方式运行时,是npm的一个小技巧,增加了一个额外的文件夹路径&lt;project-directory&gt;/node_modules/.bin到PATH，npm添加了一些更有趣的东西，你可以通过运行npm run env | grep &quot;$PATH&quot;看见它。你也可以只是运行npm run env来查看所有可用的环境变量。如果你想知道，node_modules/.bin巧好是本地安装包存放他们可执行文件的地方。例如，如果在你的项目中安装了mocha，直接在项目中运行./node_modules/.bin/mocha看有什么动作so easy,对吧？无论何时你想运行一个本地安装包的可执行文件，只需要运行./node_modules/.bin/&lt;command&gt; 在网上找你的package在package.json文件中，你可能会看到repository的入口(‘entry’)，想知道它有什么好处呢？要回答这个问题，只需要运行npm repo就可以在你的浏览器中看到。顺便说一下,npm home命令和npm homepage同样适用,如果你想在npmjs打开你的package，这里也有个不错的简写npm docs 在其他脚本前后运行脚本也许你熟悉某些脚本例如pretest,这个允许你定义在test脚本运行前运行的代码。你可能会惊讶地发现,你可以为每一个脚本增加预先和滞后执行的脚本,包括您自己的自定义脚本!对于使用npm作为构建工具和有很多脚本需要编排的项目来说，是非常有用的。 更换package的版本你有一个package，也许使用semver做版本控制，在一个新版本发布前需要更换版本。一种方式是打开package.json文件手动的改变版本，但在这里我们不这样。一个简单的方式是运行npm version加上major、minor或者patch。That’s all 最后另外值得一提的是一些组合命令，如npm it将会运行安装和测试命令，等同于npm install &amp;&amp; npm test,非常方便。如果你知道更多的有用的技巧,请在评论中分享一下吧! reference8-npm-tricks-you-can-use-to-impress-your-colleaguesshorthands-and-other-cli-niceties","tags":[{"name":"npm","slug":"npm","permalink":"http://dearxiaojie.top/tag/npm/"}]},{"title":"使用Python发送HTML邮件","date":"2017-05-26T00:13:29.000Z","path":"article/2017-05-26-use-python-smtp-to-send-mail.html","text":"这段时间在慢慢学习Python，正巧有个与Python相关的活，借此机会好练练手 为什么要学习Python呢，作为一个前端，为什么不学习nodejs，而选择学习Python，对呀，其实我也这么问自己，但是，有什么影响嘛，爱学啥学啥，我不觉得啥该学不该学。学了如果不用，也慢慢会忘。扯远了，其实我是比较喜欢Python的语法和它的严格缩进，学了一段时间后，发现还是有和es6/es7相似的方法。 SMTPSMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本、HTML邮件。其中有两个用到的模块，email负责邮件构造，smtplib发送邮件。 &apos;&apos;&apos;using python send gmail&apos;&apos;&apos;# !/usr/bin/env python3# -*- coding: utf-8 -*-import smtplibfrom email.header import Headerfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.utils import parseaddr, formataddrclass SendGmail(object): &apos;&apos;&apos;send mail via gmail&apos;&apos;&apos; def __init__(self): self._from_addr = input(&apos;From:&apos;) self._password = input(&apos;Password:&apos;) self._to_addr = input(&apos;To:&apos;) self._smtp_server = smtplib.SMTP(&apos;smtp.gmail.com&apos;, 587) self._msg = MIMEMultipart(&apos;alternative&apos;) self._msg[&apos;From&apos;] = self._format_addrs(&apos;&lt;%s&gt;&apos; % self._from_addr) # 发件人 self._msg[&apos;To&apos;] = self._format_addrs(&apos;&lt;%s&gt;&apos; % self._to_addr) # 收件人 subject = &apos;hello python&apos; self._msg[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;).encode() # 主题 def get_content(self, mail_tmp_path=&apos;mail.html&apos;): &apos;&apos;&apos;get mail content&apos;&apos;&apos; page = mail_tmp_path file = open(page, &apos;r&apos;, encoding=&apos;utf8&apos;) content = file.read() content = content.replace(&apos;&lt;#send_name#&gt;&apos;, self._from_addr) content = content.replace(&apos;&lt;#name#&gt;&apos;, self._to_addr) self._msg.attach(MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;)) def send_mail(self): &apos;&apos;&apos;send mail&apos;&apos;&apos; server = self._smtp_server server.ehlo() server.starttls() server.login(self._from_addr, self._password) server.sendmail(self._from_addr, [self._to_addr], self._msg.as_string()) print(&apos;success send to %s!&apos; % self._to_addr) server.quit() @classmethod def _replace_tmp(cls, string): pass @classmethod def _format_addrs(cls, string): &apos;&apos;&apos;format addr&apos;&apos;&apos; name, addr = parseaddr(string) return formataddr((Header(name, &apos;utf-8&apos;).encode(), addr))if __name__ == &apos;__main__&apos;: MESSAGE = SendGmail() MESSAGE.get_content() MESSAGE.send_mail()","tags":[{"name":"Python","slug":"Python","permalink":"http://dearxiaojie.top/tag/Python/"},{"name":"SMTP","slug":"SMTP","permalink":"http://dearxiaojie.top/tag/SMTP/"},{"name":"mail","slug":"mail","permalink":"http://dearxiaojie.top/tag/mail/"}]},{"title":"使用Travis CI自动部署Hexo博客到Github上","date":"2017-05-04T23:27:53.000Z","path":"article/2017-05-04-use-travisci-build-your-hexo-site.html","text":"写在前面自从在github page上搭建博客以来，都是使用的hexo，每次都是通过hexo命令build生成静态文件，再push到github上，后来找到一个deploy插件，只需要填写好github的repos地址就好。但是源码的保存是个问题，更换电脑想要写博客很不方便，甚至蠢到将源码保存到u盘里面，这样每次提交后又要备份一次，很容易忘记。说到这里那为什么不将源码保存到github上呢。 其实也是因为懒，给博客换了几次主题后，使得博客源码很乱，甚至自己也忘了改了主题的哪些代码，加上主题也是个repos，直接提交博客源码是提不上的，涉及到子模块问题，麻烦。想到自己还喜欢改动别人的主题，索性将主题文件夹.git文件删掉，让他成为一个普通的文件夹，这样就能提交到github了。废话不多说，估计是很久没写博客了，没有重点，下面简单说说使用Travis CI自动部署Hexo博客到github上。 什么是Travis CI？ Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。 构建首先进入Travis CI官网，使用github账号登录，如下图登录成功后进入如下界面，以为我再此之前已经构建过，所以会用红色框内的内容，如果没有使用过是没有的。然后点击My Repositories右边的+，添加需要自动构建的repos，进入如下页面。可以看到这个界面会显示当前github账号的所以项目，如果没有显示，点击右上角的Sync account按钮，就可以同步过来了，点击需要构建的repos前面的按钮为ON，再点击其后的原形设置图标，进入如下界面如图中设置，将Build only if .travis.yml is present及另外两个设置为ON，功能如字面意思不多说。到目前为止，已经将需要构建的repos开启，那么，我们如何在将源码提交到github的时候，它就自动构建并将build后的静态文件push到我的静态文件branch或者repos呢（我是将build后的静态文件放到一个单独的repos了，也可以放在源码repos的另一个branch，例如起名叫hexo），接下来说如何让Travis CI访问github. Access Token我们需要在Travis上配置Access Token，就可以在构建完毕后自动push到github上保存静态文件的repos了。 生成Access Token登录github，进入个人主页，点击setting，进入界面后找到下图所指位置。点击Personal access tokens，进入页面后，在点击右上角Generate new token,会再次让输入github密码，然后在Token description下起一个名字，再勾选一些权限，我是全给勾选上了，在点击下面Generate token这里就不多截图了。复制生成的token码。 配置Travis CI回到Travis的setting页面，如上面图，在Environment Variables这一栏，点击Add，起一个名字到Name，将复制的token码粘贴到Value框中，到这步为止，已经完成了Travis的设置。到博客源码根目录，创建一个.travis.yml的配置文件，内容如下，附注释，注意缩进language: node_js #设置语言node_js: stable #设置相应的版本install: - npm install #安装hexo及插件script: - hexo clean #清除 - hexo g #生成after_script: - cd ./public - git init - git config user.name &quot;swust-xiaoj&quot; #修改name - git config user.email &quot;swustxiaojie@163.com&quot; #修改email - git add . - git commit -m &quot;update site&quot; - git push --force &quot;https://$&#123;travis&#125;@$&#123;GH_REF&#125;&quot; master:master #travis是在Travis中配置token的名称branches: only: - master #只监测master，可根据自己情况设置，若是存放同一个仓库，这儿可以选择存放源码的branch，如hexoenv: global: - GH_REF: github.com/swust-xiaoj/tb.git #设置GH_REF，注意更改yourname 因为我是新起了一个repos来存放静态文件了，所以上面的GH_REF是对应那个repos地址，若是放同一个repos中，那这儿一般都是yourname.github.io那个仓库。到此，配置已经完成了。 创建文章我们可以创建一篇文章hexo new post use-travis-build-your-hexo-site，添加内容后，并push到github，正常情况下，进入Travis网站就可以看到已经在构建了，如图完成后，访问链接就可以看到这篇文章了。 写在后面很久没有花时间写点东西了，不管有没有价值，总是一种对知识的积累和总结，输出也意味着输入，所以以后还是将学到的东西和积累总结下，自己可以将知识梳理的同时能帮助到别人是更好的了。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://dearxiaojie.top/tag/hexo/"}]},{"title":"Show 'Search' button in iPhone/iPad Safari keyboard","date":"2016-10-23T17:36:09.000Z","path":"article/2016-10-23-search-btn.html","text":"问题描述点击搜索框的时候，需要将软键盘的return go 前往 按键文案变成 搜索或 search，并且点击的时候发起搜索。实现方式是将input框type 设置成 search，并在外层套一个form，在一般浏览器如QQ浏览器，uc浏览器等上能将软键盘显示成搜索,但是在safari浏览器上并不能正常将软键盘文案改变。 解决办法在form上设置action,并将其值设置成.,但是需要控制在搜索的时候应将表单默认行为拦截，form上添加return false即可。 源代码&lt;!-- 搜索框 --&gt;&lt;form class=\"search-top\" action=\".\"&gt; &lt;div class=\"search-wrap\"&gt; &lt;input type=\"search\" name='key' id='search-input' placeholder=\"keyword...\" autocapitalize=\"off\" autocomplete=\"off\" autocorrect=\"off\" &gt; &lt;span class=\"search\"&gt;&lt;i class=\"icon-search\"&gt;&lt;/i&gt;&lt;/span&gt; &lt;i class=\"icon-reset reset\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"cancel-btn\"&gt;取消&lt;/div&gt;&lt;/form&gt; $('.search-top').on('submit', function (e) &#123; var text = $('#search-input').val().trim(); text &amp;&amp; that.emit.emit('search', text); return false;&#125;); reference Show ‘Search’ button in iPhone/iPad Safari keyboard","tags":[{"name":"CSS","slug":"CSS","permalink":"http://dearxiaojie.top/tag/CSS/"}]},{"title":"Gulp Connect发送post请求返回405","date":"2016-04-10T21:29:57.000Z","path":"article/2016-04-10-Gulp Connect发送post请求返回405.html","text":"问题在使用gulp过程中，遇到了在使用gulp-connect启动服务的时候，发送ajax请求不能发送post，返回错误:405 Method Not Allowed 解决通过自定义一个中间件来完成POST、PUT、DELETE 请求。首先，引入fs、path和connect var fs = require(&apos;fs&apos;),path = require(&apos;path&apos;),connect = require(&apos;gulp-connect&apos;); 接着，在配置中增加自己的中间件。 gulp.task(&apos;server&apos;,function()&#123; connect.server(&#123; middleware: function(connect, options) &#123; return [ function(req, res, next) &#123; var filepath = path.join(options.root, req.url); if (&apos;POSTPUTDELETE&apos;.indexOf(req.method.toUpperCase()) &gt; -1 &amp;&amp; fs.existsSync(filepath) &amp;&amp; fs.statSync(filepath).isFile()) &#123; return res.end(fs.readFileSync(filepath)); &#125; return next(); &#125; ]; &#125;, hostname: &apos;127.0.0.1&apos;, port: 8090, livereload: true &#125;);&#125;); References让 Gulp Connect 支持 POST、PUT、DELETE 请求","tags":[{"name":"gulp","slug":"gulp","permalink":"http://dearxiaojie.top/tag/gulp/"}]},{"title":"删除node_modules不成功","date":"2015-11-23T19:11:31.000Z","path":"article/2015-11-23-删除node-modules不成功.html","text":"Question Windows做Node.js开发的你或许碰到过无法删除node_modules文件夹的情况,如下图： Reasonwindows 在文件目录的长度有限制，因为node packages 有众多dependencies，每一个dependency又有其他的dependency，这些dependency或许还有其他的dependency，所以导致node_modules有超级复杂的文件目录。比如： D:\\codetest\\node_modules\\edpx-mobile\\node_modules\\edp-webserver\\node_modules\\babel\\node_modules\\chokidar\\node_modules\\anymatch\\node_modules Solutioninstall npm install -g rimraf delete rimraf node_modules 亲测有效","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://dearxiaojie.top/tag/nodejs/"}]},{"title":"remove white space below image","date":"2015-10-20T18:23:18.000Z","path":"article/2015-10-20-remove-white-space-below-image.html","text":"最近遇到过关于&lt;img&gt;标签显示一张图片在一个&lt;div&gt;里面，&lt;div&gt;的宽高由image撑起。可是在图片的底部和&lt;div&gt;底部之间，多出神秘的2~3px的空白。如下图：我知道&lt;img&gt;是个特殊的元素，为什么会出现这种现象？ Reason&lt;img&gt; 元素在默认情况下是inline元素，inline元素默认和父级元素的baseline对齐的，而baseline又和父级底边有一定距离，注意下面两段文字。 Look at this line of text. Notice there are no letters that breach the baseline 另一段： By just crossing the bridge he probably got away. 注意比较上面两段文字中字母y,j,p,g,下图更形象的显示因为浏览器提供空间低于inline元素来适应字体。这就是上面出现的白边。这不是CSS的padding或margin,所以开发中不容易发现。 Solution 给&lt;img&gt;元素设置display:block 给&lt;img&gt;元素设置vertical-align:bottom或者vertical-align:top 给&lt;img&gt;元素设置font-size:0; vertical-align:middle; 给&lt;div&gt;元素设置line-height:0 给&lt;div&gt;元素设置font-size:0 给&lt;img&gt;元素设置vertical-align:text-bottom 以上最后一条效果并不好，设置后仍有1px的白边，如下图：而正常处理后是没有白边的，如下图： Code source源码与在线演示 References Mystery white space underneath image tag How to Remove the Space Below Images and Other Inline-Block Elements Remove white space below image 欢迎补充","tags":[{"name":"CSS","slug":"CSS","permalink":"http://dearxiaojie.top/tag/CSS/"}]},{"title":"CSS伪元素::after提示用法","date":"2015-09-05T19:40:37.000Z","path":"article/2015-09-05-CSS伪元素-after.html","text":"概述CSS伪元素::after用来匹配已选中元素的一个虚拟的最后子元素，通常会配合content属性来为该元素添加装饰内容.这个虚拟元素默认是行内元素 语法 element:after { style properties } / CSS2 语法 /element::after { style properties } / CSS3 语法 / ::after表示法是在CSS 3中引入的,::符号是用来区分伪类和伪元素的.支持CSS3的浏览器同时也都支持CSS2中引入的表示法:after. ##例子 用::after伪元素，attr()CSS表达式和一个自定义数据属性 data-descr 创建一个纯CSS, 词汇表提示工具 &lt;body&gt; &lt;p&gt;这是一段并没有什么用的 &lt;span data-descr=&apos;collection of words and punctuation&apos;&gt;文字&lt;/span&gt; ，完全是为了凑数才出现的文字，实现一个 &lt;span data-descr=&apos;small popups which also hide again&apos;&gt;提示&lt;/span&gt; 功能，可以吧鼠标放上去 &lt;span data-descr=&apos;not to be taken literrlly&apos;&gt;看看&lt;/span&gt; &lt;/p&gt;&lt;/body&gt; span[data-descr] &#123; position: relative; text-decoration: underline; color: #00F; cursor: help; &#125; span[data-descr]:hover::after &#123; content: attr(data-descr); position: absolute; left: 0; top: 24px; min-width: 200px; border: 1px #aaaaaa solid; border-radius: 10px; background-color: #ffffcc; padding: 12px; color: #000000; font-size: 14px; z-index: 1; &#125; 在线演示 效果图 浏览器兼容性 References ::after (:after)","tags":[{"name":"CSS","slug":"CSS","permalink":"http://dearxiaojie.top/tag/CSS/"}]},{"title":"图解Javascript上下文与作用域","date":"2015-08-04T14:54:54.000Z","path":"article/2015-08-04-图解Javascript上下文与作用域.html","text":"本文尝试阐述Javascript中的上下文与作用域背后的机制，主要涉及到执行上下文（execution context）、作用域链（scope chain）、闭包（closure）、this等概念。 Execution context执行上下文（简称上下文）决定了Js执行过程中可以获取哪些变量、函数、数据，一段程序可能被分割成许多不同的上下文，每一个上下文都会绑定一个变量对象（variable object），它就像一个容器，用来存储当前上下文中所有已定义或可获取的变量、函数等。位于最顶端或最外层的上下文称为全局上下文（global context），全局上下文取决于执行环境，如Node中的global和Browser中的window：需要注意的是，上下文与作用域（scope）是不同的概念。Js本身是单线程的，每当有function被执行时，就会产生一个新的上下文，这一上下文会被压入Js的上下文堆栈（context stack）中，function执行结束后则被弹出，因此Js解释器总是在栈顶上下文中执行。在生成新的上下文时，首先会绑定该上下文的变量对象，其中包括arguments和该函数中定义的变量；之后会创建属于该上下文的作用域链（scope chain），最后将this赋予这一function所属的Object，这一过程可以通过下图表示： this上文提到this被赋予function所属的Object，具体来说，当function是定义在global对中时，this指向global；当function作为Object的方法时，this指向该Object： var x = 1; var f = function()&#123; console.log(this.x);&#125;f(); // -&gt; 1var ff = function()&#123; this.x = 2; console.log(this.x);&#125;ff(); // -&gt; 2 x // -&gt; 2var o = &#123;x: &quot;o&apos;s x&quot;, f: f&#125;; o.f(); // &quot;o&apos;s x&quot; Scope chain上文提到，在function被执行时生成新的上下文时会先绑定当前上下文的变量对象，再创建作用域链。我们知道function的定义是可以嵌套在其他function所创建的上下文中，也可以并列地定义在同一个上下文中（如global）。作用域链实际上就是自下而上地将所有嵌套定义的上下文所绑定的变量对象串接到一起，使嵌套的function可以“继承”上层上下文的变量，而并列的function之间互不干扰： var x = &apos;global&apos;; function a()&#123; var x = &quot;a&apos;s x&quot;; function b()&#123; var y = &quot;b&apos;s y&quot;; console.log(x); &#125;; b();&#125;function c()&#123; var x = &quot;c&apos;s x&quot;; function d()&#123; console.log(y); &#125;; d();&#125;a(); // -&gt; &quot;a&apos;s x&quot; c(); // -&gt; ReferenceError: y is not defined x // -&gt; &quot;global&quot; y // -&gt; ReferenceError: y is not defined Closure如果理解了上文中提到的上下文与作用域链的机制，再来看闭包的概念就很清楚了。每个function在调用时会创建新的上下文及作用域链，而作用域链就是将外层（上层）上下文所绑定的变量对象逐一串连起来，使当前function可以获取外层上下文的变量、数据等。如果我们在function中定义新的function，同时将内层function作为值返回，那么内层function所包含的作用域链将会一起返回，即使内层function在其他上下文中执行，其内部的作用域链仍然保持着原有的数据，而当前的上下文可能无法获取原先外层function中的数据，使得function内部的作用域链被保护起来，从而形成“闭包”。看下面的例子： var x = 100; var inc = function()&#123; var x = 0; return function()&#123; console.log(x++); &#125;;&#125;;var inc1 = inc(); var inc2 = inc();inc1(); // -&gt; 0 inc1(); // -&gt; 1 inc2(); // -&gt; 0 inc1(); // -&gt; 2 inc2(); // -&gt; 1 x; // -&gt; 100 执行过程如下图所示，inc内部返回的匿名function在创建时生成的作用域链包括了inc中的x，即使后来赋值给inc1和inc2之后，直接在global context下调用，它们的作用域链仍然是由定义中所处的上下文环境决定，而且由于x是在function inc中定义的，无法被外层的global context所改变，从而实现了闭包的效果： this in closure我们已经反复提到执行上下文和作用域实际上是通过function创建、分割的，而function中的this与作用域链不同，它是由执行该function时当前所处的Object环境所决定的，这也是this最容易被混淆用错的一点。一般情况下的例子如下： var name = &quot;global&quot;; var o = &#123; name: &quot;o&quot;, getName: function()&#123; return this.name &#125;&#125;;o.getName(); // -&gt; &quot;o&quot; 由于执行o.getName()时getName所绑定的this是调用它的o，所以此时this == o；更容易搞混的是在closure条件下： var name = &quot;global&quot;; var oo = &#123; name: &quot;oo&quot;, getNameFunc: function()&#123; return function()&#123; return this.name; &#125;; &#125;&#125;oo.getNameFunc()(); // -&gt; &quot;global&quot; 此时闭包函数被return后调用相当于： getName = oo.getNameFunc(); getName(); // -&gt; &quot;global&quot; 换一个更明显的例子： var ooo = &#123; name: &quot;ooo&quot;, getName: oo.getNameFunc() // 此时闭包函数的this被绑定到新的Object&#125;;ooo.getName(); // -&gt; &quot;ooo&quot; 当然，有时候为了避免闭包中的this在执行时被替换，可以采取下面的方法： var name = &quot;global&quot;; var oooo = &#123; name: &quot;ox4&quot;, getNameFunc: function()&#123; var self = this; return function()&#123; return self.name; &#125;; &#125;&#125;;oooo.getNameFunc()(); // -&gt; &quot;ox4&quot; 或者是在调用时强行定义执行的Object：var name = &quot;global&quot;; var oo = &#123; name: &quot;oo&quot;, getNameFunc: function()&#123; return function()&#123; return this.name; &#125;; &#125;&#125;oo.getNameFunc()(); // -&gt; &quot;global&quot; oo.getNameFunc().bind(oo)(); // -&gt; &quot;oo&quot; 总结Js是一门很有趣的语言，由于它的很多特性是针对HTML中DOM的操作，因而显得随意而略失严谨，但随着前端的不断繁荣发展和Node的兴起，Js已经不再是”toy language”或是jQuery时代的”CSS扩展”，本文提到的这些概念无论是对新手还是从传统Web开发中过度过来的Js开发人员来说，都很容易被混淆或误解，希望本文可以有所帮助。 写这篇总结的原因是我在Github上分享的Learn javascript in one picture，刚开始有人质疑这只能算是一张语法表（syntax cheat sheet），根本不会涉及更深层的闭包、作用域等内容，但是出乎意料的是这个项目竟然获得3000多个star，所以不能虎头蛇尾，以上。 References Understanding Scope and Context in JavaScript this - JavaScript | MDN 闭包 - JavaScript | MDN 原文猛戳","tags":[{"name":"javascript","slug":"javascript","permalink":"http://dearxiaojie.top/tag/javascript/"},{"name":"概念理解","slug":"概念理解","permalink":"http://dearxiaojie.top/tag/概念理解/"}]},{"title":"javascript性能优化小知识","date":"2015-07-27T10:22:26.000Z","path":"article/2015-07-27-javascript性能优化小知识.html","text":"前面有一篇也是关于javascript性能方面的文章，是看了《高性能javascript》后的笔记，这是一篇自己在项目和学习过程中的积累，部分参考了一些学习博客。对面试和代码的编写都有帮助。 避免全局查找在一个函数中会用到全局对象存储为局部变量来减少全局查找，因为访问局部变量的速度要比访问全局变量的速度更快些。 字符串的连接如果要连接多个字符串，应该少使用+=，如s+=a;s+=b;s+=c;应该写成s+=a + b + c；而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用JavaScript数组来收集，最后使用join方法连接起来。 数字转换成字符串(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()字符串如’1322’转换成数字的时候可以在前面加’+’,如var str = &#39;123&#39;;var num = +str,那么typeof num为number 浮点数转换成整型很多人喜欢使用parseInt()，其实parseInt()是用于将字符串转换成数字，而不是浮点数和整型之间的转换，我们应该使用Math.floor()或者Math.round()。 使用DocumentFragment优化多次append一旦需要更新DOM,请考虑使用文档碎片来构建DOM结构，然后再将其添加到现存的文档中。 for (var i = 0; i &lt; 1000; i++) &#123; var el = document.createElement(&apos;p&apos;); el.innerHTML = i; document.body.appendChild(el); &#125; //可以替换为： var frag = document.createDocumentFragment(); for (var i = 0; i &lt; 1000; i++) &#123; var el = document.createElement(&apos;p&apos;); el.innerHTML = i; frag.appendChild(el); &#125; document.body.appendChild(frag); 使用一次innerHTML赋值代替构建dom元素对于大的DOM更改，使用innerHTML要比使用标准的DOM方法创建同样的DOM结构快得多。 var frag = document.createDocumentFragment(); for (var i = 0; i &lt; 1000; i++) &#123; var el = document.createElement(&apos;p&apos;); el.innerHTML = i; frag.appendChild(el); &#125; document.body.appendChild(frag); //可以替换为： var html = []; for (var i = 0; i &lt; 1000; i++) &#123; html.push(&apos;&lt;p&gt;&apos; + i + &apos;&lt;/p&gt;&apos;); &#125; document.body.innerHTML = html.join(&apos;&apos;); 使用事件代理任何可以冒泡的事件都不仅仅可以在事件目标上进行处理，目标的任何祖先节点上也能处理，使用这个知识就可以将事件处理程序附加到更高的地方负责多个目标的事件处理，同样，对于内容动态增加并且子节点都需要相同的事件处理函数的情况，可以把事件注册提到父节点上，这样就不需要为每个子节点注册事件监听了。另外，现有的js库都采用observe方式来创建事件监听,其实现上隔离了DOM对象和事件处理函数之间的循环引用,所以应该尽量采用这种方式来创建事件监听 缩短否定检测if (oTest != &apos;#ff0000&apos;) &#123; //do something&#125;if (oTest != null) &#123; //do something&#125;if (oTest != false) &#123; //do something&#125; //虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：if (!oTest) &#123; //do something&#125; 条件分支将条件分支，按可能性顺序从高到低排列：可以减少解释器对条件的探测次数在同一条件子的多（&gt;2）条件分支时，使用switch优于if：switch分支选择的效率高于if，在IE下尤为明显。4分支的测试，IE下switch的执行时间约为if的一半。使用三目运算符替代条件分支 if (a &gt; b) &#123; num = a; &#125; else &#123; num = b; &#125; //可以替换为： num = a &gt; b ? a : b; 续。。。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://dearxiaojie.top/tag/javascript/"},{"name":"性能优化","slug":"性能优化","permalink":"http://dearxiaojie.top/tag/性能优化/"}]},{"title":"jQuery常用方法归纳","date":"2015-06-27T01:16:35.000Z","path":"article/2015-06-27-jQuery常用方法归纳总结.html","text":"$.grep()$.grep( array, function(elementOfArray, indexInArray) [, invert ] ) 功能：查找满足过滤函数的数组元素： &lt;script src=&quot;js/jquery1.42.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function () &#123; var arr = [23,45,5,1,4,67,8,100,-2]; var arrGrep = $.grep(arr, function (element,index) &#123; return (index&lt;5)&amp;&amp;(element != 4);//整体返回一个数组 &#125;) alert(arrGrep);//23,45,5,1 &#125;) &lt;/script&gt; $.map()$.map( array, callback(elementOfArray, indexInArray) ) 功能：将一个数组中的所有元素转换到另一个数组中。 &lt;script src=&quot;js/jquery1.42.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(function () &#123; var arr = [5,1,4,67,8,100,-2]; var arrMap = $.map(arr, function (element,index) &#123; // return (index&lt;3)&amp;&amp;(element != 4);这里按布尔值返回 if(index&lt;3 &amp;&amp; element&lt; 4)&#123; return element; &#125; &#125;); alert(arrMap);//1 &#125;)&lt;/script&gt; mouseover()/mouserout()当鼠标进入/离开某个元素或它的后代元素时触发mouseover/mouseout事件。mouseover事件大多数时候会与 mouseout 事件一起使用。 mouseover/mouserout事件由于冒泡机制，经常在不需要的时候不小心触发，从而导致一些脚本问题。 mouseenter()/mouseleave()mouseenter/mouseleave当且仅当鼠标进入被选元素时才触发，当鼠标穿过任何子元素时不会触发。它不关心目标元素是否有子元素。 focusin()和focusout().focusin()：一个元素或它的子元素得到焦点时触发此事件.focusout()：一个元素或它的子元素失去焦点时触发此事件 与 focus() 方法不同的是，focusin() 方法在任意子元素获得焦点时也会触发。 &lt;body&gt; &lt;p&gt;&lt;input type=&quot;text&quot;&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;password&quot;&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt; &lt;script&gt; $( &quot;p&quot; ).focusin(function() &#123; $( this ).find( &quot;span&quot; ).css( &quot;display&quot;, &quot;inline&quot; ).fadeOut( 1000 ); &#125;); &lt;/script&gt;&lt;/body&gt; eq()和get().get()： 通过jQuery对象获取一个对应的DOM元素。.eq()：从集合的一个元素中构造新的jQuery对象 eq返回的是一个jQuery对象，get返回的是一个DOM对象。举个例子： $( &quot;li&quot; ).get( 0 ).css(&quot;color&quot;, &quot;red&quot;); //错误$( &quot;li&quot; ).eq( 0 ).css(&quot;color&quot;, &quot;red&quot;); //正确 那么，什么是DOM对象，什么又是jQuery对象呢？ DOM对象就是用js获得的对象，而juqery对象是用jQuery类库的选择器获得的对象。 如：var $obj = $(&quot;div&quot;);//jQuery对象 get方法本质上是把jQuery对象转换成DOM对象，但是css属于jQuery构造器的，DOM是不存在这个方法的，如果需要用jQuery的方法，我们必须这样写：var li = $(&quot;li&quot;).get(0);$(li).css(&quot;color&quot;,&quot;black&quot;);//用$包装filter() filter()方法:筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式。 filter(expression)：（字符串|函数）如果参数是字符串，则制定jQuery选择器，用于从包装集里删除所有与选择器不匹配的元素，最后留下与选择器匹配的元素；如果参数是函数，则用于确定筛选条件。为包装集里的每一个元素各调用一次该函数，函数调用返回值为false的任何元素都会从包装集里删除。 以下代码意为：保留第一个以及带有select类的元素 HTML 代码:&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;Hello Again&lt;/p&gt;&lt;p class=&quot;selected&quot;&gt;And Again&lt;/p&gt; jQuery 代码:$(&quot;p&quot;).filter(&quot;.selected, :first&quot;); 结果:&lt;p&gt;Hello&lt;/p&gt;, &lt;p class=&quot;selected&quot;&gt;And Again&lt;/p&gt; 再看一个function的例子，一个函数用来作为测试元素的集合。它接受一个参数index，这是元素在jQuery集合的索引。在函数， this指的是当前的DOM元素。 HTML 代码: &lt;p&gt;&lt;ol&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;p&gt;How are you?&lt;/p&gt; jQuery 代码:$(&quot;p&quot;).filter(function(index) &#123; return $(&quot;ol&quot;, this).length == 0;&#125;); 结果:&lt;p&gt;How are you?&lt;/p&gt; .bind()、.live()和.delegate()方法.bind()：绑定事件处理函数的最基本方式是使用.bind()方法。它和live()方法一样，接受两个参数： .bind(event type, event handler)两种绑定事件处理函数的方法： $(document).ready(function()&#123; $(&apos;.mydiv&apos;).bind(&apos;click&apos;,test); function test()&#123; alert(&quot;￼Hello World!&quot;); &#125; &#125;); 事件处理函数也可以使用匿名函数，如下所示： $(document).ready(function()&#123; $(&quot;#mydiv&quot;).bind(&quot;click&quot;,function()&#123; alert(&quot;￼Hello World!&quot;); &#125;)&#125;); .live()：live方法和bind方法的唯一区别在于.live()不仅作用于DOM中当前存在的元素，还作用于将来可能存在（动态生成）的元素$(document).ready(function()&#123;$(&apos;.box&apos;).live(&apos;click&apos;,function()&#123; $(this).clone().appendTo(&apos;.container&apos;); &#125;);&#125;);&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/div&gt; 使用live方法绑定事件的缺点在于它无法使用链式调用，那有没有既可以像live方法那样绑定事件，又可以支持链式调用的方法呢？答案就是下面的delegate方法。 delegate()方法：为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。从jQuery 1.7开始，.delegate()已经被.on()方法取代。语法： $(selector).delegate(childSelector,event type,function)参数说明： childSelector 必需。规定要附加事件处理程序的一个或多个子元素。 event 必需。规定附加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。 function 必需。规定当事件发生时运行的函数。$(document).ready(function()&#123; $(&apos;.container&apos;).delegate(&apos;.box&apos;,&apos;click&apos;,function()&#123; $(this).clone().appendTo(&apos;.container&apos;); &#125;);&#125;); delegate()会在以下两个情况下使用到： 1、如果你有一个父元素，需要给其下的子元素添加事件，这时你可以使用delegate()了，代码如下：$(&quot;ul&quot;).delegate(&quot;li&quot;, &quot;click&quot;, function()&#123; $(this).hide(); &#125;); 2、当元素在当前页面中不可用时，可以使用delegate() end()方法 end()方法：在jquery命令链内调用，以便退回到前一个包装集。每次过滤方法都会被压入栈中。当我们需要返回到前一个状态时，我们可以使用end() 进行出栈操作，来返回栈中的前一个状态。 end() 方法结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态。&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;ul class=&quot;one&quot;&gt;&lt;li class=&quot;two&quot;&gt;item 1&lt;/li&gt;&lt;li&gt;item 2&lt;/li&gt;&lt;li class=&quot;three&quot;&gt;item 3&lt;/li&gt;&lt;/ul&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(&apos;ul.one&apos;).find(&quot;.two&quot;).css(&quot;color&quot;,&quot;red&quot;).find(&apos;.three&apos;).css(&quot;background&quot;,&quot;blue&quot;);&lt;/script&gt; 在上面的代码例子中，我们只会看到item 1的字体颜色改变了，而背景颜色没有改变。这是因为第二个find()方法之前的状态返回的是红色字体的class值为two的对象，因此，第二次find()只会查找&lt;ul class=&quot;one&quot;&gt; 中的.two，使用end()方法修改该链式操作的代码如下：&lt;script type=&quot;text/javascript&quot;&gt; $(&apos;ul.one&apos;).find(&quot;.two&quot;).css(&quot;color&quot;,&quot;red&quot;).end().find(&apos;.three&apos;).css(&quot;background&quot;,&quot;blue&quot;);&lt;/script&gt; end()方法在这里是 返回调用 find() 之前的状态，也就是$(&#39;ul.one&#39;) toggleClass()toggleClass()方法：如果在元素中指定类名称不存在，则添加指定类名称；如果元素已经拥有指定类名称，则从元素中删除指定类名称。css(name,value)方法：设定指定的值到每个已匹配元素的指定的css样式属性 wrap()和wrapInner()wrap()和wrapInner()：前者把所有匹配的元素用其他元素的结构化标记包裹起来；后者将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来。看下面一个wrap()的例子：用原先div的内容作为新div的class，并将每一个元素包裹起来 HTML 代码:&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;inner&quot;&gt;Hello&lt;/div&gt;&lt;div class=&quot;inner&quot;&gt;Goodbye&lt;/div&gt;&lt;/div&gt; jQuery 代码:$(&apos;.inner&apos;).wrap(function() &#123; return &apos;&lt;div class=&quot;&apos; + $(this).text() + &apos;&quot; /&gt;&apos;; &#125;); 结果:&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;Hello&quot;&gt; &lt;div class=&quot;inner&quot;&gt;Hello&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;Goodbye&quot;&gt; &lt;div class=&quot;inner&quot;&gt;Goodbye&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 接着再看下面一个wrapInner()的例子: 用原先div的内容作为新div的class，并将每一个元素包裹起来 HTML 代码:&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;inner&quot;&gt;Hello&lt;/div&gt; &lt;div class=&quot;inner&quot;&gt;Goodbye&lt;/div&gt;&lt;/div&gt; jQuery 代码:$(&apos;.inner&apos;).wrapInner(function() &#123; return &apos;&lt;div class=&quot;&apos; + $(this).text() + &apos;&quot; /&gt;&apos;;&#125;); 结果:&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;div class=&quot;Hello&quot;&gt;Hello&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;inner&quot;&gt; &lt;div class=&quot;Goodbye&quot;&gt;Goodbye&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; detach、empty和remove方法.detach( [selector ] )：从DOM中去掉所有匹配的元素。当需要移走一个元素，不久又将该元素插入DOM时，就需要用到detach方法。 .empty()：这个方法不仅移除子元素（和其他后代元素），同样移除元素里的文本。因为，根据说明，元素里任何文本字符串都被看做是该元素的子节点。 .remove( [selector ] )：将元素从DOM中移除，同时移除元素上的事件及 jQuery 数据 empty()的例子：&lt;ul class=&quot;one&quot;&gt; &lt;li class=&quot;two&quot;&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li class=&quot;three&quot;&gt;item 3&lt;/li&gt; &lt;/ul&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(&quot;.two&quot;).empty();//item 1 文本节点被移除，li的小圆点还在，证明li没有被移除 &lt;/script&gt; 看下面一个remove()例子： 描述：从DOM中把所有段落删除 HTML 代码:&lt;p&gt;Hello&lt;/p&gt; how are &lt;p&gt;you?&lt;/p&gt; jQuery 代码:$(&quot;p&quot;).remove(); 结果:how are val()方法val()：获得匹配元素的当前值。描述:获取文本框中的值 jQuery 代码:$(&quot;input&quot;).val(); jQuery 代码:$(&quot;input&quot;).val(&quot;hello world!&quot;); each()和map()each()和map()方法：each返回的是原来的数组，并不会新创建一个数组。而map方法会返回一个新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。 each方法：定义一个空数组，通过each方法，往数组添加ID值；最后将数组转换成字符串后，alert这个值；$(function()&#123; var arr = []; $(&quot;:checkbox&quot;).each(function(index)&#123; arr.push(this.id); &#125;); var str = arr.join(&quot;,&quot;); alert(str);&#125;) map方法:将每个:checkbox执行return this.id；并将这些返回值，自动的保存为jQuery对象，然后用get方法将其转换成原生Javascript数组，再使用join方法转换成字符串，最后alert这个值；$(function()&#123; var str = $(&quot;:checkbox&quot;).map(function() &#123; return this.id; &#125;).get().join(); alert(str);&#125;) 当有需一个数组的值的时候，用map方法，很方便。 $.each()jQuery的$(selector).each()函数可以遍历循环选中的子元素，而jQuery的$.each()函数则可以遍历任何集合，包括对象和数组，它接收要遍历的集合以及一个回调函数，回调函数每次传递一个数组的下标和这个下标所对应的数组的值。 $.each(array,callback); $.each(object,callback); 数组实例$.each( [ &quot;one&quot;, &quot;two&quot;, &quot;three&quot; ], function( i, l )&#123; alert( &quot;index #&quot; + i + &quot;: &quot; + l );&#125;); callback(索引,索引值)DEMO：index 0: oneindex 1: two;index 2: three 对象实例$.each(&#123; name: &quot;trigkit4&quot;, lang: &quot;JS&quot; &#125;, function( k, v ) &#123; alert( &quot;Key: &quot; + k + &quot;, Value: &quot; + v );&#125;); callback(键,值) Demo:Key: name, Value: trigkit4Key: lang, Value: JS .trigger()描述: 根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为。 当相应的事件发生时，任何通过.on()、.bind()或一个快捷方法绑定的事件处理程序将被触发。但是，它们可以用.trigger()方法手动触发&lt;script type=&quot;text/javascript&quot;&gt; $(document).bind(&apos;abc&apos;,function()&#123; console.log(&apos;hello&apos;);&#125;);$(document).trigger(&apos;abc&apos;);//Output &apos;hello&apos;;&lt;/script&gt; .attr()和.prop().attr()：获取匹配的元素集合中的第一个元素的属性的值 或 设置每一个匹配元素的一个或多个属性。 .prop()：同上jQuery 1.6之前 ，.attr()方法在取某些 attribute 的值时，会返回 property 的值，这就导致了结果的不一致。从 jQuery 1.6 开始， .prop()方法 方法返回 property 的值,而 .attr() 方法返回 attributes 的值。 例如, selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, 和 defaultSelected 应使用.prop()方法进行取值或赋值。 他们没有相应的属性（attributes），只有特性(property)。 .after()和.insertAfter().after()描述:在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。 HTML 代码:&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt; jQuery 代码:$(&quot;p&quot;).after( $(&quot;b&quot;) ); 结果:&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt; insertAfter()描述:把所有段落插入到一个元素之后。与 $(“#foo”).after(“p”)相同 HTML 代码: &lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id=&quot;foo&quot;&gt;Hello&lt;/div&gt; jQuery 代码: $(&quot;p&quot;).insertAfter(&quot;#foo&quot;); 结果: &lt;div id=&quot;foo&quot;&gt;Hello&lt;/div&gt;&lt;p&gt;I would like to say: &lt;/p&gt; .before()和.insertBefore()before()描述:在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。 HTML 代码: &lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt; jQuery 代码: $(&quot;p&quot;).before( $(&quot;b&quot;) ); 结果: &lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt; .append()和.appendTo()append()描述：向所有段落中追加一些HTML标记。 HTML 代码: &lt;p&gt;I would like to say: &lt;/p&gt; jQuery 代码: $(&quot;p&quot;).append(&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;); 结果: &lt;p&gt;I would like to say: &lt;b&gt;Hello&lt;/b&gt;&lt;/p&gt; appendTo()描述：新建段落追加div中并加上一个class HTML 代码:&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt; jQuery 代码:$(&quot;&lt;p/&gt;&quot;) .appendTo(&quot;div&quot;) .addClass(&quot;test&quot;) .end() .addClass(&quot;test2&quot;); 结果:&lt;div&gt;&lt;p class=&quot;test test2&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p class=&quot;test&quot;&gt;&lt;/p&gt;&lt;/div&gt; .prepend()和.prependTo()prepend()描述：向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。 HTML 代码: &lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;` jQuery 代码: $(&quot;p&quot;).prepend( $(&quot;b&quot;) ); 结果: &lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;I would like to say: &lt;/p&gt; prependTo()描述：把所有段落追加到ID值为foo的元素中。 HTML 代码: &lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id=&quot;foo&quot;&gt;&lt;/div&gt; jQuery 代码: $(&quot;p&quot;).prependTo(&quot;#foo&quot;); 结果: &lt;div id=&quot;foo&quot;&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;/div&gt; 总结1. .insertAfter()和.after()：在现存元素的外部，从后面插入元素 2. .insertBefore()和.before()：在现存元素的外部，从前面插入元素 3. .appendTo()和.append()：在现存元素的内部，从后面插入元素 4. .prependTo()和.prepend() ：在现存元素的内部，从前面插入元素 .data( key, value ).data()方法允许我们在DOM元素上绑定任意类型的数据, $(&quot;div&quot;).data(&quot;test&quot;, &#123; first: 16, last: &quot;pizza!&quot; &#125;); .promise( [type ] [, target ] )在 Javascript 中，有外一种异步处理模式被叫做 Promises， CommonJS 标准委员会于是发布了一个规范，就把这个 API 叫做 Promises 了。 Promise 背后的概念非常简单，有两部分: Deferreds，定义工作单元，Promises，从 Deferreds 返回的数据。Promise 不同于回调的很重要的一个点是，你可以在 Promise 状态变成执行(resolved)之后追加处理句柄。这就允许你传输数据，而忽略它是否已经被应用获取，然后缓存它，等等之类的操作，因此你可以对数据执行操作，而不管它是否已经或者即将可用。 你可以给一个 promise 追加多个处理(then())。Promise API 好玩的地方在于允许链式处理:&lt;!-- lang: js --&gt;promise .then(doSomething) .then(doSomethingElse) .then(doSomethingMore) .catch(logError); 原文见：trigkit4","tags":[{"name":"web前端","slug":"web前端","permalink":"http://dearxiaojie.top/tag/web前端/"},{"name":"jQuery","slug":"jQuery","permalink":"http://dearxiaojie.top/tag/jQuery/"}]},{"title":"XMLHttpRequest学习笔记","date":"2015-05-29T17:16:54.000Z","path":"article/2015-05-29-XMLHttpRequest学习笔记.html","text":"对于xhr的学习后的一个例子&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;first&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot; /&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;请求数据&lt;/button&gt; &lt;div id=&quot;myDiv&quot;&gt; &lt;table class=&quot;table table-bordered table-condensed&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;number&lt;/th&gt; &lt;th&gt;title&lt;/th&gt; &lt;th&gt;author&lt;/th&gt; &lt;th&gt;year&lt;/th&gt; &lt;th&gt;price&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;mytbody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;getAllResponseHeaders()&lt;/p&gt; &lt;p id=&quot;pp&quot;&gt;&lt;/p&gt; &lt;p&gt;getResponseHeader(&quot;Last-Modified&quot;)&lt;/p&gt; &lt;p id=&quot;ppp&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.7.2.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; function loadXHR() &#123; var XHR; if (window.XMLHttpRequest) &#123; XHR = new XMLHttpRequest(); &#125; else &#123; XHR = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; XHR.open(&quot;GET&quot;, &quot;./text/books.xml&quot;, true); //通过 XML HTTP 加载 XML 文件 XHR.send(); XHR.onreadystatechange = function() &#123; if (XHR.readyState == 4 &amp;&amp; XHR.status == 200) &#123; // 4 = &quot;loaded&quot; 200 = “OK” var xmlDoc = XHR.responseXML; var txt = &quot;&lt;tr&gt;&quot;; var x = xmlDoc.getElementsByTagName(&quot;book&quot;); for (var i = 0; i &lt; x.length; i++) &#123; //把 XML 文件显示为 HTML 表格 txt += &quot;&lt;td&gt;&quot; + i + &quot;&lt;/td&gt;&quot;; xx = x[i].getElementsByTagName(&quot;title&quot;); txt += &quot;&lt;td&gt;&quot; + xx[0].childNodes[0].nodeValue + &quot;&lt;/td&gt;&quot;; xx = x[i].getElementsByTagName(&quot;author&quot;); txt += &quot;&lt;td&gt;&quot; + xx[0].childNodes[0].nodeValue + &quot;&lt;/td&gt;&quot;; xx = x[i].getElementsByTagName(&quot;year&quot;); txt += &quot;&lt;td&gt;&quot; + xx[0].childNodes[0].nodeValue + &quot;&lt;/td&gt;&quot;; xx = x[i].getElementsByTagName(&quot;price&quot;); txt += &quot;&lt;td&gt;&quot; + xx[0].childNodes[0].nodeValue + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; &#125; document.getElementById(&quot;mytbody&quot;).innerHTML = txt; //通过 XML HTTP 进行一次 HEAD 请求 document.getElementById(&quot;pp&quot;).innerHTML = XHR.getAllResponseHeaders(); //通过 XML HTTP 进行一次指定的 HEAD 请求 document.getElementById(&quot;ppp&quot;).innerHTML = XHR.getResponseHeader(&quot;Last-Modified&quot;); &#125; &#125; &#125; document.getElementById(&quot;btn&quot;).onclick = function() &#123; loadXHR(); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;//books.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;bookstore&gt; &lt;book category=&quot;children&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;cooking&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot; cover=&quot;paperback&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; &lt;author&gt;Erik T. Ray&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;XQuery Kick Start&lt;/title&gt; &lt;author&gt;James McGovern&lt;/author&gt; &lt;author&gt;Per Bothner&lt;/author&gt; &lt;author&gt;Kurt Cagle&lt;/author&gt; &lt;author&gt;James Linn&lt;/author&gt; &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;49.99&lt;/price&gt; &lt;/book&gt;&lt;/bookstore&gt;","tags":[{"name":"XMLHttpRequest","slug":"XMLHttpRequest","permalink":"http://dearxiaojie.top/tag/XMLHttpRequest/"}]},{"title":"web前端笔试练习","date":"2015-05-28T00:50:13.000Z","path":"article/2015-05-28-web前端笔试练习.html","text":"1.将一个32位十进制数组转化成2进制后，翻转这个2进制数，再转换成十进制数//res1function reverseB(num) &#123; var bits = num.toString(2); var len = 32 - bits.length; bits = bits.split(&quot;&quot;).reverse().join(&quot;&quot;); while(len--) &#123; bits+=&quot;0&quot;; &#125; return parseInt(bits,2);&#125;console.log(reverseB(43261596));//964176192 //res2function reverseBs(n)&#123; var m = 0; for (var i = 0; i &lt; 31; i++) &#123; m|=(n&amp;1); n &gt;&gt;= 1; m &lt;&lt;= 1; &#125; m|=(n&amp;01); return m; &#125;console.log(reverseBs(43261596));//964176192 2.罗马数组转换成十进制数字 var romObj = &#123;I:1, V:5, X:10, L:50, C:100, D:500, M:1000&#125;;var romanToInt = function(str) &#123; var sum = 0; for(var i = 0; i &lt; str.length; i++) &#123; rom1 = romObj[str.substring(i,i+1)]; rom2 = romObj[str.substring(i+1,i+2)]; if(str.substring(i+1,i+2) !== &quot;&quot; &amp;&amp; rom1 &lt; rom2) &#123; sum += rom2 - rom1; i++; &#125; else sum += rom1; &#125; return sum;&#125;;console.log(romanToInt(&apos;II&apos;)); 3.总共有n阶楼梯，每次只能上一步或者两部，要到达楼上有多少种方式分析，当列举了当n为1,2,3,4,5时得出有1,2,3,5,8种方式就是一个斐波拉契数列 var climbStairs = function(n) &#123; var a = 1, b = 2, sum = 1; if(n == 1) return a; if(n == 2) return b; n -= 2; while(n--)&#123; sum = a + b; a = b; b = sum; &#125; return sum;&#125;;console.log(climbStairs(3)); 4.给数组增加一种方法，可以去除数组中的重复项并返回数组 //fun1--hashArray.prototype.delWeight = function()&#123; var n=[],r=[]; //n为hash表，r为临时数组 for(var i = 0; i &lt; this.length; i++) //遍历当前数组 &#123; if (!n[this[i]]) //如果hash表中没有当前项 &#123; n[this[i]] = true; //存入hash表 r.push(this[i]); //把当前数组的当前项push到临时数组里面 &#125; &#125; return r;&#125;var arr = [1,1,1,1,1,2,2,33,4,5,6,5,6];console.log(arr.delWeight());//fun2--利用数组的indexOf方法function delWeight (arr) &#123; var result = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (result.indexOf(arr[i]) == -1) result.push(arr[i]); &#125; return result;&#125; 5.对不确定数量的数进行排序 function mySort() &#123; var tags = new Array();//使用数组作为参数存储容器 for(var i = 0,len = arguments.length;i&lt;len;i++)&#123; tags.push(arguments[i]); &#125; tags.sort(function(a,b)&#123; return a - b; &#125;); return tags;//返回已经排序的数组&#125;var result = mySort(50,11,16,32,24,99,57,100);//传入参数个数不确定console.info(result);//显示结果 6.用短路求值的方式求前n项和 function sumr(n) &#123; var ans = n; ans &amp;&amp; (ans += sumr(n-1)); return ans;&#125;console.log(sumr(5)); 7.正则表达式判断一个数是不是素数 function is_prime(x)&#123; var r=[],s=&quot;&quot;; while(r.length&lt;x)&#123; r.push(&quot;1&quot;); &#125; s=r.join(&quot;&quot;); return !/^1?$|^(11+?)\\1+$/.test(s);&#125;console.log(is_prime(5));console.log(is_prime(10));console.log(is_prime(13));console.log(is_prime(60));console.log(is_prime(99)); 8.辗转相除求最大公约数 function ff(a,b)&#123; if (b&gt;a) ff(b,a); return !(a%b)?b:ff(b,a%b);&#125;console.log(ff(10,3)); 9.Json数据按照某一字段排序的方法 var stuJson = [&#123; name: &quot;daming&quot;, age: 21, weight: 66, sex:&quot;boy&quot; &#125;, &#123; name: &quot;lisa&quot;, age: 19, weight: 45, sex:&quot;girl&quot; &#125;, &#123; name: &quot;lili&quot;, age: 20, weight: 50, sex:&quot;boy&quot;&#125;]; //按age升序 stuJson.sort(function(a,b)&#123; return a.age - b.age; &#125;);console.log(stuJson); 10.求一个数组中的最大最小值 var arr = [32,42,12,42,21,23,56,75,3,33,53,23,36];var min = Math.min.apply(null,arr); console.log(min);var aMax = Math.max.apply(null,arr); console.log(aMax); 11.将一个匿名函数作为函数的一个参数 function map(f,a) &#123; var result = [], // Create a new Array i; for (i = 0; i != a.length; i++) result[i] = f(a[i]); return result;&#125; //调用的时候实现这个引用参数函数 var re = map(function(x) &#123;return x * x * x&#125;, [0, 1, 2, 5, 10]); console.log(re);//[0, 1, 8, 125, 1000]. 12.字符传中的大小写相互转换 function upperToggleLower(str)&#123; var s =&quot;&quot;; for(var i = 0,len = str.length;i&lt;len;i++)&#123; if (str[i]&lt;=&apos;z&apos;&amp;&amp;str[i]&gt;=&apos;a&apos;||str[i]&lt;=&apos;Z&apos;&amp;&amp;str[i]&gt;=&apos;A&apos;) &#123; s+=String.fromCharCode(str.charCodeAt(i)^32); &#125;else&#123; s+=str[i]; &#125; &#125; return s;&#125;var str = &apos;abcdef FEDCBA&apos; ;console.log(upperToggleLower(str));//&quot;ABCDEF fedcba&quot; 13.js快排 function quick_sort(array,l,r)&#123; if(l &lt; r)&#123; var i = l,j = r,x = array[l]; while(i &lt; j)&#123; while(i &lt; j &amp;&amp; array[j]&gt;=x)&#123; j--; &#125; if(i &lt; j)&#123; array[i++] = array[j]; &#125; while(i &lt; j &amp;&amp; array[i] &lt; x)&#123; i++; &#125; if(i &lt; j)&#123; array[j--] = array[i]; &#125; &#125; array[i] = x; quick_sort(array,l,i -1 ); quick_sort(array,i + 1,r); &#125; return array;&#125; 14.给出2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字 /* * @param A: Array of integers. * @return: The single number. */int singleNumber(vector&lt;int&gt; &amp;A) &#123; if (!A.size()) return 0; int a = A[0]; for(int i = 1;i&lt;A.size();i++) &#123; a^=A[i]; &#125; return a;&#125; 15.给出两个整数a和b, 求他们的和, 但不能使用 + 等数学运算符。 /* * @param a: The first integer * @param b: The second integer * @return: The sum of a and b */ int aplusb(int a, int b) &#123; int n1; do&#123; n1 = a ^ b; b = (a &amp; b) &lt;&lt; 1; a = n1; &#125;while(b != 0); return n1; &#125; 16.计算在一个 32 位的整数的二进制表式中有多少个 1. /* * @param num: an integer * @return: an integer, the number of ones in num */ int countOnes(int num) &#123; int count = 0; while(num!=0) &#123; num = num&amp;(num-1); count++; &#125; return count; &#125; 17.找到单链表倒数第n个节点，保证链表中节点的最少数量为n。 /** * Definition of ListNode * class ListNode &#123; * public: * int val; * ListNode *next; * ListNode(int val) &#123; * this-&gt;val = val; * this-&gt;next = NULL; * &#125; * &#125; * @param head: The first node of linked list. * @param n: An integer. * @return: Nth to last node of a singly linked list. */ ListNode *nthToLast(ListNode *head, int n) &#123; if (!head) return NULL; ListNode *h,*d; h = d = head; while(--n) &#123; h = h-&gt;next; &#125; while(h-&gt;next!=NULL)&#123; h = h-&gt;next; d = d-&gt;next; &#125; return d; &#125; 18.写出一个高效的算法来搜索 m × n矩阵中的值。 /** * 这个矩阵具有以下特性： * 1.每行中的整数从左到右是排序的。 * 2.每行的第一个数大于上一行的最后一个整数。 * @param matrix, a list of lists of integers * @param target, an integer * @return a boolean, indicate whether matrix contains target */ bool searchMatrix(vector&lt;vector&lt;int&gt; &gt; &amp;matrix, int target) &#123; if(!matrix.size()) return false; int i,j; for(i = 0; i &lt; matrix.size(); i++) &#123; if(target &lt; matrix[i][0]) break; if(target == matrix[i][0]) return true; &#125; i--; for(j = 0;j &lt; matrix[i].size();j++) if(target == matrix[i][j]) return true; return false; &#125; 19.设计一种方法，将一个字符串中的所有空格替换成 %20 。 /** * 你可以假设该字符串有足够的空间来加入新的字符，且你得到的是“真实的”字符长度 * @param string: An array of Char * @param length: The true length of the string * @return: The true length of new string */ int replaceBlank(char string[], int length) &#123; // Write your code here int space_cnt = 0; int new_length = 0; char *p,*q; for(int i = 0; i &lt; length; i++) &#123; if (string[i] == &apos; &apos;) space_cnt++; &#125; new_length = space_cnt * 2 +length; p = string + (length - 1); q = string + (new_length - 1); while(p != q) &#123; if(*p == &apos; &apos;) *q = &apos;0&apos;,q--,*q = &apos;2&apos;,q--,*q = &apos;%&apos;; else *q = *p; p--; q--; &#125; return new_length; &#125; 20.统计一个字符串中每个单词的个数 /** *@param &#123;string&#125; str 输入的字符串 *@return &#123;Object&#125; o 单词及对应数量 */function countWordNum(str) &#123; if (!str) return ; var wordsArr = str.split(&apos; &apos;); var o = &#123;&#125;; for (var i = 0, len = wordsArr.length; i &lt; len; i++)&#123; if (wordsArr[i] in o) &#123; //or if (o[wordsArr[i]]) &#123; or if (o.hasOwnProperty(wordsArr[i])) &#123; o[wordsArr[i]]++; &#125; else &#123; o[wordsArr[i]] = 1; &#125; &#125; return o;&#125; 21.给你六种面额 1、5、10、20、50、100 元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0~10000的非负整数）的不同组合的个数 public class changeDP &#123; static int v [] = &#123;1, 5, 10, 20, 50, 100&#125;; public static int change (int n, int i)&#123; if (n &lt; 0) return 0; if (n == 0) return 1; if (i &lt; 0) return 0; return change(n,i-1)+change(n-v[i],i); &#125; public static void main (String[] args)&#123; System.out.println(change(100,v.length-1)); &#125;&#125; 22.给定非空整型数组 arr 和整数 limit ，两次从 arr 中随机抽取元素（可能抽到同一个元素），获得整数 x ,y ，得到和 s = x + y 。求所有不超过 limit 的 s 值中的最大数。 function limitedMaxSum(arr, limit) &#123; var max = 0; for (var i = 0, len = arr.length; i &lt; len; i++) &#123; for(var j = 0; j &lt; len; j++) &#123; var sum = arr[i] + arr[j]; if (sum &lt;= limit &amp;&amp; sum &gt;= max) &#123; max = sum; &#125; &#125; &#125; return max;&#125; 持续更新ing…","tags":[{"name":"web前端","slug":"web前端","permalink":"http://dearxiaojie.top/tag/web前端/"},{"name":"笔试","slug":"笔试","permalink":"http://dearxiaojie.top/tag/笔试/"}]},{"title":"CSS选择器","date":"2015-05-26T13:17:00.000Z","path":"article/2015-05-26-CSS选择器.html","text":"层次选择器 $(&quot;body &gt; div&quot;) body中子元素中的div $(&quot;#one + div&quot;) id为one的下一个紧挨着的div(兄弟) $(&quot;#two ~ div&quot;) id为two的后面的所有div(兄弟) 拓展 $(&quot;#one&quot;).sibling(&quot;div&quot;) id为one的所有div兄弟元素 $(&quot;#one&quot;).nextAll(&quot;span&quot;) id为one的后面所有span元素 $(&quot;#one&quot;).prevAll(&quot;div&quot;) id为one的前面的所有的div $(&quot;#one&quot;).nextAll(&quot;span:first&quot;) id为one的后面所有span元素的第一个 过滤选择器：以”:”开头 $(&quot;div:first&quot;) 第一个div $(&quot;div:last&quot;) 最后一个div $(&quot;div:not(.one)&quot;) class不为one的div $(&quot;div:even&quot;) 索引值偶数div $(&quot;div:odd&quot;) 索引值奇数div $(&quot;div:gt(3)&quot;) 索引值大于3的div $(&quot;div:eq(3)&quot;) 索引值等于3的div $(&quot;div:lt(3)&quot;) 索引值小于3的div $(&quot;li:gt(1):lt(4)&quot;) 不是第2个到第5个，而是在第二个的基础上增加4 $(&quot;:header&quot;) 所有的标题元素 $(&quot;:animated&quot;) 正在执行动画的所有元素 内容过滤选择器 $(&quot;div:contains(&#39;ss&#39;)&quot;) 文本含有ss的div元素 $(&quot;div:empty&quot;) 文本为空的div元素 $(&quot;div:has(.mini)&quot;) 含有class为mini的所有div元素 $(div:parent)或者$(&quot;div:not(:empty)&quot;) 所有非空的div元素 可见性过滤选择器 $(&quot;div:visible&quot;) 所有可见的div $(&quot;div:hidden&quot;).show(time) 所有不可见的div元素显示，time为时间，单位为毫秒 $(&quot;input:hidden&quot;).val() 所有不可见的input元素的value 属性过滤选择器 $(&quot;div:[title]&quot;) 含有属性title的div元素 $(&quot;div:[title==&#39;test&#39;]&quot;) title属性等于test的div元素 $(&quot;div:[title!=&#39;test&#39;]&quot;) title属性不等于test的div元素，包括没有title属性的元素 $(&quot;div:[title^=&#39;te&#39;]&quot;) title属性以te开始的div元素 $(&quot;div:[title$=&#39;est&#39;]&quot;) title属性以est结束的div元素 $(&quot;div:[title*=&#39;es&#39;]&quot;) title属性值含有es的div元素 $(&quot;div:[id][title*=&#39;es&#39;]&quot;) 有id属性的div元素中的title属性值中含有es的div元素 $(&quot;div:[title][title!=&#39;test&#39;]&quot;) 含有title属性，且title属性值不为test的div元素 子元素过滤选择器（冒号前面有个空格，选取子元素需要在选取器前加空格） $(&quot;.one :nth-child(2)&quot;) class为one的第二个子元素，不是索引值为2 $(&quot;.one :first-child&quot;) class为one的第一个子元素 $(&quot;.one :last-child&quot;) class为one的最后一个子元素 $(&quot;.one :only-child&quot;) class为one的只有一个节点的节点元素 $(&quot;div.one :nth-child(2)&quot;) class为one的第二个div子元素 表单对象属性过滤选择器 $(&quot;:text:enabled&quot;).val(&quot;hello&quot;) 使所有可用的单行文本框的value值变为hello $(&quot;:text:disabled&quot;).val(&quot;hello&quot;) 设置所有不可用单行文本框value值为hello $(&quot;:checkbox[name=&#39;haha&#39;]:checked&quot;).length 多选框name为haha的被选中的个数 $(&quot;select :selected&quot;).length select的option子节点，冒号前加空格，下拉选择框的选中的长度 $(&quot;select :selected&quot;).val() 因为$(“select :selected”)选中的是一个数组，当有多个元素时，.val()获取的是第一个选中的值。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://dearxiaojie.top/tag/CSS/"}]},{"title":"2015阿里web前端笔试题（部分）","date":"2015-05-25T20:14:35.000Z","path":"article/2015-05-25-2015阿里web前端笔试题（部分）.html","text":"1.给定一个随机数组，数组可能包含数组（也就是说数组元素可能为数组）。要求用js实现一个函数，返回该数组中所有元素。例如，例如：数组[2,3,[4,6,[1,8]],12,10]，返回结果为：[2,3,4,6,1,8,12,10] function getArray(arr) &#123; var arrs = []; for(var i=0,l=arr.length;i &lt; l;i++) &#123; if(!Array.isArray(arr[i])) arrs.push(arr[i]); else arrs = arrs.concat( getArray(arr[i]) ); &#125; return arrs;&#125; 2.用js实现随机选取10–100之间的不同的10个数字，存入一个数组，并降序排序 var aArray = []; var i = 0; for (i = 0; i &lt; 10; i++) &#123; randomNub(); &#125; aArray.sort(function (a, b) &#123; return b - a &#125;); document.write(aArray) function randomNub() &#123; var nowNub = parseInt(Math.random() * 100); if (nowNub &lt; 10) &#123; randomNub(); return; &#125; for (var j = 0; j &lt; aArray.length; j++) &#123; if (nowNub == aArray[j]) &#123; randomNub(); return; &#125; &#125; aArray.push(nowNub);&#125; 3.下面代码希望在点击每段内容的时候给它加个灰色背景，可是下面这段代码好像没有满足需求，请帮忙修改下。 for (var i = 0; i &lt; document.getElementsByTagName(&apos;p&apos;).length; i++) &#123; var item = document.getElementsByTagName(&apos;p&apos;) [i]; (function (j) &#123; document.getElementsByTagName(&apos;p&apos;) [i].onclick = function () &#123; item.style.backgroundColor = &apos;#eee&apos;; &#125; &#125;(i))&#125;//修改后for (var i = 0; i &lt; document.getElementsByTagName(&apos;p&apos;).length; i++) &#123; var item = document.getElementsByTagName(&apos;p&apos;) [i]; (function (j) &#123; document.getElementsByTagName(&apos;p&apos;) [i].onclick = function () &#123; this.style.backgroundColor = &apos;#eee&apos;; &#125; &#125;(i))&#125; 4.为字符串实现一个render方法，实现下面的变量替换功能 var greeting = &apos;my name is $&#123;name&#125;, age $&#123;age&#125;&apos;; var result = greeting.render(&#123;name: &apos;XiaoMing&apos;, age: 11&#125;); console.log(result); //my name is XiaoMing, age 11 String.prototype.render = function (Object) &#123; var _$this = this; var keys = new Array(); for (var p in Object) if (Object.hasOwnProperty(p)) keys.push(p); for (i = 0; i &lt; keys.length; i++) &#123; (function (index) &#123; var s = &apos;$&#123;&apos; + keys[index] + &apos;&#125;&apos;; str = _$this.replace(s, Object[keys[index]]); _$this = str; &#125;) (i); &#125; return str &#125; var greeting = &apos;my name is $&#123;name&#125;, age $&#123;age&#125;&apos;; var result = greeting.render(&#123; name: &apos;XiaoMing&apos;, age: 11 &#125;); console.log(result);//my name is XiaoMing, age 11other: String.prototype.render = function (Object) &#123; var _this = this; for (var p in Object) if (Object.hasOwnProperty(p)) &#123; var s = &apos;$&#123;&apos; + p + &apos;&#125;&apos;; str = _this.replace(s, Object[p]); _this = str; &#125; return str &#125; var greeting = &apos;my name is $&#123;name&#125;, age $&#123;age&#125;&apos;; var result = greeting.render(&#123; name: &apos;XiaoMing&apos;, age: 11 &#125;); console.log(result); //my name is XiaoMing, age 11 5.对json格式中的某一字段进行排序 eg：var stuJson = [&#123; name: &quot;daming&quot;, age: 21, weight: 66, sex:&quot;boy&quot; &#125;, &#123; name: &quot;lisa&quot;, age: 19, weight: 45, sex:&quot;girl&quot; &#125;, &#123; name: &quot;lili&quot;, age: 20, weight: 50, sex:&quot;boy&quot;&#125;]; //eg:按age升序stuJson.sort(function(a,b)&#123; return a.age - b.age;&#125;);console.log(stuJson);//[ &#123; name: &apos;lisa&apos;, age: 19, weight: 45, sex: &apos;girl&apos; &#125;, //&#123; name: &apos;lili&apos;, age: 20, weight: 50, sex: &apos;boy&apos; &#125;, //&#123; name: &apos;daming&apos;, age: 21, weight: 66, sex: &apos;boy&apos; &#125; ] 6.用一句语句对数组去最小或最大值 eg:var arr = [32,42,12,42,21,23,56,75,3,33,53,23,36]; var aMin = Math.min.apply(null,arr); console.log(min);//3 var aMax = Math.max.apply(null,arr);//75 console.log(aMax);","tags":[{"name":"web前端","slug":"web前端","permalink":"http://dearxiaojie.top/tag/web前端/"},{"name":"笔试","slug":"笔试","permalink":"http://dearxiaojie.top/tag/笔试/"}]},{"title":"两个iframe框滚动条联动以及iframe窗口高宽自适应","date":"2015-05-25T20:03:05.000Z","path":"article/2015-05-25-两个iframe框滚动条联动以及iframe窗口高宽自适应.html","text":"由于iframe没有onsccoll方法，所以采用把iframe放进固定大小且带有滑动条的div中，然后先给iframe一个适合的宽度，页面加载后再让iframe窗口自适应src链接的页面。 &lt;div id=&quot;div1&quot; style=&quot;width:620px;height:500px ; float:left;overflow:scroll&quot; onscroll=&quot;funcsrcoll1()&quot;&gt; &lt;iframe name=&quot;left&quot; id=&quot;left&quot; scrolling=&quot;no&quot; width=&quot;600px&quot; height=&quot;500px&quot; src=&quot;2.html&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div id=&quot;div2&quot; style=&quot;width:620px; height:500px ;float:left;overflow:scroll&quot; onscroll=&quot;funcsrcoll2()&quot;&gt; &lt;iframe name=&quot;right&quot; id=&quot;right&quot; scrolling=&quot;no&quot; width=&quot;600px&quot; height=&quot;500px&quot; src=&quot;3.html&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script&gt; //控制两个div的滚动条联动，便于页面对比 function funcsrcoll1() &#123; div2.scrollLeft = div1.scrollLeft; div2.scrollTop = div1.scrollTop; &#125; function funcsrcoll2() &#123; div1.scrollLeft = div2.scrollLeft; div1.scrollTop = div2.scrollTop; &#125; //调整iframe窗口大小适应src链接的页面 function func()&#123; $(&apos;iframe&apos;).each(function()&#123; this.style.height = this.contentWindow.document.body.scrollHeight+20 + &apos;px&apos;; //为了显示完整，额外加了20px的宽度 this.style.width = this.contentWindow.document.body.scrollWidth+20 + &apos;px&apos;; &#125;); &#125;&lt;/script&gt;","tags":[{"name":"iframe","slug":"iframe","permalink":"http://dearxiaojie.top/tag/iframe/"},{"name":"scroll","slug":"scroll","permalink":"http://dearxiaojie.top/tag/scroll/"}]},{"title":"高性能JavaScript","date":"2015-05-24T19:12:54.000Z","path":"article/2015-05-24-高性能JavaScript.html","text":"javascript加载和运行脚本位置尽管浏览器已经允许并行下载javascript文件，但是javascript下载过程仍然会阻塞其他资源的下载，如图片。页面仍然需要等待所有javascript代码下载并执行完成才能继续所以优化javascript的首要原则：将脚本放在底部（&lt;/body&gt;之前) 组织脚本每个&lt;script&gt;标签初始下载都会阻塞页面渲染，所以减少页面包含的&lt;script&gt;标签数量有助于改善这一情况。考虑到到HTTP请求会额外带来性能的开销。下载单个100B的文件比下载4个25B的文件更快。所以，减少页面中外链脚本文件的数量会改善性能。 无阻塞的脚本 延迟的脚本：带有defer属性的&lt;script&gt;标签，需要浏览器支持 动态脚本元素:在跨浏览器兼容性和易用的优势，是最通用的无阻塞加载解决方案 XMLHttpRequest注入：先创建一个XHR对象，然后用她下载javascript文件，最后通过创建动态&lt;script&gt;元素将代码注入页面中 var xhr = new XMLHttpRequest();xhr.open(&quot;get&quot;,&quot;file.js&quot;,true);xhr.onreadystatechange = funtion()&#123; if(xhr.readyState == 4)&#123; if(xhr.status&gt;=200&amp;&amp;xhr.status&lt;300||xhr.status==304)&#123; var script = document.creatElement(&quot;script&quot;); script.type=&quot;text/javascript&quot;; script.text=xhr.responseText; document.body.appendChild(script); &#125; &#125; &#125;;xhr.send(null);//由于代码是在&lt;script&gt;标签之前返回的，因此它下载后不会自动执行。//同样的代码在所有主流浏览器中无一例外都能正常工作//局限性在于：javascript文件必须与请求的页面处于相同的域，即javascript不能从CDN下载 无阻塞脚本加载工具lazyLoad类库、LABjs等等 ##管理作用域 作用域链和标识符解析在函数执行的过程中，没遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取或存储数据。该过程搜索运行期上下文的作用域链，查找同名的标识符。搜索过程从作用域链头部开始也就是当前运行函数的活动对象，如果找到了，就使用这个标示符对应的变量；如果没有找到，继续搜索作用域链中的下一个对象，直到标识符被找到，或者没有可用于搜索的对象为止，这种情况下标识符被认为是未定义的。正是这个搜索过程影响了性能。 标识符解析的性能一个标识符所在的位置越深，他的读写速度就越慢，因此读写局部变量总是最快的，而读写全局变量通常是最慢的。全局变量总是存在于运行期上下文作用域链的最末端，因此是最远的。在没有优化javascript引擎的浏览器中，尽量使用局部变量，如果某个跨作用域的值在函数中被引用了多次，就把他存储到局部变量里。 function initUI() &#123; var doc = document, bd = doc.body, links = doc.getElementByTagName(&apos;a&apos;); var i = 0, len = links.length; while (i &lt; len) &#123; update(links[i++]); &#125; doc.getElementById(&apos;btn&apos;).onclick = function() &#123; start(); &#125;; bd.className = &apos;active&apos;&#125; //首先将document对象引用存储到局部变量doc中，全局变量的访问减少，当有很多全局变量 //被反复访问时，这种方法对性能的改善是很明显的。 闭包，作用域和内存将常用的跨作用域变量存储在局部变量中，然后访问局部变量嵌套的对象成员会明显影响性能，尽量少用通常来说，把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善javascript性能，因为局部变量访问速度更快。 DOM function initHtml1()&#123; for(var i = 0;i&lt;15000;i++)&#123; document.getElementById(&apos;here&apos;).innerHTML+=&apos;a&apos;; &#125;&#125;function initHtml2()&#123; var html = &quot;&quot;; for(var i=0;i&lt;15000;i++)&#123; html+=&apos;a&apos;; &#125; document.getElementById(&apos;here&apos;).innerHTML = html;&#125; initHtml1()比initHtml2()速度慢很多，initHtml2()使用局部变量存储更新后的内容，减少了DOM访问，因此，减少DOM访问次数，讲运算尽量留在ECMAScript这端处理。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://dearxiaojie.top/tag/javascript/"},{"name":"性能优化","slug":"性能优化","permalink":"http://dearxiaojie.top/tag/性能优化/"}]}]