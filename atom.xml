<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sincerely Mx]]></title>
  <subtitle><![CDATA[陪伴与懂得，比爱一个人更重要。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dearxiaojie.xyz/"/>
  <updated>2016-04-10T13:40:28.000Z</updated>
  <id>http://dearxiaojie.xyz/</id>
  
  <author>
    <name><![CDATA[Xiao Jie]]></name>
    <email><![CDATA[xiaojie6170@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gulp Connect发送post请求返回405]]></title>
    <link href="http://dearxiaojie.xyz/2016/04/10/Gulp%20Connect%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E405/"/>
    <id>http://dearxiaojie.xyz/2016/04/10/Gulp Connect发送post请求返回405/</id>
    <published>2016-04-10T13:29:57.000Z</published>
    <updated>2016-04-10T13:40:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>在使用<code>gulp</code>过程中，遇到了在使用gulp-connect启动服务的时候，发送ajax请求不能发送post，返回错误:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">405 </span>Method <span class="keyword">Not</span> Allowed</div></pre></td></tr></table></figure>
<h2 id="解决">解决</h2><p>通过自定义一个中间件来完成<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 请求。<br>首先，引入<code>fs</code>、<code>path</code>和<code>connect</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</div><div class="line">path = <span class="built_in">require</span>(<span class="string">'path'</span>),</div><div class="line">connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div></pre></td></tr></table></figure>
<p>接着，在配置中增加自己的中间件。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'server'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        middleware: <span class="function"><span class="keyword">function</span><span class="params">(connect, options)</span></span> &#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            <span class="function"><span class="keyword">function</span><span class="params">(req, res, next)</span></span> &#123;</div><div class="line">                var filepath = path.join(options.root, req.url);</div><div class="line">                <span class="keyword">if</span> (<span class="string">'POSTPUTDELETE'</span>.indexOf(req.method.toUpperCase()) &gt; <span class="number">-1</span></div><div class="line">                    &amp;&amp; fs.existsSync(filepath) &amp;&amp; fs.statSync(filepath).isFile()) &#123;</div><div class="line">                    <span class="keyword">return</span> res.<span class="keyword">end</span>(fs.readFileSync(filepath));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">next</span>();</div><div class="line">               &#125;</div><div class="line">            ];</div><div class="line">        &#125;,</div><div class="line">        hostname: <span class="string">'127.0.0.1'</span>,</div><div class="line">        port: <span class="number">8090</span>,</div><div class="line">        livereload: <span class="keyword">true</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="References">References</h2><p><a href="http://cweili.gitcafe.io/gulp-connect-post-put-delete/" target="_blank" rel="external">让 Gulp Connect 支持 POST、PUT、DELETE 请求</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><p>在使用<code>gulp</code>过程中，遇到了在使用gulp-connect启动服务的时候，发送ajax请求不能发送post，返回错误:</p>
<figure class="highlight basic"><table><t]]>
    </summary>
    
      <category term="gulp" scheme="http://dearxiaojie.xyz/tags/gulp/"/>
    
      <category term="积累" scheme="http://dearxiaojie.xyz/categories/%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我一路向北，离开有你的季节]]></title>
    <link href="http://dearxiaojie.xyz/2016/03/25/%E4%B8%80%E8%B7%AF%E5%90%91%E5%8C%97/"/>
    <id>http://dearxiaojie.xyz/2016/03/25/一路向北/</id>
    <published>2016-03-25T02:51:01.000Z</published>
    <updated>2016-03-25T03:21:02.000Z</updated>
    <content type="html"><![CDATA[<p>　　每隔一段时间，总会矫情一会；每隔一段时间，总会莫名的心情不好、身体不适；每隔一段时间，总会感觉自己是个弱菜。<br>　　那一定是闲了，那一定是锻炼的少了，那一定是该学习了。<br>　　想来去年的这个时候，估计是大学以来学习最积极的时候吧。因为那时候大家都在忙着找实习，经历了几个笔试面试之后又感觉自己弱菜了。所以整天除了吃饭睡觉就是看书刷笔试题之类的，过得还算是充实。实习找好之后就开始各种玩，各种浪。于是到了假期该去公司报道了，实习了半年后回家过年，我不准备总结我的实习经验或者什么，并没有什么好说的。有收获也有失去，只是在那段时间看书看得少了。<br>　　这学期没有出去实习，一是因为需要做毕业设计，可是到现在都还没有怎么动手，二是因为某个人，想多陪陪ta，看看ta，可是却每天待在寝室。还有就是想到毕业后玩的时间就少了，这学期比较轻松，可以约三五好友出去玩玩什么的，可事实上好像除了吃饭就没有出过校门。<br>　　所以，现在我又开始矫情了，开始心情不好了，自己好弱！<br>　　抬头看看已经搁置在桌上很久的书，好像才翻开过几页，当初说好的分分钟看完呢！再看看杂乱无章的桌子，除了零食，手机，电脑，好像也没点啥。咦，我想说啥，难道是饿傻了？哦，到现在还没吃早饭。<br>　　好吧，我只是想随便敲几个文字感慨一下，也不敢给自己定什么计划，写什么todo，随遇而安还是顺其自然。<br>　　每次的晚安都伴随一丝心酸。<br>　　嗯，背景音乐不错。</p>
<p>　　<strong>我一路向北，离开有你的季节；你说你好累，已无法在爱上谁..</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　每隔一段时间，总会矫情一会；每隔一段时间，总会莫名的心情不好、身体不适；每隔一段时间，总会感觉自己是个弱菜。<br>　　那一定是闲了，那一定是锻炼的少了，那一定是该学习了。<br>　　想来去年的这个时候，估计是大学以来学习最积极的时候吧。因为那时候大家都在忙着找实习，经]]>
    </summary>
    
      <category term="随笔" scheme="http://dearxiaojie.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情随笔" scheme="http://dearxiaojie.xyz/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[删除node_modules不成功]]></title>
    <link href="http://dearxiaojie.xyz/2015/11/23/%E5%88%A0%E9%99%A4node-modules%E4%B8%8D%E6%88%90%E5%8A%9F/"/>
    <id>http://dearxiaojie.xyz/2015/11/23/删除node-modules不成功/</id>
    <published>2015-11-23T11:11:31.000Z</published>
    <updated>2016-01-20T04:48:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Question">Question</h2><blockquote>
<p>Windows做Node.js开发的你或许碰到过无法删除node_modules文件夹的情况,如下图：</p>
</blockquote>
<p><img src="http://7xjp74.com1.z0.glb.clouddn.com/failed.png" alt="failed"></p>
<h2 id="Reason">Reason</h2><p>windows 在文件目录的长度有限制，因为node packages 有众多dependencies，每一个dependency又有其他的dependency，这些dependency或许还有其他的dependency，所以导致node_modules有超级复杂的文件目录。比如：</p>
<blockquote>
<p>D:\codetest\node_modules\edpx-mobile\node_modules\edp-webserver\node_modules\babel\node_modules\chokidar\node_modules\anymatch\node_modules</p>
</blockquote>
<h2 id="Solution">Solution</h2><h3 id="install">install</h3><blockquote>
<p>npm install -g rimraf</p>
</blockquote>
<h3 id="delete">delete</h3><blockquote>
<p>rimraf node_modules</p>
</blockquote>
<p><em>亲测有效</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Question">Question</h2><blockquote>
<p>Windows做Node.js开发的你或许碰到过无法删除node_modules文件夹的情况,如下图：</p>
</blockquote>
<p><img src="http://7xj]]>
    </summary>
    
      <category term="nodejs" scheme="http://dearxiaojie.xyz/tags/nodejs/"/>
    
      <category term="积累" scheme="http://dearxiaojie.xyz/categories/%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[remove white space below image]]></title>
    <link href="http://dearxiaojie.xyz/2015/10/20/remove-white-space-below-image/"/>
    <id>http://dearxiaojie.xyz/2015/10/20/remove-white-space-below-image/</id>
    <published>2015-10-20T10:23:18.000Z</published>
    <updated>2016-01-20T04:49:32.000Z</updated>
    <content type="html"><![CDATA[<p>最近遇到过关于<code>&lt;img&gt;</code>标签显示一张图片在一个<code>&lt;div&gt;</code>里面，<code>&lt;div&gt;</code>的宽高由<code>image</code>撑起。可是在图片的底部和<code>&lt;div&gt;</code>底部之间，多出神秘的2~3px的空白。如下图：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/1.JPG" alt="have white space"><br>我知道<code>&lt;img&gt;</code>是个特殊的元素，为什么会出现这种现象？</p>
<h2 id="Reason">Reason</h2><p><code>&lt;img&gt;</code> 元素在默认情况下是inline元素，inline元素默认和父级元素的baseline对齐的，而baseline又和父级底边有一定距离，注意下面两段文字。</p>
<blockquote>
<p>Look at this line of text. Notice there are no letters that breach the baseline</p>
</blockquote>
<p>另一段：</p>
<blockquote>
<p>By just crossing the bridge he probably got away.</p>
</blockquote>
<p>注意比较上面两段文字中字母<code>y,j,p,g</code>,下图更形象的显示<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/jQaJx.png" alt="jQaJx"><br>因为浏览器提供空间低于inline元素来适应字体。这就是上面出现的白边。这不是CSS的padding或margin,所以开发中不容易发现。</p>
<h2 id="Solution">Solution</h2><ul>
<li>给<code>&lt;img&gt;</code>元素设置<code>display:block</code></li>
<li>给<code>&lt;img&gt;</code>元素设置<code>vertical-align:bottom</code>或者<code>vertical-align:top</code></li>
<li>给<code>&lt;img&gt;</code>元素设置<code>font-size:0; vertical-align:middle;</code></li>
<li>给<code>&lt;div&gt;</code>元素设置<code>line-height:0</code></li>
<li>给<code>&lt;div&gt;</code>元素设置<code>font-size:0</code></li>
<li>给<code>&lt;img&gt;</code>元素设置<code>vertical-align:text-bottom</code></li>
</ul>
<p>以上最后一条效果并不好，设置后仍有1px的白边，如下图：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/3.JPG" alt="1px white space"><br>而正常处理后是没有白边的，如下图：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/2.JPG" alt="no white space"></p>
<h2 id="Code_source">Code source</h2><p><a href="http://runjs.cn/code/eozhsutb" target="_blank" rel="external">源码与在线演示</a></p>
<h2 id="References">References</h2><ul>
<li><a href="http://stackoverflow.com/questions/31444891/mystery-white-space-underneath-image-tag/31445364#31445364" target="_blank" rel="external">Mystery white space underneath image tag</a></li>
<li><a href="http://salman-w.blogspot.com/2012/10/remove-space-below-images-and-inline-block-elements.html" target="_blank" rel="external">How to Remove the Space Below Images and Other Inline-Block Elements</a></li>
<li><a href="http://stackoverflow.com/questions/7774814/remove-white-space-below-image" target="_blank" rel="external">Remove white space below image</a></li>
</ul>
<p><em>欢迎补充</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近遇到过关于<code>&lt;img&gt;</code>标签显示一张图片在一个<code>&lt;div&gt;</code>里面，<code>&lt;div&gt;</code>的宽高由<code>image</code>撑起。可是在图片的底部和<code>&lt;]]>
    </summary>
    
      <category term="CSS" scheme="http://dearxiaojie.xyz/tags/CSS/"/>
    
      <category term="前端积累" scheme="http://dearxiaojie.xyz/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS伪元素::after提示用法]]></title>
    <link href="http://dearxiaojie.xyz/2015/09/05/CSS%E4%BC%AA%E5%85%83%E7%B4%A0-after/"/>
    <id>http://dearxiaojie.xyz/2015/09/05/CSS伪元素-after/</id>
    <published>2015-09-05T11:40:37.000Z</published>
    <updated>2016-01-20T04:49:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>CSS伪元素::after用来匹配已选中元素的一个虚拟的最后子元素，通常会配合content属性来为该元素添加装饰内容.这个虚拟元素默认是行内元素</p>
<h2 id="语法">语法</h2><blockquote>
<p><code>element:after  { style properties }</code>  /<em> CSS2 语法 </em>/<br><code>element::after { style properties }</code>  /<em> CSS3 语法 </em>/</p>
</blockquote>
<p><code>::after</code>表示法是在CSS 3中引入的,::符号是用来区分伪类和伪元素的.支持CSS3的浏览器同时也都支持CSS2中引入的表示法<code>:after</code>.</p>
<h2 id="例子">例子</h2><p>用<code>::after</code>伪元素，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/attr" target="_blank" rel="external">attr()</a>CSS表达式和一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="external">自定义数据属性</a> <code>data-descr</code> 创建一个纯CSS, 词汇表提示工具</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段并没有什么用的</div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">'collection of words and punctuation'</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            ，完全是为了凑数才出现的文字，实现一个</div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">'small popups which also hide again'</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            功能，可以吧鼠标放上去</div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">'not to be taken literrlly'</span>&gt;</span>看看<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-attr">[data-descr]</span> &#123;</div><div class="line">       <span class="attribute">position</span>: relative;</div><div class="line">       <span class="attribute">text-decoration</span>: underline;</div><div class="line">       <span class="attribute">color</span>: <span class="number">#00F</span>;</div><div class="line">       <span class="attribute">cursor</span>: help;</div><div class="line">   &#125;</div><div class="line">   <span class="selector-tag">span</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">     <span class="attribute">content</span>: <span class="built_in">attr</span>(data-descr);</div><div class="line">     <span class="attribute">position</span>: absolute;</div><div class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">     <span class="attribute">top</span>: <span class="number">24px</span>;</div><div class="line">     <span class="attribute">min-width</span>: <span class="number">200px</span>;</div><div class="line">     <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#aaaaaa</span> solid;</div><div class="line">     <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">     <span class="attribute">background-color</span>: <span class="number">#ffffcc</span>;</div><div class="line">     <span class="attribute">padding</span>: <span class="number">12px</span>;</div><div class="line">     <span class="attribute">color</span>: <span class="number">#000000</span>;</div><div class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">     <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><a href="http://runjs.cn/code/hkmnji2p" target="_blank" rel="external">在线演示</a></p>
<h2 id="效果图">效果图</h2><p><img src="http://7xjp74.com1.z0.glb.clouddn.com/css%20after.png" alt="css-after"></p>
<h2 id="浏览器兼容性">浏览器兼容性</h2><p><img src="http://7xjp74.com1.z0.glb.clouddn.com/table.png" alt="兼容性"></p>
<h2 id="References">References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter" target="_blank" rel="external">::after (:after)</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概述">概述</h2><p>CSS伪元素::after用来匹配已选中元素的一个虚拟的最后子元素，通常会配合content属性来为该元素添加装饰内容.这个虚拟元素默认是行内元素</p>
<h2 id="语法">语法</h2><blockquote>
<p><code]]>
    </summary>
    
      <category term="CSS" scheme="http://dearxiaojie.xyz/tags/CSS/"/>
    
      <category term="前端积累" scheme="http://dearxiaojie.xyz/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图解Javascript上下文与作用域]]></title>
    <link href="http://dearxiaojie.xyz/2015/08/04/%E5%9B%BE%E8%A7%A3Javascript%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://dearxiaojie.xyz/2015/08/04/图解Javascript上下文与作用域/</id>
    <published>2015-08-04T06:54:54.000Z</published>
    <updated>2016-01-20T04:48:40.000Z</updated>
    <content type="html"><![CDATA[<p>本文尝试阐述Javascript中的上下文与作用域背后的机制，主要涉及到执行上下文（<code>execution context</code>）、作用域链（<code>scope chain</code>）、闭包（<code>closure</code>）、<code>this</code>等概念。</p>
<h2 id="Execution_context">Execution context</h2><p>执行上下文（简称上下文）决定了Js执行过程中可以获取哪些变量、函数、数据，一段程序可能被分割成许多不同的上下文，每一个上下文都会绑定一个变量对象（<code>variable object</code>），它就像一个容器，用来存储当前上下文中所有已定义或可获取的变量、函数等。位于最顶端或最外层的上下文称为全局上下文（<code>global context</code>），全局上下文取决于执行环境，如Node中的<code>global</code>和Browser中的<code>window</code>：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/zhuanzai1.jpg" alt=""><br>需要注意的是，上下文与作用域（<code>scope</code>）是不同的概念。Js本身是单线程的，每当有<code>function</code>被执行时，就会产生一个新的上下文，这一上下文会被压入Js的上下文堆栈（<code>context stack</code>）中，<code>function</code>执行结束后则被弹出，因此Js解释器总是在栈顶上下文中执行。在生成新的上下文时，首先会绑定该上下文的变量对象，其中包括<code>arguments</code>和该函数中定义的变量；之后会创建属于该上下文的作用域链（<code>scope chain</code>），最后将<code>this</code>赋予这一<code>function</code>所属的<code>Object</code>，这一过程可以通过下图表示：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/zhuanzai2.jpg" alt=""></p>
<h2 id="this">this</h2><p>上文提到<code>this</code>被赋予<code>function</code>所属的<code>Object</code>，具体来说，当<code>function</code>是定义在<code>global</code>对中时，<code>this</code>指向<code>global</code>；当<code>function</code>作为<code>Object</code>的方法时，<code>this</code>指向该<code>Object</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;  </div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">&#125;</div><div class="line">f();  <span class="comment">// -&gt; 1</span></div><div class="line"><span class="keyword">var</span> ff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">&#125;</div><div class="line">ff(); <span class="comment">// -&gt; 2  </span></div><div class="line">x     <span class="comment">// -&gt; 2</span></div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="string">"o's x"</span>, <span class="attr">f</span>: f&#125;;  </div><div class="line">o.f(); <span class="comment">// "o's x"</span></div></pre></td></tr></table></figure>
<h2 id="Scope_chain">Scope chain</h2><p>上文提到，在<code>function</code>被执行时生成新的上下文时会先绑定当前上下文的变量对象，再创建作用域链。我们知道<code>function</code>的定义是可以嵌套在其他<code>function</code>所创建的上下文中，也可以并列地定义在同一个上下文中（如<code>global</code>）。作用域链实际上就是自下而上地将所有嵌套定义的上下文所绑定的变量对象串接到一起，使嵌套的<code>function</code>可以“继承”上层上下文的变量，而并列的<code>function</code>之间互不干扰：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/zhuanzai3.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="string">'global'</span>;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> x = <span class="string">"a's x"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="string">"b's y"</span>;</div><div class="line">        <span class="built_in">console</span>.log(x);</div><div class="line">    &#125;;</div><div class="line">    b();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> x = <span class="string">"c's x"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(y);</div><div class="line">    &#125;;</div><div class="line">    d();</div><div class="line">&#125;</div><div class="line">a();  <span class="comment">// -&gt; "a's x"  </span></div><div class="line">c();  <span class="comment">// -&gt; ReferenceError: y is not defined  </span></div><div class="line">x     <span class="comment">// -&gt; "global"  </span></div><div class="line">y     <span class="comment">// -&gt; ReferenceError: y is not defined</span></div></pre></td></tr></table></figure>
<h2 id="Closure">Closure</h2><p>如果理解了上文中提到的上下文与作用域链的机制，再来看闭包的概念就很清楚了。每个<code>function</code>在调用时会创建新的上下文及作用域链，而作用域链就是将外层（上层）上下文所绑定的变量对象逐一串连起来，使当前<code>function</code>可以获取外层上下文的变量、数据等。如果我们在<code>function</code>中定义新的<code>function</code>，同时将内层<code>function</code>作为值返回，那么内层<code>function</code>所包含的作用域链将会一起返回，即使内层<code>function</code>在其他上下文中执行，其内部的作用域链仍然保持着原有的数据，而当前的上下文可能无法获取原先外层<code>function</code>中的数据，使得<code>function</code>内部的作用域链被保护起来，从而形成“闭包”。看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">100</span>;  </div><div class="line"><span class="keyword">var</span> inc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(x++);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> inc1 = inc();  </div><div class="line"><span class="keyword">var</span> inc2 = inc();</div><div class="line">inc1();  <span class="comment">// -&gt; 0  </span></div><div class="line">inc1();  <span class="comment">// -&gt; 1  </span></div><div class="line">inc2();  <span class="comment">// -&gt; 0  </span></div><div class="line">inc1();  <span class="comment">// -&gt; 2  </span></div><div class="line">inc2();  <span class="comment">// -&gt; 1  </span></div><div class="line">x;       <span class="comment">// -&gt; 100</span></div></pre></td></tr></table></figure>
<p>执行过程如下图所示，<code>inc</code>内部返回的匿名<code>function</code>在创建时生成的作用域链包括了<code>inc</code>中的<code>x</code>，即使后来赋值给<code>inc1</code>和<code>inc2</code>之后，直接在<code>global context</code>下调用，它们的作用域链仍然是由定义中所处的上下文环境决定，而且由于<code>x</code>是在<code>function inc</code>中定义的，无法被外层的<code>global context</code>所改变，从而实现了闭包的效果：<br><img src="http://7xjp74.com1.z0.glb.clouddn.com/zhuanzai4.jpg" alt=""></p>
<h2 id="this_in_closure">this in closure</h2><p>我们已经反复提到执行上下文和作用域实际上是通过<code>function</code>创建、分割的，而<code>function</code>中的<code>this</code>与作用域链不同，它是由执行该<code>function</code>时当前所处的<code>Object</code>环境所决定的，这也是<code>this</code>最容易被混淆用错的一点。一般情况下的例子如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;  </div><div class="line"><span class="keyword">var</span> o = &#123;  </div><div class="line">    name: <span class="string">"o"</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">o.getName();  <span class="comment">// -&gt; "o"</span></div></pre></td></tr></table></figure>
<p>由于执行<code>o.getName()</code>时<code>getName</code>所绑定的<code>this</code>是调用它的<code>o</code>，所以此时<code>this == o</code>；更容易搞混的是在<code>closure</code>条件下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;  </div><div class="line"><span class="keyword">var</span> oo = &#123;  </div><div class="line">    name: <span class="string">"oo"</span>,</div><div class="line">    getNameFunc: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">oo.getNameFunc()();  <span class="comment">// -&gt; "global"</span></div></pre></td></tr></table></figure>
<p>此时闭包函数被<code>return</code>后调用相当于：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getName</span> = oo.getNameFunc()<span class="comment">;  </span></div><div class="line">getName()<span class="comment">;  // -&gt; "global"</span></div></pre></td></tr></table></figure>
<p>换一个更明显的例子：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var ooo = &#123;  </div><div class="line">    <span class="keyword">name</span>: <span class="string">"ooo"</span>,</div><div class="line">    getName: oo.getNameFunc() <span class="comment">// 此时闭包函数的this被绑定到新的Object</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="title">ooo</span>.getName();  // -&gt;</span> <span class="string">"ooo"</span></div></pre></td></tr></table></figure>
<p>当然，有时候为了避免闭包中的<code>this</code>在执行时被替换，可以采取下面的方法：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;  </div><div class="line"><span class="keyword">var</span> oooo = &#123;  </div><div class="line">    name: <span class="string">"ox4"</span>,</div><div class="line">    getNameFunc: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">self</span> = this;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">oooo.getNameFunc()(); <span class="comment">// -&gt; "ox4"</span></div></pre></td></tr></table></figure>
<p>或者是在调用时强行定义执行的<code>Object</code>：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;  </div><div class="line"><span class="keyword">var</span> oo = &#123;  </div><div class="line">    name: <span class="string">"oo"</span>,</div><div class="line">    getNameFunc: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">oo.getNameFunc()();  <span class="comment">// -&gt; "global"  </span></div><div class="line">oo.getNameFunc().bind(oo)(); <span class="comment">// -&gt; "oo"</span></div></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>Js是一门很有趣的语言，由于它的很多特性是针对HTML中DOM的操作，因而显得随意而略失严谨，但随着前端的不断繁荣发展和Node的兴起，Js已经不再是”toy language”或是jQuery时代的”CSS扩展”，本文提到的这些概念无论是对新手还是从传统Web开发中过度过来的Js开发人员来说，都很容易被混淆或误解，希望本文可以有所帮助。</p>
<p>写这篇总结的原因是我在Github上分享的<a href="https://github.com/coodict/javascript-in-one-pic" target="_blank" rel="external">Learn javascript in one picture</a>，刚开始有人质疑这只能算是一张语法表（syntax cheat sheet），根本不会涉及更深层的闭包、作用域等内容，但是出乎意料的是这个项目竟然获得3000多个star，所以不能虎头蛇尾，以上。</p>
<h2 id="References">References</h2><ul>
<li><a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/" target="_blank" rel="external">Understanding Scope and Context in JavaScript</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this - JavaScript | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">闭包 - JavaScript | MDN</a></li>
</ul>
<p><em><a href="http://blog.rainy.im/2015/07/04/scope-chain-and-prototype-chain-in-js/" target="_blank" rel="external">原文猛戳</a></em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文尝试阐述Javascript中的上下文与作用域背后的机制，主要涉及到执行上下文（<code>execution context</code>）、作用域链（<code>scope chain</code>）、闭包（<code>closure</code>）、<code>t]]>
    </summary>
    
      <category term="javascript" scheme="http://dearxiaojie.xyz/tags/javascript/"/>
    
      <category term="概念理解" scheme="http://dearxiaojie.xyz/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
      <category term="转载" scheme="http://dearxiaojie.xyz/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript性能优化小知识]]></title>
    <link href="http://dearxiaojie.xyz/2015/07/27/javascript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://dearxiaojie.xyz/2015/07/27/javascript性能优化小知识/</id>
    <published>2015-07-27T02:22:26.000Z</published>
    <updated>2016-01-20T04:49:22.000Z</updated>
    <content type="html"><![CDATA[<p>前面有一篇也是关于<code>javascript</code>性能方面的文章，是看了<a href="http://book.douban.com/subject/5362856/" target="_blank" rel="external">《高性能javascript》</a>后的笔记，这是一篇自己在项目和学习过程中的积累，部分参考了一些学习博客。对面试和代码的编写都有帮助。</p>
<h3 id="避免全局查找">避免全局查找</h3><p>在一个函数中会用到全局对象存储为局部变量来减少全局查找，因为访问局部变量的速度要比访问全局变量的速度更快些。</p>
<h3 id="字符串的连接">字符串的连接</h3><p>如果要连接多个字符串，应该少使用+=，如<br>s+=a;<br>s+=b;<br>s+=c;<br>应该写成s+=a + b + c；<br>而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用<code>JavaScript</code>数组来收集，最后使用<code>join</code>方法连接起来。</p>
<h3 id="数字转换成字符串">数字转换成字符串</h3><p><code>(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</code><br>字符串如’1322’转换成数字的时候可以在前面加’+’,如<code>var str = &#39;123&#39;;var num = +str</code>,那么<code>typeof num</code>为<code>number</code></p>
<h3 id="浮点数转换成整型">浮点数转换成整型</h3><p>很多人喜欢使用<code>parseInt()</code>，其实<code>parseInt()</code>是用于将字符串转换成数字，而不是浮点数和整型之间的转换，我们应该使用<code>Math.floor()</code>或者<code>Math.round()</code>。</p>
<h3 id="使用DocumentFragment优化多次append">使用DocumentFragment优化多次append</h3><p>一旦需要更新DOM,请考虑使用文档碎片来构建DOM结构，然后再将其添加到现存的文档中。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">          <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">          el.innerHTML = i;</div><div class="line">          <span class="built_in">document</span>.body.appendChild(el);</div><div class="line">      &#125;       </div><div class="line">       <span class="comment">//可以替换为：</span></div><div class="line">      <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;  </div><div class="line">              <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">          	el.innerHTML = i;</div><div class="line">          	frag.appendChild(el);</div><div class="line">      	&#125;</div><div class="line">      <span class="built_in">document</span>.body.appendChild(frag);</div></pre></td></tr></table></figure>
<h3 id="使用一次innerHTML赋值代替构建dom元素">使用一次innerHTML赋值代替构建dom元素</h3><p>对于大的DOM更改，使用<code>innerHTML</code>要比使用标准的DOM方法创建同样的DOM结构快得多。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">         <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">         el.innerHTML = i;</div><div class="line">         frag.appendChild(el);</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">document</span>.body.appendChild(frag);</div><div class="line">         <span class="comment">//可以替换为：</span></div><div class="line">     <span class="keyword">var</span> html = [];</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">         html.push(<span class="string">'&lt;p&gt;'</span> + i + <span class="string">'&lt;/p&gt;'</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">document</span>.body.innerHTML = html.join(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<h3 id="使用事件代理">使用事件代理</h3><p>任何可以冒泡的事件都不仅仅可以在事件目标上进行处理，目标的任何祖先节点上也能处理，使用这个知识就可以将事件处理程序附加到更高的地方负责多个目标的事件处理，同样，对于内容动态增加并且子节点都需要相同的事件处理函数的情况，可以把事件注册提到父节点上，这样就不需要为每个子节点注册事件监听了。另外，现有的js库都采用<code>observe</code>方式来创建事件监听,其实现上隔离了DOM对象和事件处理函数之间的循环引用,所以应该尽量采用这种方式来创建事件监听</p>
<h3 id="缩短否定检测">缩短否定检测</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (oTest != <span class="string">'#ff0000'</span>) &#123; </div><div class="line">    <span class="regexp">//</span><span class="keyword">do</span> something </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (oTest != null) &#123; </div><div class="line">    <span class="regexp">//</span><span class="keyword">do</span> something </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (oTest != false) &#123;</div><div class="line">    <span class="regexp">//</span><span class="keyword">do</span> something</div><div class="line">&#125;</div><div class="line">    <span class="regexp">//</span>虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：</div><div class="line"><span class="keyword">if</span> (!oTest) &#123;</div><div class="line">    <span class="regexp">//</span><span class="keyword">do</span> something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="条件分支">条件分支</h3><p>将条件分支，按可能性顺序从高到低排列：可以减少解释器对条件的探测次数<br>在同一条件子的多（&gt;2）条件分支时，使用<code>switch</code>优于<code>if</code>：<code>switch</code>分支选择的效率高于if，在IE下尤为明显。4分支的测试，IE下<code>switch</code>的执行时间约为if的一半。<br>使用三目运算符替代条件分支</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">           <span class="built_in">num</span> = a;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="built_in">num</span> = b;</div><div class="line">       &#125;        <span class="comment">//可以替换为：</span></div><div class="line">       <span class="built_in">num</span> = a &gt; b ? a : b;</div></pre></td></tr></table></figure>
<p><em>续。。。</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面有一篇也是关于<code>javascript</code>性能方面的文章，是看了<a href="http://book.douban.com/subject/5362856/" target="_blank" rel="external">《高性能javascrip]]>
    </summary>
    
      <category term="javascript" scheme="http://dearxiaojie.xyz/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://dearxiaojie.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="学习笔记" scheme="http://dearxiaojie.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery常用方法归纳]]></title>
    <link href="http://dearxiaojie.xyz/2015/06/27/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://dearxiaojie.xyz/2015/06/27/jQuery常用方法归纳总结/</id>
    <published>2015-06-26T17:16:35.000Z</published>
    <updated>2016-01-20T04:49:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="$-grep()">$.grep()</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.grep( array, <span class="function"><span class="keyword">function</span><span class="params">(elementOfArray, indexInArray)</span> <span class="params">[, invert ]</span> )</span></div></pre></td></tr></table></figure>
<p>功能：查找满足过滤函数的数组元素：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery1.42.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">23</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">8</span>,<span class="number">100</span>,<span class="number">-2</span>];</div><div class="line">            <span class="keyword">var</span> arrGrep = $.grep(arr, <span class="function"><span class="keyword">function</span> (<span class="params">element,index</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> (index&lt;<span class="number">5</span>)&amp;&amp;(element != <span class="number">4</span>);<span class="comment">//整体返回一个数组</span></div><div class="line">            &#125;)</div><div class="line">            alert(arrGrep);<span class="comment">//23,45,5,1</span></div><div class="line">        &#125;)</div><div class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="$-map()">$.map()</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.<span class="built_in">map</span>( <span class="built_in">array</span>, callback(elementOfArray, indexInArray) )</div></pre></td></tr></table></figure>
<p>功能：将一个数组中的所有元素转换到另一个数组中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery1.42.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">8</span>,<span class="number">100</span>,<span class="number">-2</span>];</div><div class="line">        <span class="keyword">var</span> arrMap = $.map(arr, <span class="function"><span class="keyword">function</span> (<span class="params">element,index</span>) </span>&#123;</div><div class="line">            <span class="comment">//  return (index&lt;3)&amp;&amp;(element != 4);这里按布尔值返回</span></div><div class="line">            <span class="keyword">if</span>(index&lt;<span class="number">3</span> &amp;&amp; element&lt; <span class="number">4</span>)&#123;</div><div class="line">                <span class="keyword">return</span> element;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        alert(arrMap);<span class="comment">//1</span></div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="mouseover()/mouserout()">mouseover()/mouserout()</h1><p>当鼠标进入/离开某个元素或它的后代元素时触发<code>mouseover/mouseout</code>事件。<br><code>mouseover</code>事件大多数时候会与 <code>mouseout</code> 事件一起使用。</p>
<p><code>mouseover/mouserout</code>事件由于冒泡机制，经常在不需要的时候不小心触发，从而导致一些脚本问题。</p>
<h1 id="mouseenter()/mouseleave()">mouseenter()/mouseleave()</h1><p>mouseenter/mouseleave当且仅当鼠标进入被选元素时才触发，当鼠标穿过任何子元素时不会触发。它不关心目标元素是否有子元素。</p>
<h1 id="focusin()和focusout()">focusin()和focusout()</h1><p><code>.focusin()</code>：一个元素或它的子元素得到焦点时触发此事件<br><code>.focusout()</code>：一个元素或它的子元素失去焦点时触发此事件</p>
<p>与 <code>focus()</code> 方法不同的是，<code>focusin()</code> 方法在任意子元素获得焦点时也会触发。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>focusin fire<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>focusin fire<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $( <span class="string">"p"</span> ).focusin(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $( <span class="keyword">this</span> ).find( <span class="string">"span"</span> ).css( <span class="string">"display"</span>, <span class="string">"inline"</span> ).fadeOut( <span class="number">1000</span> );</div><div class="line">    &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="eq()和get()">eq()和get()</h1><p><code>.get()</code>： 通过jQuery对象获取一个对应的DOM元素。<br><code>.eq()</code>：从集合的一个元素中构造新的jQuery对象</p>
<p><code>eq</code>返回的是一个jQuery对象，<code>get</code>返回的是一个DOM对象。举个例子：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>( <span class="string">"li"</span> ).get( <span class="number">0</span> ).css(<span class="string">"color"</span>, <span class="string">"red"</span>); <span class="comment">//错误</span></div><div class="line"><span class="symbol">$</span>( <span class="string">"li"</span> ).<span class="keyword">eq</span>( <span class="number">0</span> ).css(<span class="string">"color"</span>, <span class="string">"red"</span>); <span class="comment">//正确</span></div></pre></td></tr></table></figure>
<p>那么，什么是DOM对象，什么又是jQuery对象呢？</p>
<p>DOM对象就是用js获得的对象，而juqery对象是用jQuery类库的选择器获得的对象。</p>
<p>如：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$obj</span> = <span class="variable">$(</span><span class="string">"div"</span>);<span class="regexp">//j</span>Query对象</div></pre></td></tr></table></figure></p>
<p><code>get</code>方法本质上是把jQuery对象转换成DOM对象，但是css属于jQuery构造器的，DOM是不存在这个方法的，如果需要用jQuery的方法，我们必须这样写：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">li</span> = $(<span class="string">"li"</span>).<span class="built_in">get</span>(0);</div><div class="line">$(<span class="keyword">li</span>).css(<span class="string">"color"</span>,<span class="string">"black"</span>);<span class="comment">//用$包装</span></div><div class="line">filter()</div></pre></td></tr></table></figure></p>
<p><code>filter()</code>方法:筛选出与指定表达式匹配的元素集合。<br>这个方法用于缩小匹配的范围。用逗号分隔多个表达式。</p>
<p><code>filter(expression)</code>：（字符串|函数）如果参数是字符串，则制定jQuery选择器，用于从包装集里删除所有与选择器不匹配的元素，最后留下与选择器匹配的元素；如果参数是函数，则用于确定筛选条件。为包装集里的每一个元素各调用一次该函数，函数调用返回值为false的任何元素都会从包装集里删除。</p>
<p>以下代码意为：保留第一个以及带有select类的元素</p>
<p>HTML 代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span>And Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).<span class="keyword">filter</span>(<span class="string">".selected, :first"</span>);</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span>And Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>再看一个function的例子，一个函数用来作为测试元素的集合。它接受一个参数index，这是元素在jQuery集合的索引。在函数， <code>this</code>指的是当前的DOM元素。</p>
<p>HTML 代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>jQuery 代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $(<span class="string">"ol"</span>, <span class="keyword">this</span>).length == <span class="number">0</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="-bind()、-live()和-delegate()方法">.bind()、.live()和.delegate()方法</h1><p><code>.bind()</code>：绑定事件处理函数的最基本方式是使用<code>.bind()</code>方法。它和<code>live()</code>方法一样，接受两个参数：</p>
<p><code>.bind(event type, event handler)</code><br>两种绑定事件处理函数的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'.mydiv'</span>).bind(<span class="string">'click'</span>,test);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"￼Hello World!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>事件处理函数也可以使用匿名函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#mydiv"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"￼Hello World!"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>.live()</code>：<code>live</code>方法和<code>bind</code>方法的唯一区别在于<code>.live()</code>不仅作用于DOM中当前存在的元素，还作用于将来可能存在（动态生成）的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="string">'.box'</span>).live(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).clone().appendTo(<span class="string">'.container'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用<code>live</code>方法绑定事件的缺点在于它无法使用链式调用，那有没有既可以像<code>live</code>方法那样绑定事件，又可以支持链式调用的方法呢？答案就是下面的<code>delegate</code>方法。</p>
<p><code>delegate()</code>方法：为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，<br>并规定当这些事件发生时运行的函数。从jQuery 1.7开始，<code>.delegate()</code>已经被<code>.on()</code>方法取代。<br>语法：</p>
<p> <code>$(selector).delegate(childSelector,event type,function)</code><br>参数说明：</p>
<p><code>childSelector</code> 必需。规定要附加事件处理程序的一个或多个子元素。</p>
<p><code>event</code> 必需。规定附加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。</p>
<p><code>function</code> 必需。规定当事件发生时运行的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'.container'</span>).delegate(<span class="string">'.box'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).clone().appendTo(<span class="string">'.container'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>delegate()</code>会在以下两个情况下使用到：</p>
<p>1、如果你有一个父元素，需要给其下的子元素添加事件，这时你可以使用<code>delegate()</code>了，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).delegate(<span class="string">"li"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).hide();</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>2、当元素在当前页面中不可用时，可以使用<code>delegate()</code></p>
<p><code>end()</code>方法</p>
<p> <code>end()</code>方法：在jquery命令链内调用，以便退回到前一个包装集。<br>每次过滤方法都会被压入栈中。当我们需要返回到前一个状态时，我们可以使用<code>end()</code> 进行出栈操作，来返回栈中的前一个状态。</p>
<p><code>end()</code> 方法结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">'ul.one'</span>).find(<span class="string">".two"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).find(<span class="string">'.three'</span>).css(<span class="string">"background"</span>,<span class="string">"blue"</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在上面的代码例子中，我们只会看到item 1的字体颜色改变了，而背景颜色没有改变。这是因为<br>第二个<code>find()</code>方法之前的状态返回的是红色字体的<code>class</code>值为<code>two</code>的对象，因此，第二次<code>find()</code>只会查找<code>&lt;ul class=&quot;one&quot;&gt;</code> 中的<code>.two</code>，使用<code>end()</code>方法修改该链式操作的代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'ul.one'</span>).find(<span class="string">".two"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).end().find(<span class="string">'.three'</span>).css(<span class="string">"background"</span>,<span class="string">"blue"</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>end()</code>方法在这里是 返回调用 <code>find()</code> 之前的状态，也就是<code>$(&#39;ul.one&#39;)</code></p>
<h1 id="toggleClass()">toggleClass()</h1><p><code>toggleClass()</code>方法：如果在元素中指定类名称不存在，则添加指定类名称；如果元素已经拥有指定类名称，则从元素中删除指定类名称。<br><code>css(name,value)</code>方法：设定指定的值到每个已匹配元素的指定的css样式属性</p>
<h1 id="wrap()和wrapInner()">wrap()和wrapInner()</h1><p><code>wrap()和wrapInner()</code>：前者把所有匹配的元素用其他元素的结构化标记包裹起来；<br>后者将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来。<br>看下面一个<code>wrap()</code>的例子：<br>用原先div的内容作为新div的class，并将每一个元素包裹起来</p>
<p>HTML 代码:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Goodbye&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.inner'</span>).wrap(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;div class="'</span> + $(<span class="keyword">this</span>).text() + <span class="string">'" /&gt;'</span>;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Hello"</span>&gt;</div><div class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Goodbye"</span>&gt;</div><div class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Goodbye&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>接着再看下面一个<code>wrapInner()</code>的例子:</p>
<p>用原先div的内容作为新div的class，并将每一个元素包裹起来</p>
<p>HTML 代码:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;Goodbye&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.inner'</span>).wrapInner(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;div class="'</span> + $(<span class="keyword">this</span>).text() + <span class="string">'" /&gt;'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;</div><div class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Hello"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;</div><div class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Goodbye"</span>&gt;Goodbye&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<h1 id="detach、empty和remove方法">detach、empty和remove方法</h1><p><code>.detach( [selector ] )</code>：从DOM中去掉所有匹配的元素。当需要移走一个元素，不久又将该元素插入DOM时，就需要用到detach方法。</p>
<p><code>.empty()</code>：这个方法不仅移除子元素（和其他后代元素），同样移除元素里的文本。因为，根据说明，元素里任何文本字符串都被看做是该元素的子节点。</p>
<p><code>.remove( [selector ] )</code>：将元素从DOM中移除，同时移除元素上的事件及 jQuery 数据</p>
<p><code>empty()</code>的例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">".two"</span>).empty();<span class="comment">//item 1 文本节点被移除，li的小圆点还在，证明li没有被移除</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>看下面一个<code>remove()</code>例子：</p>
<p>描述：从DOM中把所有段落删除</p>
<p>HTML 代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span> how are <span class="tag">&lt;<span class="name">p</span>&gt;</span>you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).<span class="built_in">remove</span>();</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">how are</span></div></pre></td></tr></table></figure></p>
<h1 id="val()方法">val()方法</h1><p><code>val()</code>：获得匹配元素的当前值。<br>描述:获取文本框中的值</p>
<p>jQuery 代码:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"input"</span>).val();</div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"input"</span>).val(<span class="string">"hello world!"</span>);</div></pre></td></tr></table></figure></p>
<h1 id="each()和map()">each()和map()</h1><p><code>each()</code>和<code>map()</code>方法：<code>each</code>返回的是原来的数组，并不会新创建一个数组。而map方法会返回一个<br>新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。</p>
<h2 id="each方法：">each方法：</h2><p>定义一个空数组，通过each方法，往数组添加ID值；最后将数组转换成字符串后，alert这个值；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    $(<span class="string">":checkbox"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        arr.push(<span class="keyword">this</span>.id);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> str = arr.join(<span class="string">","</span>);</div><div class="line">    alert(str);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="map方法:">map方法:</h2><p>将每个<code>:checkbox</code>执行<code>return this.id</code>；并将这些返回值，自动的保存为jQuery对象，然后用get方法将其转换成原生Javascript数组，再使用join方法转换成字符串，最后alert这个值；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = $(<span class="string">":checkbox"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;).get().join();    </div><div class="line">    alert(str);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当有需一个数组的值的时候，用map方法，很方便。</p>
<h2 id="$-each()">$.each()</h2><p>jQuery的<code>$(selector).each()</code>函数可以遍历循环选中的子元素，而jQuery的$.each()函数则可以遍历任何集合，包括对象和数组，它接收要遍历的集合以及一个回调函数，回调函数每次传递一个数组的下标和这个下标所对应的数组的值。</p>
<p><code>$.each(array,callback);</code></p>
<p><code>$.each(object,callback);</code></p>
<h2 id="数组实例">数组实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.each( [ <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span> ], <span class="function"><span class="keyword">function</span>(<span class="params"> i, l </span>)</span>&#123;</div><div class="line">    alert( <span class="string">"index #"</span> + i + <span class="string">": "</span> + l );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>callback</code>(索引,索引值)<br>DEMO：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">index</span> <span class="number">0</span>: one</div><div class="line"><span class="keyword">index</span> <span class="number">1</span>: two;</div><div class="line"><span class="keyword">index</span> <span class="number">2</span>: three</div></pre></td></tr></table></figure></p>
<h2 id="对象实例">对象实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.each(&#123; <span class="attr">name</span>: <span class="string">"trigkit4"</span>, <span class="attr">lang</span>: <span class="string">"JS"</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> k, v </span>) </span>&#123;</div><div class="line">    alert( <span class="string">"Key: "</span> + k + <span class="string">", Value: "</span> + v );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>callback</code>(键,值)</p>
<p>Demo:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">Key:</span> name, <span class="string">Value:</span> trigkit4</div><div class="line"><span class="string">Key:</span> lang, <span class="string">Value:</span> JS</div></pre></td></tr></table></figure></p>
<h1 id="-trigger()">.trigger()</h1><p>描述: 根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为。</p>
<p>当相应的事件发生时，任何通过.on()、.bind()或一个快捷方法绑定的事件处理程序将被触发。但是，它们可以用.trigger()方法手动触发<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="built_in">document</span>).bind(<span class="string">'abc'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="built_in">document</span>).trigger(<span class="string">'abc'</span>);</div><div class="line"><span class="comment">//Output  'hello';</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="-attr()和-prop()">.attr()和.prop()</h1><p><code>.attr()</code>：获取匹配的元素集合中的第一个元素的属性的值 或 设置每一个匹配元素的一个或多个属性。</p>
<p><code>.prop()</code>：同上<br>jQuery 1.6之前 ，<code>.attr()</code>方法在取某些 <code>attribute</code> 的值时，会返回 <code>property</code> 的值，这就导致了结果的不一致。从 jQuery 1.6 开始， <code>.prop()</code>方法 方法返回 <code>property</code> 的值,而 <code>.attr()</code> 方法返回 <code>attributes</code> 的值。</p>
<p>例如, <code>selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked</code>, 和 <code>defaultSelected</code> 应使用<code>.prop()</code>方法进行取值或赋值。</p>
<p>他们没有相应的属性（<code>attributes</code>），只有特性(<code>property</code>)。</p>
<h1 id="-after()和-insertAfter()">.after()和.insertAfter()</h1><h2 id="-after()">.after()</h2><p>描述:<br>在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。</p>
<p>HTML 代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I would like to say: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).after( <span class="variable">$(</span><span class="string">"b"</span>) );</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like to say: <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="insertAfter()">insertAfter()</h2><p>描述:<br>把所有段落插入到一个元素之后。与 $(“#foo”).after(“p”)相同</p>
<p>HTML 代码:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like <span class="keyword">to</span> <span class="built_in">say</span>: &lt;/p&gt;&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"foo"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>jQuery 代码:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).insertAfter(<span class="string">"#foo"</span>);</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"foo"</span>&gt;Hello&lt;/<span class="keyword">div</span>&gt;&lt;p&gt;I would like <span class="keyword">to</span> <span class="built_in">say</span>: &lt;/p&gt;</div></pre></td></tr></table></figure>
<h1 id="-before()和-insertBefore()">.before()和.insertBefore()</h1><h2 id="before()">before()</h2><p>描述:<br>在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。</p>
<p>HTML 代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like to say: <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>jQuery 代码:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).before( <span class="variable">$(</span><span class="string">"b"</span>) );</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I would like to say: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="-append()和-appendTo()">.append()和.appendTo()</h1><h2 id="append()">append()</h2><p>描述：向所有段落中追加一些HTML标记。</p>
<p>HTML 代码:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like <span class="keyword">to</span> <span class="built_in">say</span>: &lt;/p&gt;</div></pre></td></tr></table></figure>
<p>jQuery 代码:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).append(<span class="string">"&lt;b&gt;Hello&lt;/b&gt;"</span>);</div></pre></td></tr></table></figure>
<p>结果:</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like to say: <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="appendTo()">appendTo()</h2><p>描述：新建段落追加div中并加上一个class</p>
<p>HTML 代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>jQuery 代码:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"&lt;p/&gt;"</span>)</div><div class="line"><span class="meta">    .appendTo</span>(<span class="string">"div"</span>)</div><div class="line"><span class="meta">    .addClass</span>(<span class="string">"test"</span>)</div><div class="line"><span class="meta">    .end</span>()</div><div class="line"><span class="meta">    .addClass</span>(<span class="string">"test2"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h1 id="-prepend()和-prependTo()">.prepend()和.prependTo()</h1><h2 id="prepend()">prepend()</h2><p>描述：向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。</p>
<p>HTML 代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like to say: <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>jQuery 代码:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).prepend( <span class="variable">$(</span><span class="string">"b"</span>) );</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>I would like to say: <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="prependTo()">prependTo()</h2><p>描述：把所有段落追加到ID值为foo的元素中。</p>
<p>HTML 代码:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I would like <span class="keyword">to</span> <span class="built_in">say</span>: &lt;/p&gt;&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"foo"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>jQuery 代码:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"p"</span>).prependTo(<span class="string">"#foo"</span>);</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"foo"</span>&gt;&lt;p&gt;I would like <span class="keyword">to</span> <span class="built_in">say</span>: &lt;/p&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. <span class="selector-class">.insertAfter</span>()和<span class="selector-class">.after</span>()：在现存元素的外部，从后面插入元素  </div><div class="line">2. <span class="selector-class">.insertBefore</span>()和<span class="selector-class">.before</span>()：在现存元素的外部，从前面插入元素  </div><div class="line">3. <span class="selector-class">.appendTo</span>()和<span class="selector-class">.append</span>()：在现存元素的内部，从后面插入元素  </div><div class="line">4. <span class="selector-class">.prependTo</span>()和<span class="selector-class">.prepend</span>()  ：在现存元素的内部，从前面插入元素</div></pre></td></tr></table></figure>
<h1 id="-data(_key,_value_)">.data( key, value )</h1><p><code>.data()</code>方法允许我们在DOM元素上绑定任意类型的数据,</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).data(<span class="string">"test"</span>, &#123; <span class="keyword">first</span>: <span class="number">16</span>, <span class="keyword">last</span>: <span class="string">"pizza!"</span> &#125;);</div></pre></td></tr></table></figure>
<h1 id="-promise(_[type_]_[,_target_]_)">.promise( [type ] [, target ] )</h1><p>在 <code>Javascript</code> 中，有外一种异步处理模式被叫做 <code>Promises</code>， <code>CommonJS</code> 标准委员会于是发布了一个规范，就把这个 <code>API</code> 叫做 <code>Promises</code> 了。</p>
<p><code>Promise</code> 背后的概念非常简单，有两部分:</p>
<p><code>Deferreds</code>，定义工作单元，<br><code>Promises</code>，从 <code>Deferreds</code> 返回的数据。<br><code>Promise</code> 不同于回调的很重要的一个点是，你可以在 <code>Promise</code> 状态变成执行(<code>resolved</code>)之后追加处理句柄。这就允许你传输数据，而忽略它是否已经被应用获取，然后缓存它，等等之类的操作，因此你可以对数据执行操作，而不管它是否已经或者即将可用。</p>
<p>你可以给一个 <code>promise</code> 追加多个处理(<code>then()</code>)。<code>Promise API</code> 好玩的地方在于允许链式处理:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- lang: js --&gt;</span></div><div class="line">promise</div><div class="line">    .then(doSomething)</div><div class="line">    .then(doSomethingElse)</div><div class="line">    .then(doSomethingMore)</div><div class="line">    .catch(logError);</div></pre></td></tr></table></figure></p>
<p>  <em>原文见</em>：<a href="http://segmentfault.com/a/1190000000660257" target="_blank" rel="external">trigkit4</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="$-grep()">$.grep()</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td c]]>
    </summary>
    
      <category term="web前端" scheme="http://dearxiaojie.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="http://dearxiaojie.xyz/tags/jQuery/"/>
    
      <category term="前端积累" scheme="http://dearxiaojie.xyz/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个挑战游戏(Nazo)]]></title>
    <link href="http://dearxiaojie.xyz/2015/06/12/%E4%B8%80%E4%B8%AA%E6%8C%91%E6%88%98%E6%B8%B8%E6%88%8F(Nazo)/"/>
    <id>http://dearxiaojie.xyz/2015/06/12/一个挑战游戏(Nazo)/</id>
    <published>2015-06-12T14:06:35.000Z</published>
    <updated>2016-01-20T04:42:04.000Z</updated>
    <content type="html"><![CDATA[<p>今天下午在实验室群里看见一学姐发了个<a href="http://cafebabe.cc/nazo/level1.html" target="_blank" rel="external">东西</a>，让大家去闯关，刚好自己也比较喜欢这方面的东西，于是就点进去看看。第一个页面就是<a href="http://cafebabe.cc/nazo/level1.html" target="_blank" rel="external">第一关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic1.png" alt="acc1pic1.png">，直接点击“此处”两个字就进入<a href="http://cafebabe.cc/nazo/level2.html" target="_blank" rel="external">第二关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic2.png" alt="acc1pic2.png">，仔细观察发现url最后一个数组是递增的，于是试了一下直接level3.html，真是逗，他还真是这样设计，于是进入<a href="http://cafebabe.cc/nazo/level3.html" target="_blank" rel="external">第三关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic3.png" alt="acc1pic3.png">，到这关之后，<a id="more"></a>习惯性的打开了浏览器的控制台，哈哈，源码里<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic4.png" alt="acc1pic4.png">，第四关的“钥匙”就摆在那儿，顺利进入<a href="http://cafebabe.cc/nazo/helloworld.html" target="_blank" rel="external">第四关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic5.png" alt="acc1pic5.png">，这关我也想在控制台里找到点什么线索，于是在他外部js文件发现<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic6.png" alt="acc1pic6.png">，当然在local storage里面也能发现<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic7.png" alt="acc1pic7.png">，开心的进入<a href="http://cafebabe.cc/nazo/java.html" target="_blank" rel="external">第五关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic8.png" alt="acc1pic8.png">。中文翻译过来是“简单的密码学问题”，到这我打算放弃了，因为不懂密码学，但是看见说是简单的，就想试试呗。看了下qjofusff.iunm，猜想iunm应该和html这四个字母存在一种关系，我去，相邻字母，一个一个对应就出了“pinetree.html”，在地址栏输入就出现<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic9.png" alt="acc1pic9.png">，是的，到<a href="http://cafebabe.cc/nazo/pinetree.html" target="_blank" rel="external">第六关</a>，是一串数字，我直接把数字当地址来<a href="http://cafebabe.cc/nazo/3735928559.html" target="_blank" rel="external">访问</a>，来到一个特别的404页面<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pci10.png" alt="acc1pci10.png">，提示用计算器，难道这是一串十进制数，打开计算器，也是习惯性的点了下十六进制<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic11.png" alt="acc1pic11.png">，算出的十六进制数“deadbeef”，咦，有点像。<a href="http://cafebabe.cc/nazo/deadbeef.html" target="_blank" rel="external">访问了</a>，好吧，还真是<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic12.png" alt="acc1pic12.png">，又出现一串数字，难道又转进制？反正计算器还没关，计算出来是”be6c3a35”,于是我<a href="http://cafebabe.cc/nazo/be6c3a35.html" target="_blank" rel="external">访问</a>。出现一个404，但是有提示，”you need penguin”,企鹅，扣扣？可以试试，怎么试？加个好友就可以给答案？我还就真打开扣扣搜索<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic13.png" alt="acc1pic13.png">，卧槽，要不要那么直接，<a href="http://cafebabe.cc/nazo/bravo.html" target="_blank" rel="external">这个</a>肯定是下一关链接嘛，汗！！到第八关了<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic14.png" alt="acc1pic14.png">，心里还是有点小小的激动。看到一个回形针，好熟悉的样子，像是小学的时候见过，那时候office经常跳出这么个玩意儿，百度了下这个东西叫什么名字<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic15.png" alt="acc1pic15.png">，好吧，这哥们儿叫<a href="http://cafebabe.cc/nazo/clippy.html" target="_blank" rel="external">clippy</a>。这就到第九关了<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic16.png" alt="acc1pic16.png">。出现了一个winrar的压缩文件，哦不，这是个图片。这下真的无解了，把源码看了一遍也没发现什么，于是就把图片下载到本地了。点击打开又提示我文件损坏，一般文件损坏都可能是错误的转换格式，因为我就喜欢随便转换文件的格式。看见他是rar的文件名，会不会是rar后缀名的文件转换的呢？于是我就把它转换成rar文件，再打开<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic17.png" alt="acc1pic17.png">，是的，到这时候我都觉得我机智，终于到<a href="http://cafebabe.cc/nazo/click.html" target="_blank" rel="external">第十关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic18.png" alt="acc1pic18.png">。行吧，这又来数字，还来了一串看不懂的英文字符。不过这应该不是扣扣号了吧，哈哈。于是我又想着给它转换进制，这次想得是转换二进制，为什么？他把单词写在一起，空格都没有。肯定和这个二进制数存在某种对应关系。这个想法来源于前晚看的电影《赤道》，张家辉找出张学友是内奸的那段。通过计算器转换进制，发现没几个1，就把是1的对应于英文字符串的字母挑出来，是单词<a href="http://cafebabe.cc/nazo/tested.html" target="_blank" rel="external">tested</a>。多看点电影还是有好处的<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic19.png" alt="acc1pic19.png">，这应该是过完前十关的意思吧。不过人家说真正的游戏才刚刚开始呢。点击红色文字，欣然接受挑战<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic20.png" alt="acc1pic20.png">。嗯，第11关，这关毫无压力，控制台一直没关，一眼就看到<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic21.png" alt="acc1pic21.png">，一步步回到第八关，找到文件名字office，就是12关了<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic22.png" alt="acc1pic22.png">，这，是扫雷吗？“傻子也能过关”，放嘲讽技能了？我是傻子？不是，但是我真不会啊。管他，先百度一下扫雷再说，看到有什么“扫雷怎么玩”、“扫雷世界纪录”、“扫雷作弊”。。。等等，作弊是什么鬼，肯定是和技术有关，奸笑。点进去看了下。看见一张和页面上相同的图片，线索肯定就是和这个有关的，于是进一步探索，看到一串字母<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic23.png" alt="acc1pic23.png">。拿来试了一下，这不就是<a href="http://cafebabe.cc/nazo/basic/xyzzy.html" target="_blank" rel="external">13关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic24.png" alt="acc1pic24.png">。“什么鬼”，我也想问什么鬼，点开源码，看到<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pci25.png" alt="acc1pci25.png">，这不是五笔字根嘛。还好以前背过，不然都不知道是什么鬼，慢着，先点一下“确定”，好吧，404，又返回，对应每句的按键“akpwgdl”，输入到input框，到<a href="http://cafebabe.cc/nazo/basic/akpwgdl.html" target="_blank" rel="external">14关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic26.png" alt="acc1pic26.png">。<br>续：今天考六级，但是没心情，还是玩游戏吧。(不上图了)<br>第14关继续，源码提示和Base64和密码没有关系，心想，没关系最好，我又不懂，哈哈哈，从源码中还可以看出input框只能输入4个字符，加起来就是12个字符，但是还是不知道是什么，就把八个字符复制来百度一下。发现这么张图<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic27.png" alt="acc1pic27.png">,难道是12个月，首字母？试了下中间四个月首字母”mjja”，不幸，是错的。会不会和大小写有关，大月大写小月小写？哈哈哈哈。”MjJA”就是它了，来到<a href="http://cafebabe.cc/nazo/basic/month.html" target="_blank" rel="external">15关</a>,熟悉的图标，“linux”，于是<a href="http://cafebabe.cc/nazo/basic/linux.html" target="_blank" rel="external">试了一下</a>,是的，就是16关。出现一个像二维码一样的图片，我就拿手机出来扫了一下，提示”monomaniac.html”,明显就是下一关的地址，来到<a href="http://cafebabe.cc/nazo/basic/monomaniac.html" target="_blank" rel="external">17关</a>了.提示注意信号，没注意，于是刷新了一遍页面重新看，多几次之后发现“三次短闪三次长闪在三次短闪”，于是就这样去百度，但是没搜到，又去Google，找到有个东西<img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic28.png" alt="acc1pic28">,原来是sos求救信号，试了下”sos.html”,不出预料的进入<a href="http://cafebabe.cc/nazo/basic/sos.html" target="_blank" rel="external">18关</a>。<br>  上次玩到18关就没玩了，可是那个题目一直在脑海中，今天突然想起那串数字也许是对应的某个数组的英文，试了下第一个“6.9.22.5”对应26个字母顺序为“five”，似乎是那么个意思，然后“20.8.18.5.5”解出来是“three”,加起来不就是8，eight嘛，输进去进入一个404页面，太急了没有转换成数字“5.9.7.8.20”。就到<a href="http://cafebabe.cc/nazo/basic/solve.html" target="_blank" rel="external">19关</a>了,明天还要考试，今天就不继续玩了、<br>  好吧，瞬间不开心了，说不玩了，到19关的时候随意看了一下，看到一个“黄博韬”，于是百度了下这个东西，结果在知乎上看见了这么个<a href="http://www.zhihu.com/question/31231641" target="_blank" rel="external">玩意</a>儿，干(sang)得(xin)漂(bing)亮(kuang)，再不想玩下去了。本游戏到此为止。GAME OVER!!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天下午在实验室群里看见一学姐发了个<a href="http://cafebabe.cc/nazo/level1.html">东西</a>，让大家去闯关，刚好自己也比较喜欢这方面的东西，于是就点进去看看。第一个页面就是<a href="http://cafebabe.cc/nazo/level1.html">第一关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic1.png" alt="acc1pic1.png">，直接点击“此处”两个字就进入<a href="http://cafebabe.cc/nazo/level2.html">第二关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic2.png" alt="acc1pic2.png">，仔细观察发现url最后一个数组是递增的，于是试了一下直接level3.html，真是逗，他还真是这样设计，于是进入<a href="http://cafebabe.cc/nazo/level3.html">第三关</a><img src="http://7xjp74.com1.z0.glb.clouddn.com/acc1pic3.png" alt="acc1pic3.png">，到这关之后，]]>
    
    </summary>
    
      <category term="挑战" scheme="http://dearxiaojie.xyz/tags/%E6%8C%91%E6%88%98/"/>
    
      <category term="未完待续" scheme="http://dearxiaojie.xyz/categories/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[XMLHttpRequest学习笔记]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/29/XMLHttpRequest%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://dearxiaojie.xyz/2015/05/29/XMLHttpRequest学习笔记/</id>
    <published>2015-05-29T09:16:54.000Z</published>
    <updated>2016-01-20T04:49:44.000Z</updated>
    <content type="html"><![CDATA[<p>对于xhr的学习后的一个例子<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-condensed"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>number<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>author<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>year<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"mytbody"</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>getAllResponseHeaders()<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"pp"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>getResponseHeader("Last-Modified")<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"ppp"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.7.2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> XHR;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">                XHR = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                XHR = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            XHR.open(<span class="string">"GET"</span>, <span class="string">"./text/books.xml"</span>, <span class="literal">true</span>);</div><div class="line">            <span class="comment">//通过 XML HTTP 加载 XML 文件</span></div><div class="line">            XHR.send();</div><div class="line">            XHR.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>) &#123;</div><div class="line">                <span class="comment">// 4 = "loaded" 200 = “OK”</span></div><div class="line">                    <span class="keyword">var</span> xmlDoc = XHR.responseXML;</div><div class="line">                    <span class="keyword">var</span> txt = <span class="string">"&lt;tr&gt;"</span>;</div><div class="line">                    <span class="keyword">var</span> x = xmlDoc.getElementsByTagName(<span class="string">"book"</span>);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</div><div class="line">                    <span class="comment">//把 XML 文件显示为 HTML 表格</span></div><div class="line">                        txt += <span class="string">"&lt;td&gt;"</span> + i + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                        xx = x[i].getElementsByTagName(<span class="string">"title"</span>);</div><div class="line">                        txt += <span class="string">"&lt;td&gt;"</span> + xx[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                        xx = x[i].getElementsByTagName(<span class="string">"author"</span>);</div><div class="line">                        txt += <span class="string">"&lt;td&gt;"</span> + xx[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                        xx = x[i].getElementsByTagName(<span class="string">"year"</span>);</div><div class="line">                        txt += <span class="string">"&lt;td&gt;"</span> + xx[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                        xx = x[i].getElementsByTagName(<span class="string">"price"</span>);</div><div class="line">                        txt += <span class="string">"&lt;td&gt;"</span> + xx[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue</div><div class="line">                                + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"mytbody"</span>).innerHTML = txt;</div><div class="line">                    <span class="comment">//通过 XML HTTP 进行一次 HEAD 请求</span></div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"pp"</span>).innerHTML = XHR.getAllResponseHeaders();</div><div class="line">                    <span class="comment">//通过 XML HTTP 进行一次指定的 HEAD 请求</span></div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"ppp"</span>).innerHTML = XHR.getResponseHeader(<span class="string">"Last-Modified"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            loadXHR();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">//books.xml</div><div class="line">    <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"children"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"cooking"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"web"</span> <span class="attr">cover</span>=<span class="string">"paperback"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"web"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>XQuery Kick Start<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>James McGovern<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Per Bothner<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Kurt Cagle<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>James Linn<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Vaidyanathan Nagarajan<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>49.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于xhr的学习后的一个例子<br>]]>
    
    </summary>
    
      <category term="XMLHttpRequest" scheme="http://dearxiaojie.xyz/tags/XMLHttpRequest/"/>
    
      <category term="学习笔记" scheme="http://dearxiaojie.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[web前端笔试练习]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/28/web%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/"/>
    <id>http://dearxiaojie.xyz/2015/05/28/web前端笔试练习/</id>
    <published>2015-05-27T16:50:13.000Z</published>
    <updated>2016-01-20T04:49:38.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>1.将一个32位十进制数组转化成2进制后，翻转这个2进制数，再转换成十进制数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//res1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseB</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> bits = num.toString(<span class="number">2</span>);</div><div class="line">  <span class="keyword">var</span> len = <span class="number">32</span> - bits.length;</div><div class="line">  bits = bits.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">  <span class="keyword">while</span>(len--) &#123;</div><div class="line">  	bits+=<span class="string">"0"</span>;</div><div class="line">  &#125;</div><div class="line">  	<span class="keyword">return</span> <span class="built_in">parseInt</span>(bits,<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(reverseB(<span class="number">43261596</span>));<span class="comment">//964176192  </span></div><div class="line">  <span class="comment">//res2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseBs</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> m = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</div><div class="line">    m|=(n&amp;<span class="number">1</span>);</div><div class="line">    n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    m &lt;&lt;= <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">    m|=(n&amp;<span class="number">01</span>);</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">  &#125;</div><div class="line"><span class="built_in">console</span>.log(reverseBs(<span class="number">43261596</span>));<span class="comment">//964176192</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>2.罗马数组转换成十进制数字</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> romObj = &#123;I:<span class="number">1</span>, V:<span class="number">5</span>, X:<span class="number">10</span>, L:<span class="number">50</span>, C:<span class="number">100</span>, D:<span class="number">500</span>, M:<span class="number">1000</span>&#125;;</div><div class="line"><span class="built_in">var</span> romanToInt = function(str) &#123;</div><div class="line">    <span class="built_in">var</span> <span class="built_in">sum</span> = <span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>; i++) &#123;</div><div class="line">        rom1 = romObj[str.<span class="built_in">substring</span>(i,i+<span class="number">1</span>)];</div><div class="line">        rom2 = romObj[str.<span class="built_in">substring</span>(i+<span class="number">1</span>,i+<span class="number">2</span>)];</div><div class="line">        <span class="keyword">if</span>(str.<span class="built_in">substring</span>(i+<span class="number">1</span>,i+<span class="number">2</span>) !== <span class="string">""</span> &amp;&amp; rom1 &lt; rom2) &#123;</div><div class="line">            <span class="built_in">sum</span> += rom2 - rom1;</div><div class="line">            i++;</div><div class="line">        &#125; <span class="keyword">else</span> </div><div class="line">            <span class="built_in">sum</span> += rom1;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">sum</span>;</div><div class="line">&#125;;</div><div class="line">console.<span class="built_in">log</span>(romanToInt('II'));</div></pre></td></tr></table></figure>
<blockquote>
<p>3.总共有n阶楼梯，每次只能上一步或者两部，要到达楼上有多少种方式<br>分析，当列举了当n为1,2,3,4,5时得出有1,2,3,5,8种方式<br>就是一个斐波拉契数列</p>
</blockquote>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var climbStairs = <span class="function"><span class="keyword">function</span><span class="params">(n)</span></span> &#123;</div><div class="line">    var a = <span class="number">1</span>,</div><div class="line">        b = <span class="number">2</span>,</div><div class="line">        <span class="built_in">sum</span> = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> a;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> b;</div><div class="line">        n -= <span class="number">2</span>; </div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        <span class="built_in">sum</span> = a + b; </div><div class="line">        a = b;</div><div class="line">        b = <span class="built_in">sum</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</div><div class="line">&#125;;</div><div class="line">console.<span class="built_in">log</span>(climbStairs(<span class="number">3</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p>4.给数组增加一种方法，可以去除数组中的重复项并返回数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//fun1--hash</span></div><div class="line"><span class="built_in">Array</span>.prototype.delWeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> n=[],r=[]; <span class="comment">//n为hash表，r为临时数组</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) <span class="comment">//遍历当前数组</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!n[<span class="keyword">this</span>[i]]) <span class="comment">//如果hash表中没有当前项</span></div><div class="line">        &#123;</div><div class="line">            n[<span class="keyword">this</span>[i]] = <span class="literal">true</span>; <span class="comment">//存入hash表</span></div><div class="line">            r.push(<span class="keyword">this</span>[i]); <span class="comment">//把当前数组的当前项push到临时数组里面</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.delWeight());</div><div class="line"><span class="comment">//fun2--利用数组的indexOf方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delWeight</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = []; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (result.indexOf(arr[i]) == <span class="number">-1</span>) result.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>5.对不确定数量的数进行排序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tags = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//使用数组作为参数存储容器</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = <span class="built_in">arguments</span>.length;i&lt;len;i++)&#123;</div><div class="line">        tags.push(<span class="built_in">arguments</span>[i]);</div><div class="line">    &#125;</div><div class="line">    tags.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> tags;<span class="comment">//返回已经排序的数组</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = mySort(<span class="number">50</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">99</span>,<span class="number">57</span>,<span class="number">100</span>);<span class="comment">//传入参数个数不确定</span></div><div class="line"><span class="built_in">console</span>.info(result);<span class="comment">//显示结果</span></div></pre></td></tr></table></figure>
<blockquote>
<p>6.用短路求值的方式求前n项和</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumr</span><span class="params">(n)</span> &#123;</span></div><div class="line">    var <span class="built_in">ans</span> = n;</div><div class="line">    <span class="built_in">ans</span> &amp;&amp; (<span class="built_in">ans</span> += sumr(n<span class="number">-1</span>));</div><div class="line">    <span class="keyword">return</span> <span class="built_in">ans</span>;</div><div class="line">&#125;</div><div class="line">console.<span class="built_in">log</span>(sumr(<span class="number">5</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p>7.正则表达式判断一个数是不是素数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_prime</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> r=[],s=<span class="string">""</span>;</div><div class="line">     <span class="keyword">while</span>(r.length&lt;x)&#123;</div><div class="line">         r.push(<span class="string">"1"</span>);</div><div class="line">     &#125;</div><div class="line">     s=r.join(<span class="string">""</span>);</div><div class="line">     <span class="keyword">return</span> !<span class="regexp">/^1?$|^(11+?)\1+$/</span>.test(s);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(is_prime(<span class="number">5</span>));</div><div class="line"><span class="built_in">console</span>.log(is_prime(<span class="number">10</span>));</div><div class="line"><span class="built_in">console</span>.log(is_prime(<span class="number">13</span>));</div><div class="line"><span class="built_in">console</span>.log(is_prime(<span class="number">60</span>));</div><div class="line"><span class="built_in">console</span>.log(is_prime(<span class="number">99</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p>8.辗转相除求最大公约数</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span><span class="params">(a,b)</span><span class="comment">&#123;</span></span></div><div class="line">    if (b&gt;a) ff(b,a);</div><div class="line">    return !(a%b)?b:ff(b,a%b);</div><div class="line">&#125;</div><div class="line"><span class="title">console</span>.<span class="title">log</span><span class="params">(ff(10,3)</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>9.Json数据按照某一字段排序的方法</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var stuJson = [&#123; <span class="string">name:</span> <span class="string">"daming"</span>, <span class="string">age:</span> <span class="number">21</span>, <span class="string">weight:</span> <span class="number">66</span>, <span class="string">sex:</span><span class="string">"boy"</span> &#125;,</div><div class="line">                   &#123; <span class="string">name:</span> <span class="string">"lisa"</span>, <span class="string">age:</span> <span class="number">19</span>, <span class="string">weight:</span> <span class="number">45</span>, <span class="string">sex:</span><span class="string">"girl"</span> &#125;,</div><div class="line">                   &#123; <span class="string">name:</span> <span class="string">"lili"</span>, <span class="string">age:</span> <span class="number">20</span>, <span class="string">weight:</span> <span class="number">50</span>, <span class="string">sex:</span><span class="string">"boy"</span>&#125;];</div><div class="line">     <span class="comment">//按age升序</span></div><div class="line">   stuJson.sort(function(a,b)&#123;</div><div class="line">                    <span class="keyword">return</span> a.age - b.age;</div><div class="line">  &#125;);</div><div class="line">console.log(stuJson);</div></pre></td></tr></table></figure>
<blockquote>
<p>10.求一个数组中的最大最小值</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">32</span>,<span class="number">42</span>,<span class="number">12</span>,<span class="number">42</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">56</span>,<span class="number">75</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">53</span>,<span class="number">23</span>,<span class="number">36</span>];</div><div class="line">var min =   Math.min.apply(null,arr);</div><div class="line">   console.log(min);</div><div class="line">var aMax = Math.max.apply(null,arr);</div><div class="line">   console.log(aMax);</div></pre></td></tr></table></figure>
<blockquote>
<p>11.将一个匿名函数作为函数的一个参数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">f,a</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [], <span class="comment">// Create a new Array</span></div><div class="line">      i;</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i != a.length; i++)</div><div class="line">    result[i] = f(a[i]);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">   <span class="comment">//调用的时候实现这个引用参数函数</span></div><div class="line">  <span class="keyword">var</span> re = map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x * x * x&#125;, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>]);</div><div class="line">  <span class="built_in">console</span>.log(re);<span class="comment">//[0, 1, 8, 125, 1000].</span></div></pre></td></tr></table></figure>
<blockquote>
<p>12.字符传中的大小写相互转换</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function upperToggleLower(<span class="built_in">str</span>)&#123;</div><div class="line">  var s =<span class="string">""</span>;</div><div class="line">  <span class="keyword">for</span>(var i = <span class="number">0</span>,len = <span class="built_in">str</span>.length;i&lt;len;i++)&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>[i]&lt;=<span class="string">'z'</span>&amp;&amp;<span class="built_in">str</span>[i]&gt;=<span class="string">'a'</span>||<span class="built_in">str</span>[i]&lt;=<span class="string">'Z'</span>&amp;&amp;<span class="built_in">str</span>[i]&gt;=<span class="string">'A'</span>) &#123;</div><div class="line">      s+=<span class="keyword">String</span>.fromCharCode(<span class="built_in">str</span>.charCodeAt(i)^<span class="number">32</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      s+=<span class="built_in">str</span>[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line">var <span class="built_in">str</span> = <span class="string">'abcdef FEDCBA'</span> ;</div><div class="line">console.<span class="built_in">log</span>(upperToggleLower(<span class="built_in">str</span>));<span class="comment">//"ABCDEF fedcba"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>13.js快排</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">(array,l,r)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(l &lt; r)&#123;</div><div class="line">    <span class="keyword">var</span> i = l,j = r,x = <span class="keyword">array</span>[l];</div><div class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line">      <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="keyword">array</span>[j]&gt;=x)&#123;</div><div class="line">        j--;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">        <span class="keyword">array</span>[i++] = <span class="keyword">array</span>[j];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="keyword">array</span>[i] &lt; x)&#123;</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">        <span class="keyword">array</span>[j--] = <span class="keyword">array</span>[i];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">array</span>[i] = x;</div><div class="line">    quick_sort(<span class="keyword">array</span>,l,i <span class="number">-1</span> );</div><div class="line">    quick_sort(<span class="keyword">array</span>,i + <span class="number">1</span>,r);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>14.给出2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字</p>
</blockquote>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * <span class="doctag">@param</span> A: Array of integers.</div><div class="line"> * <span class="doctag">@return</span>: The single number.</div><div class="line"> */</div><div class="line"><span class="keyword">int</span> singleNumber(vector&lt;<span class="keyword">int</span>&gt; &amp;A) &#123;</div><div class="line">    <span class="keyword">if</span> (!A.size()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> a = A[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;A.size();i++)</div><div class="line">    &#123;</div><div class="line">        a^=A[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>15.给出两个整数a和b, 求他们的和, 但不能使用 + 等数学运算符。</p>
</blockquote>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * <span class="doctag">@param</span> a: The first integer</div><div class="line"> * <span class="doctag">@param</span> b: The second integer</div><div class="line"> * <span class="doctag">@return</span>: The sum of a and b</div><div class="line"> */</div><div class="line">    <span class="keyword">int</span> aplusb(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</div><div class="line">        <span class="keyword">int</span> n1;</div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            n1 = a ^ b;</div><div class="line">            b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</div><div class="line">            a = n1;</div><div class="line">        &#125;<span class="keyword">while</span>(b != <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> n1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>16.计算在一个 32 位的整数的二进制表式中有多少个 1.</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * @param num: an integer</div><div class="line"> * @return: an integer, the number of ones in num</div><div class="line"> */</div><div class="line">  <span class="built_in">int</span> countOnes(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">             <span class="built_in">num</span> = <span class="built_in">num</span>&amp;(<span class="built_in">num</span><span class="number">-1</span>);</div><div class="line">             count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>17.找到单链表倒数第n个节点，保证链表中节点的最少数量为n。</p>
</blockquote>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * <span class="type">Definition</span> <span class="keyword">of</span> <span class="type">ListNode</span></div><div class="line"> * <span class="keyword">class</span> <span class="type">ListNode</span> &#123;</div><div class="line"> * public:</div><div class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</div><div class="line"> *     <span class="type">ListNode</span> *next;</div><div class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> <span class="keyword">val</span>) &#123;</div><div class="line"> *         this-&gt;<span class="keyword">val</span> = <span class="keyword">val</span>;</div><div class="line"> *         this-&gt;next = <span class="type">NULL</span>;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> * @param head: <span class="type">The</span> first node <span class="keyword">of</span> linked <span class="built_in">list</span>.</div><div class="line"> * @param n: <span class="type">An</span> integer.</div><div class="line"> * @return: <span class="type">Nth</span> <span class="keyword">to</span> last node <span class="keyword">of</span> a singly linked <span class="built_in">list</span>. </div><div class="line"> */</div><div class="line">    <span class="type">ListNode</span> *nthToLast(<span class="type">ListNode</span> *head, <span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="keyword">if</span> (!head) return <span class="type">NULL</span>;</div><div class="line">        <span class="type">ListNode</span> *h,*d;</div><div class="line">        h = d = head;</div><div class="line">        <span class="keyword">while</span>(--n)</div><div class="line">        &#123;</div><div class="line">            h = h-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(h-&gt;next!=<span class="type">NULL</span>)&#123;</div><div class="line">            h = h-&gt;next;</div><div class="line">            d = d-&gt;next;</div><div class="line">        &#125;</div><div class="line">        return d;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>18.写出一个高效的算法来搜索 m × n矩阵中的值。</p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个矩阵具有以下特性：</div><div class="line"> * 1.每行中的整数从左到右是排序的。</div><div class="line"> * 2.每行的第一个数大于上一行的最后一个整数。</div><div class="line"> * @param matrix, a list of lists of integers</div><div class="line"> * @param target, an integer</div><div class="line"> * @return a boolean, indicate whether matrix contains target</div><div class="line"> */</div><div class="line">    bool searchMatrix(<span class="keyword">vector</span>&lt;<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;<span class="keyword">matrix</span>, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">matrix</span>.<span class="keyword">size</span>()) <span class="keyword">return</span> false;</div><div class="line">        <span class="keyword">int</span> i,j;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">matrix</span>.<span class="keyword">size</span>(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(target &lt; <span class="keyword">matrix</span>[i][<span class="number">0</span>])</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(target == <span class="keyword">matrix</span>[i][<span class="number">0</span>])</div><div class="line">                <span class="keyword">return</span> true;</div><div class="line">        &#125;</div><div class="line">        i--;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="keyword">matrix</span>[i].<span class="keyword">size</span>();j++)</div><div class="line">            <span class="keyword">if</span>(target == <span class="keyword">matrix</span>[i][j]) <span class="keyword">return</span> true;</div><div class="line">        <span class="keyword">return</span> false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>19.设计一种方法，将一个字符串中的所有空格替换成 %20 。</p>
</blockquote>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 你可以假设该字符串有足够的空间来加入新的字符，且你得到的是“真实的”字符长度</div><div class="line"> * <span class="doctag">@param</span> string: An array of Char</div><div class="line"> * <span class="doctag">@param</span> length: The true length of the string</div><div class="line"> * <span class="doctag">@return</span>: The true length of new string</div><div class="line"> */</div><div class="line">    <span class="keyword">int</span> replaceBlank(<span class="keyword">char</span> string[], <span class="keyword">int</span> length) &#123;</div><div class="line">        <span class="comment">// Write your code here</span></div><div class="line">      <span class="keyword">int</span> space_cnt = <span class="number">0</span>;</div><div class="line">      <span class="keyword">int</span> new_length = <span class="number">0</span>;</div><div class="line">      <span class="keyword">char</span> *p,*q;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> (string[i] == <span class="string">' '</span>) space_cnt++;</div><div class="line">      &#125;</div><div class="line">      new_length = space_cnt * <span class="number">2</span> +length;</div><div class="line">      p = string + (length - <span class="number">1</span>);</div><div class="line">      q = string + (new_length - <span class="number">1</span>);</div><div class="line">      <span class="keyword">while</span>(p != q)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span>(*p == <span class="string">' '</span>) *q = <span class="string">'0'</span>,q--,*q = <span class="string">'2'</span>,q--,*q = <span class="string">'%'</span>;</div><div class="line">        <span class="keyword">else</span> *q = *p;</div><div class="line">        p--;</div><div class="line">        q--;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> new_length;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>20.统计一个字符串中每个单词的个数</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *@param &#123;<span class="built_in">string</span>&#125; str 输入的字符串</div><div class="line"> *@<span class="keyword">return</span> &#123;Object&#125; o 单词及对应数量</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countWordNum</span><span class="params">(str)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span> ;</div><div class="line">    var wordsArr = str.split(<span class="string">' '</span>);</div><div class="line">    var o = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>, len = wordsArr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (wordsArr[i] <span class="keyword">in</span> o) &#123; //<span class="keyword">or</span> <span class="keyword">if</span> (o[wordsArr[i]]) &#123;   <span class="keyword">or</span> <span class="keyword">if</span> (o.hasOwnProperty(wordsArr[i])) &#123;</div><div class="line">            o[wordsArr[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          o[wordsArr[i]] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>21.给你六种面额 1、5、10、20、50、100 元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0~10000的非负整数）的不同组合的个数</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">changeDP</span> &#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> v [] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>&#125;;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">change</span> (<span class="params"><span class="keyword">int</span> n, <span class="keyword">int</span> i</span>)</span>&#123; </div><div class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> change(n,i<span class="number">-1</span>)+change(n-v[i],i);    </div><div class="line">  &#125; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (<span class="params">String[] args</span>)</span>&#123;</div><div class="line">    System.<span class="keyword">out</span>.println(change(<span class="number">100</span>,v.length<span class="number">-1</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>22.给定非空整型数组 arr 和整数 limit ，两次从 arr 中随机抽取元素（可能抽到同一个元素），获得整数 x ,y ，得到和 s = x + y 。求所有不超过 limit 的 s 值中的最大数。</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function limitedMaxSum(arr, <span class="built_in">limit</span>) &#123;</div><div class="line">    <span class="built_in">var</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>, len = arr.<span class="built_in">length</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="built_in">var</span> <span class="built_in">sum</span> = arr[i] + arr[j];</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span> &lt;= <span class="built_in">limit</span> &amp;&amp; <span class="built_in">sum</span> &gt;= <span class="built_in">max</span>) &#123;</div><div class="line">                <span class="built_in">max</span> = <span class="built_in">sum</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">max</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>持续更新ing…</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>1.将一个32位十进制数组转化成2进制后，翻转这个2进制数，再转换成十进制数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//res1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseB</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> bits = num.toString(<span class="number">2</span>);</div><div class="line">  <span class="keyword">var</span> len = <span class="number">32</span> - bits.length;</div><div class="line">  bits = bits.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">  <span class="keyword">while</span>(len--) &#123;</div><div class="line">  	bits+=<span class="string">"0"</span>;</div><div class="line">  &#125;</div><div class="line">  	<span class="keyword">return</span> <span class="built_in">parseInt</span>(bits,<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(reverseB(<span class="number">43261596</span>));<span class="comment">//964176192  </span></div><div class="line">  <span class="comment">//res2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseBs</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> m = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</div><div class="line">    m|=(n&amp;<span class="number">1</span>);</div><div class="line">    n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    m &lt;&lt;= <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">    m|=(n&amp;<span class="number">01</span>);</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">  &#125;</div><div class="line"><span class="built_in">console</span>.log(reverseBs(<span class="number">43261596</span>));<span class="comment">//964176192</span></div></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="web前端" scheme="http://dearxiaojie.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔试" scheme="http://dearxiaojie.xyz/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="笔试&amp;面试" scheme="http://dearxiaojie.xyz/categories/%E7%AC%94%E8%AF%95-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[淡淡的友情、浅浅的爱]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/26/%E6%B7%A1%E6%B7%A1%E7%9A%84%E5%8F%8B%E6%83%85%E3%80%81%E6%B5%85%E6%B5%85%E7%9A%84%E7%88%B1/"/>
    <id>http://dearxiaojie.xyz/2015/05/26/淡淡的友情、浅浅的爱/</id>
    <published>2015-05-26T05:20:13.000Z</published>
    <updated>2016-01-20T04:48:50.000Z</updated>
    <content type="html"><![CDATA[<p>　　有一种朋友,我想那是一种介乎于爱情与友情之间的感情，你会在偶尔的一时间默默地想念他，想起他时，心里暖暖的，有一份美好，有一份感动。在忧愁和烦恼的时候，你会想起他，你很希望他能在你的身边，给你安慰，给你理解，而你却从没有向他倾诉，你怕属于自己的那份忧伤会妨碍他平静的生活。<br><a id="more"></a><br>　　你会因为一首歌曲，一种颜色，想起他，想起他的真挚，想起他的执着，想起他那曾经一起经历过的风风雨雨。因为有了这样一个朋友，你会更加珍惜自己的生命，热爱自己的生活，因为你知道他希望你过的很好，他希望你能好好的照顾自己，再见面时，他希望你能告诉他你很幸福。<br>　　那些世俗的观念，在你的心中，因为他的存在而变的苍白无力，你只是在心底深处为这个人设置了一处小小的空间，静静地固守着那份美好的回忆，从一开始你就知道，在你们之间不会有什么爱情，似乎谈起爱情就亵渎了这份情感，这只能是一种友情。这到底是怎么一回事呢？你想了许多年，却始终没有头绪。<br>　　你们很少联络，在这长长的一生中，你门相聚的时光也许只有几万分之一，但是在彼此的心中都保留了一份惦念，一份嘱咐，就算他去到天涯海角，就算过了许多许多年，就算再见面时，早已是人非物亦非了，你仍然会那样深刻的记着这样一个人，这已经足够了。<br>　　生活有时候平静的会像一口枯井，也许你也会掉进这口枯井里去，也许你没有什么天荒地老、海枯石烂的爱情，也许华发早生、满鬓苍白，但是有了这样的一位朋友，在你的生命中就会有些许涟漪，些许色彩，你想着他。默默的记起他，也许此生此世都不会忘记了。<br>　　你很感激在这个世界上，有这样的一个人，他不在你的身边，他也并没有为你做些什么，你却希望，他会过的很好，长命百岁，子孙满堂，幸福安康……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　有一种朋友,我想那是一种介乎于爱情与友情之间的感情，你会在偶尔的一时间默默地想念他，想起他时，心里暖暖的，有一份美好，有一份感动。在忧愁和烦恼的时候，你会想起他，你很希望他能在你的身边，给你安慰，给你理解，而你却从没有向他倾诉，你怕属于自己的那份忧伤会妨碍他平静的生活。<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://dearxiaojie.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情随笔" scheme="http://dearxiaojie.xyz/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS选择器]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/26/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://dearxiaojie.xyz/2015/05/26/CSS选择器/</id>
    <published>2015-05-26T05:17:00.000Z</published>
    <updated>2016-01-21T04:53:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="层次选择器">层次选择器</h2><ul>
<li><code>$(&quot;body &gt; div&quot;)</code>   body中子元素中的div</li>
<li><code>$(&quot;#one + div&quot;)</code>   id为one的下一个紧挨着的div(兄弟)</li>
<li><code>$(&quot;#two ~ div&quot;)</code>   id为two的后面的所有div(兄弟)<br>拓展</li>
<li><code>$(&quot;#one&quot;).sibling(&quot;div&quot;)</code>  id为one的所有div兄弟元素</li>
<li><code>$(&quot;#one&quot;).nextAll(&quot;span&quot;)</code>  id为one的后面所有span元素</li>
<li><code>$(&quot;#one&quot;).prevAll(&quot;div&quot;)</code>  id为one的前面的所有的div</li>
<li><code>$(&quot;#one&quot;).nextAll(&quot;span:first&quot;)</code>  id为one的后面所有span元素的第一个</li>
</ul>
<a id="more"></a>
<h2 id="过滤选择器：以”:”开头">过滤选择器：以”:”开头</h2><ul>
<li><code>$(&quot;div:first&quot;)</code> 第一个div</li>
<li><code>$(&quot;div:last&quot;)</code>   最后一个div</li>
<li><code>$(&quot;div:not(.one)&quot;)</code>  class不为one的div</li>
<li><code>$(&quot;div:even&quot;)</code> 索引值偶数div</li>
<li><code>$(&quot;div:odd&quot;)</code>   索引值奇数div</li>
<li><code>$(&quot;div:gt(3)&quot;)</code>   索引值大于3的div</li>
<li><code>$(&quot;div:eq(3)&quot;)</code>   索引值等于3的div</li>
<li><code>$(&quot;div:lt(3)&quot;)</code>   索引值小于3的div</li>
<li><code>$(&quot;li:gt(1):lt(4)&quot;)</code>  不是第2个到第5个，而是在第二个的基础上增加4</li>
<li><code>$(&quot;:header&quot;)</code>  所有的标题元素</li>
<li><code>$(&quot;:animated&quot;)</code> 正在执行动画的所有元素</li>
</ul>
<h2 id="内容过滤选择器">内容过滤选择器</h2><ul>
<li><code>$(&quot;div:contains(&#39;ss&#39;)&quot;)</code>   文本含有ss的div元素</li>
<li><code>$(&quot;div:empty&quot;)</code>   文本为空的div元素</li>
<li><code>$(&quot;div:has(.mini)&quot;)</code>  含有class为mini的所有div元素</li>
<li><code>$(div:parent)或者$(&quot;div:not(:empty)&quot;)</code> 所有非空的div元素</li>
</ul>
<h2 id="可见性过滤选择器">可见性过滤选择器</h2><ul>
<li><code>$(&quot;div:visible&quot;)</code> 所有可见的div</li>
<li><code>$(&quot;div:hidden&quot;).show(time)</code>  所有不可见的div元素显示，time为时间，单位为毫秒</li>
<li><code>$(&quot;input:hidden&quot;).val()</code>   所有不可见的input元素的value</li>
</ul>
<h2 id="属性过滤选择器">属性过滤选择器</h2><ul>
<li><code>$(&quot;div:[title]&quot;)</code>  含有属性title的div元素</li>
<li><code>$(&quot;div:[title==&#39;test&#39;]&quot;)</code> title属性等于test的div元素</li>
<li><code>$(&quot;div:[title!=&#39;test&#39;]&quot;)</code> title属性不等于test的div元素，包括没有title属性的元素</li>
<li><code>$(&quot;div:[title^=&#39;te&#39;]&quot;)</code>  title属性以te开始的div元素</li>
<li><code>$(&quot;div:[title$=&#39;est&#39;]&quot;)</code>  title属性以est结束的div元素</li>
<li><code>$(&quot;div:[title*=&#39;es&#39;]&quot;)</code>   title属性值含有es的div元素</li>
<li><code>$(&quot;div:[id][title*=&#39;es&#39;]&quot;)</code>  有id属性的div元素中的title属性值中含有es的div元素</li>
<li><code>$(&quot;div:[title][title!=&#39;test&#39;]&quot;)</code>  含有title属性，且title属性值不为test的div元素</li>
</ul>
<h2 id="子元素过滤选择器（冒号前面有个空格，选取子元素需要在选取器前加空格）">子元素过滤选择器（冒号前面有个空格，选取子元素需要在选取器前加空格）</h2><ul>
<li><code>$(&quot;.one :nth-child(2)&quot;)</code>  class为one的第二个子元素，不是索引值为2</li>
<li><code>$(&quot;.one :first-child&quot;)</code>   class为one的第一个子元素</li>
<li><code>$(&quot;.one :last-child&quot;)</code>    class为one的最后一个子元素</li>
<li><code>$(&quot;.one :only-child&quot;)</code>    class为one的只有一个节点的节点元素</li>
<li><code>$(&quot;div.one :nth-child(2)&quot;)</code>   class为one的第二个div子元素</li>
</ul>
<h2 id="表单对象属性过滤选择器">表单对象属性过滤选择器</h2><ul>
<li><code>$(&quot;:text:enabled&quot;).val(&quot;hello&quot;)</code>  使所有可用的单行文本框的value值变为hello</li>
<li><code>$(&quot;:text:disabled&quot;).val(&quot;hello&quot;)</code>   设置所有不可用单行文本框value值为hello</li>
<li><code>$(&quot;:checkbox[name=&#39;haha&#39;]:checked&quot;).length</code>    多选框name为haha的被选中的个数</li>
<li><code>$(&quot;select :selected&quot;).length</code>   select的option子节点，冒号前加空格，下拉选择框的选中的长度</li>
<li><code>$(&quot;select :selected&quot;).val()</code>   因为$(“select :selected”)选中的是一个数组，当有多个元素时，.val()获取的是第一个选中的值。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="层次选择器">层次选择器</h2><ul>
<li><code>$(&quot;body &gt; div&quot;)</code>   body中子元素中的div</li>
<li><code>$(&quot;#one + div&quot;)</code>   id为one的下一个紧挨着的div(兄弟)</li>
<li><code>$(&quot;#two ~ div&quot;)</code>   id为two的后面的所有div(兄弟)<br>拓展</li>
<li><code>$(&quot;#one&quot;).sibling(&quot;div&quot;)</code>  id为one的所有div兄弟元素</li>
<li><code>$(&quot;#one&quot;).nextAll(&quot;span&quot;)</code>  id为one的后面所有span元素</li>
<li><code>$(&quot;#one&quot;).prevAll(&quot;div&quot;)</code>  id为one的前面的所有的div</li>
<li><code>$(&quot;#one&quot;).nextAll(&quot;span:first&quot;)</code>  id为one的后面所有span元素的第一个</li>
</ul>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://dearxiaojie.xyz/tags/CSS/"/>
    
      <category term="学习笔记" scheme="http://dearxiaojie.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库中的html源代码返还到页面的iframe中]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84html%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BF%94%E8%BF%98%E5%88%B0%E9%A1%B5%E9%9D%A2%E7%9A%84iframe%E4%B8%AD/"/>
    <id>http://dearxiaojie.xyz/2015/05/26/数据库中的html源代码返还到页面的iframe中/</id>
    <published>2015-05-26T04:49:56.000Z</published>
    <updated>2016-01-20T04:48:46.000Z</updated>
    <content type="html"><![CDATA[<p>思路：先将源代码返回到父页面的一个隐藏的<code>&lt;textarea&gt;</code>中，再在<code>&lt;iframe&gt;</code>的src的链接页面中用js获取<code>&lt;textarea&gt;</code>中的文本，即HTML源码，然后直接显示。注：<code>&lt;iframe&gt;</code>是其嵌入页面的子页面<br><a id="more"></a></p>
<h2 id="父页面"><strong>父页面</strong></h2><pre><code><span class="comment"><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//要显示的页面html，先放到父页面的隐藏框中</span></div><div class="line">        <span class="keyword">var</span> html = <span class="string">"&lt;html&gt;&lt;body&gt;&lt;a href="</span>B.html?word=<span class="built_in">escape</span>(哈哈)<span class="string">"&gt;点击&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"</span>;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"htmltext"</span>).text = html;</div><div class="line">        &#125;</div><div class="line">   </div></pre></td></tr></table></figure></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <div class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"htmltext"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">id</span>=<span class="string">"htmltext"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframes"</span> <span class="attr">width</span>=<span class="string">"1200px"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">src</span>=<span class="string">"1.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></code></pre>
<h2 id="1-html文件"><strong>1.html文件</strong></h2><pre><code><span class="comment"><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">     <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          setTimeout(fun,<span class="number">500</span>);<span class="comment">//为了是数据先加载到父页面上，所以本页面延迟加载</span></div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> html = parent.document.getElementById(<span class="string">"htmltext"</span>).value;</div><div class="line">          <span class="built_in">document</span>.write(html); <span class="comment">//把获取的html代码直接放到本页面上。</span></div><div class="line">     &#125;</div><div class="line"></div></pre></td></tr></table></figure></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>思路：先将源代码返回到父页面的一个隐藏的<code>&lt;textarea&gt;</code>中，再在<code>&lt;iframe&gt;</code>的src的链接页面中用js获取<code>&lt;textarea&gt;</code>中的文本，即HTML源码，然后直接显示。注：<code>&lt;iframe&gt;</code>是其嵌入页面的子页面<br>]]>
    
    </summary>
    
      <category term="iframe" scheme="http://dearxiaojie.xyz/tags/iframe/"/>
    
      <category term="html" scheme="http://dearxiaojie.xyz/tags/html/"/>
    
      <category term="前端积累" scheme="http://dearxiaojie.xyz/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015阿里web前端笔试题（部分）]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/25/2015%E9%98%BF%E9%87%8Cweb%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>http://dearxiaojie.xyz/2015/05/25/2015阿里web前端笔试题（部分）/</id>
    <published>2015-05-25T12:14:35.000Z</published>
    <updated>2016-01-20T04:49:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>1.给定一个随机数组，数组可能包含数组（也就是说数组元素可能为数组）。要求用js实现一个函数，返回该数组中所有元素。例如，例如：数组[2,3,[4,6,[1,8]],12,10]，返回结果为：[2,3,4,6,1,8,12,10]</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arrs = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=arr.length;i &lt; l;i++) &#123;</div><div class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr[i])) arrs.push(arr[i]);</div><div class="line">      <span class="keyword">else</span> arrs = arrs.concat( getArray(arr[i]) );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arrs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>2.用js实现随机选取10–100之间的不同的10个数字，存入一个数组，并降序排序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> aArray = [];</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">      randomNub();</div><div class="line">    &#125;</div><div class="line">    aArray.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> b - a</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.write(aArray)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomNub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> nowNub = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</div><div class="line">      <span class="keyword">if</span> (nowNub &lt; <span class="number">10</span>) &#123;</div><div class="line">        randomNub();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; aArray.length; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (nowNub == aArray[j]) &#123;</div><div class="line">          randomNub();</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      aArray.push(nowNub);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3.下面代码希望在点击每段内容的时候给它加个灰色背景，可是下面这段代码好像没有满足需求，请帮忙修改下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>).length; i++) &#123;</div><div class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>) [i];</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>) [i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      item.style.backgroundColor = <span class="string">'#eee'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;(i))</div><div class="line">&#125;</div><div class="line"><span class="comment">//修改后</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>).length; i++) &#123;</div><div class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>) [i];</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>) [i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.style.backgroundColor = <span class="string">'#eee'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;(i))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>4.为字符串实现一个render方法，实现下面的变量替换功能</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> greeting = <span class="string">'my name is $&#123;name&#125;, age $&#123;age&#125;'</span>;</div><div class="line"> <span class="keyword">var</span> result = greeting.render(&#123;<span class="attr">name</span>: <span class="string">'XiaoMing'</span>, <span class="attr">age</span>: <span class="number">11</span>&#125;);</div><div class="line"> <span class="built_in">console</span>.log(result);  <span class="comment">//my name is XiaoMing, age 11</span></div><div class="line"> <span class="built_in">String</span>.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">Object</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> _$<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">   <span class="keyword">var</span> keys = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">Object</span>)</div><div class="line">   <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty(p))</div><div class="line">   keys.push(p);</div><div class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">     (<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> s = <span class="string">'$&#123;'</span> + keys[index] + <span class="string">'&#125;'</span>;</div><div class="line">       str = _$<span class="keyword">this</span>.replace(s, <span class="built_in">Object</span>[keys[index]]);</div><div class="line">       _$<span class="keyword">this</span> = str;</div><div class="line">     &#125;) (i);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> str</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> greeting = <span class="string">'my name is $&#123;name&#125;, age $&#123;age&#125;'</span>;</div><div class="line"> <span class="keyword">var</span> result = greeting.render(&#123;</div><div class="line">   <span class="attr">name</span>: <span class="string">'XiaoMing'</span>,</div><div class="line">   <span class="attr">age</span>: <span class="number">11</span></div><div class="line"> &#125;);</div><div class="line"> <span class="built_in">console</span>.log(result);<span class="comment">//my name is XiaoMing, age 11</span></div><div class="line">other:</div><div class="line"> <span class="built_in">String</span>.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">Object</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">Object</span>)</div><div class="line">   <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty(p))</div><div class="line">   &#123;</div><div class="line">     <span class="keyword">var</span> s = <span class="string">'$&#123;'</span> + p + <span class="string">'&#125;'</span>;</div><div class="line">     str = _this.replace(s, <span class="built_in">Object</span>[p]);</div><div class="line">     _this = str;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> str</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> greeting = <span class="string">'my name is $&#123;name&#125;, age $&#123;age&#125;'</span>;</div><div class="line"> <span class="keyword">var</span> result = greeting.render(&#123;</div><div class="line">   <span class="attr">name</span>: <span class="string">'XiaoMing'</span>,</div><div class="line">   <span class="attr">age</span>: <span class="number">11</span></div><div class="line"> &#125;);</div><div class="line"> <span class="built_in">console</span>.log(result); <span class="comment">//my name is XiaoMing, age 11</span></div></pre></td></tr></table></figure>
<blockquote>
<p>5.对json格式中的某一字段进行排序</p>
</blockquote>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">eg：var stuJson = [&#123; <span class="string">name:</span> <span class="string">"daming"</span>, <span class="string">age:</span> <span class="number">21</span>, <span class="string">weight:</span> <span class="number">66</span>, <span class="string">sex:</span><span class="string">"boy"</span> &#125;,</div><div class="line">                 &#123; <span class="string">name:</span> <span class="string">"lisa"</span>, <span class="string">age:</span> <span class="number">19</span>, <span class="string">weight:</span> <span class="number">45</span>, <span class="string">sex:</span><span class="string">"girl"</span> &#125;,</div><div class="line">                 &#123; <span class="string">name:</span> <span class="string">"lili"</span>, <span class="string">age:</span> <span class="number">20</span>, <span class="string">weight:</span> <span class="number">50</span>, <span class="string">sex:</span><span class="string">"boy"</span>&#125;];</div><div class="line">   <span class="comment">//eg:按age升序</span></div><div class="line">stuJson.sort(function(a,b)&#123;</div><div class="line">                  <span class="keyword">return</span> a.age - b.age;</div><div class="line">&#125;);</div><div class="line">console.log(stuJson);<span class="comment">//[ &#123; name: 'lisa', age: 19, weight: 45, sex: 'girl' &#125;,</span></div><div class="line">                   <span class="comment">//&#123; name: 'lili', age: 20, weight: 50, sex: 'boy' &#125;,</span></div><div class="line">                   <span class="comment">//&#123; name: 'daming', age: 21, weight: 66, sex: 'boy' &#125; ]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>6.用一句语句对数组去最小或最大值</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eg:<span class="keyword">var</span> arr = [<span class="number">32</span>,<span class="number">42</span>,<span class="number">12</span>,<span class="number">42</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">56</span>,<span class="number">75</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">53</span>,<span class="number">23</span>,<span class="number">36</span>];</div><div class="line">   <span class="keyword">var</span> aMin = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr);</div><div class="line">   <span class="built_in">console</span>.log(min);<span class="comment">//3</span></div><div class="line">   <span class="keyword">var</span> aMax = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr);<span class="comment">//75</span></div><div class="line">   <span class="built_in">console</span>.log(aMax);</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>1.给定一个随机数组，数组可能包含数组（也就是说数组元素可能为数组）。要求用js实现一个函数，返回该数组中所有元素。例如，例如：数组[2,3,[4,6,[1,8]],12,10]，返回结果为：[2,3,4,6,1,8,12,10]</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arrs = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=arr.length;i &lt; l;i++) &#123;</div><div class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr[i])) arrs.push(arr[i]);</div><div class="line">      <span class="keyword">else</span> arrs = arrs.concat( getArray(arr[i]) );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arrs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="web前端" scheme="http://dearxiaojie.xyz/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔试" scheme="http://dearxiaojie.xyz/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="笔试&amp;面试" scheme="http://dearxiaojie.xyz/categories/%E7%AC%94%E8%AF%95-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[两个iframe框滚动条联动以及iframe窗口高宽自适应]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/25/%E4%B8%A4%E4%B8%AAiframe%E6%A1%86%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%81%94%E5%8A%A8%E4%BB%A5%E5%8F%8Aiframe%E7%AA%97%E5%8F%A3%E9%AB%98%E5%AE%BD%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://dearxiaojie.xyz/2015/05/25/两个iframe框滚动条联动以及iframe窗口高宽自适应/</id>
    <published>2015-05-25T12:03:05.000Z</published>
    <updated>2016-01-20T04:48:26.000Z</updated>
    <content type="html"><![CDATA[<p>由于iframe没有onsccoll方法，所以采用把iframe放进固定大小且带有滑动条的div中，然后先给iframe一个适合的宽度，页面加载后再让iframe窗口自适应src链接的页面。<br><a id="more"></a></p>
   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>  <span class="attr">style</span>=<span class="string">"width:620px;height:500px ; float:left;overflow:scroll"</span> <span class="attr">onscroll</span>=<span class="string">"funcsrcoll1()"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"left"</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">src</span>=<span class="string">"2.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"width:620px; height:500px ;float:left;overflow:scroll"</span> <span class="attr">onscroll</span>=<span class="string">"funcsrcoll2()"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"right"</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">src</span>=<span class="string">"3.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">//控制两个div的滚动条联动，便于页面对比</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funcsrcoll1</span>(<span class="params"></span>)</span></div><div class="line">      &#123;</div><div class="line">          div2.scrollLeft = div1.scrollLeft;</div><div class="line">          div2.scrollTop = div1.scrollTop;</div><div class="line">      &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funcsrcoll2</span>(<span class="params"></span>)</span></div><div class="line">      &#123;</div><div class="line">          div1.scrollLeft = div2.scrollLeft;</div><div class="line">          div1.scrollTop = div2.scrollTop;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//调整iframe窗口大小适应src链接的页面</span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">'iframe'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">this</span>.style.height = <span class="keyword">this</span>.contentWindow.document.body.scrollHeight+<span class="number">20</span> + <span class="string">'px'</span>;</div><div class="line">            <span class="comment">//为了显示完整，额外加了20px的宽度</span></div><div class="line">          <span class="keyword">this</span>.style.width = <span class="keyword">this</span>.contentWindow.document.body.scrollWidth+<span class="number">20</span> + <span class="string">'px'</span>;</div><div class="line">      &#125;);    </div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>由于iframe没有onsccoll方法，所以采用把iframe放进固定大小且带有滑动条的div中，然后先给iframe一个适合的宽度，页面加载后再让iframe窗口自适应src链接的页面。<br>]]>
    
    </summary>
    
      <category term="iframe" scheme="http://dearxiaojie.xyz/tags/iframe/"/>
    
      <category term="scroll" scheme="http://dearxiaojie.xyz/tags/scroll/"/>
    
      <category term="前端积累" scheme="http://dearxiaojie.xyz/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高性能JavaScript]]></title>
    <link href="http://dearxiaojie.xyz/2015/05/24/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript/"/>
    <id>http://dearxiaojie.xyz/2015/05/24/高性能JavaScript/</id>
    <published>2015-05-24T11:12:54.000Z</published>
    <updated>2016-01-20T04:48:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="javascript加载和运行">javascript加载和运行</h2><h3 id="脚本位置">脚本位置</h3><p>尽管浏览器已经允许并行下载javascript文件，但是javascript下载过程仍然会阻塞其他资源的下载，如图片。页面仍然需要等待所有javascript代码下载并执行完成才能继续所以优化javascript的首要原则：将脚本放在底部（<code>&lt;/body&gt;</code>之前)</p>
<h3 id="组织脚本">组织脚本</h3><p>每个<code>&lt;script&gt;</code>标签初始下载都会阻塞页面渲染，所以减少页面包含的<code>&lt;script&gt;</code>标签数量有助于改善这一情况。考虑到到HTTP请求会额外带来性能的开销。下载单个100B的文件比下载4个25B的文件更快。所以，减少页面中外链脚本文件的数量会改善性能。</p>
<a id="more"></a>
<h3 id="无阻塞的脚本">无阻塞的脚本</h3><ul>
<li>延迟的脚本：带有defer属性的<code>&lt;script&gt;</code>标签，需要浏览器支持</li>
<li>动态脚本元素:在跨浏览器兼容性和易用的优势，是最通用的无阻塞加载解决方案</li>
<li><p>XMLHttpRequest注入：先创建一个XHR对象，然后用她下载javascript文件，最后通过创建动态<code>&lt;script&gt;</code>元素将代码注入页面中</p>
 <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"file.js"</span>,<span class="keyword">true</span>);</div><div class="line">xhr.onreadystatechange = funtion()&#123;</div><div class="line">     <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>||xhr.status==<span class="number">304</span>)&#123;</div><div class="line">               <span class="keyword">var</span> script = <span class="built_in">document</span>.creatElement(<span class="string">"script"</span>);</div><div class="line">               script.type=<span class="string">"text/javascript"</span>;</div><div class="line">               script.text=xhr.responseText;</div><div class="line">               <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">               &#125;</div><div class="line">          &#125;    </div><div class="line">&#125;;</div><div class="line">xhr.send(<span class="keyword">null</span>);</div><div class="line"><span class="comment">//由于代码是在&lt;script&gt;标签之前返回的，因此它下载后不会自动执行。</span></div><div class="line"><span class="comment">//同样的代码在所有主流浏览器中无一例外都能正常工作</span></div><div class="line"><span class="comment">//局限性在于：javascript文件必须与请求的页面处于相同的域，即javascript不能从CDN下载</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="无阻塞脚本加载工具">无阻塞脚本加载工具</h3><p>lazyLoad类库、LABjs等等</p>
<h2 id="管理作用域">管理作用域</h2><h3 id="作用域链和标识符解析">作用域链和标识符解析</h3><p>在函数执行的过程中，没遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取或存储数据。该过程搜索运行期上下文的作用域链，查找同名的标识符。搜索过程从作用域链头部开始也就是当前运行函数的活动对象，如果找到了，就使用这个标示符对应的变量；如果没有找到，继续搜索作用域链中的下一个对象，直到标识符被找到，或者没有可用于搜索的对象为止，这种情况下标识符被认为是未定义的。正是这个搜索过程影响了性能。</p>
<h3 id="标识符解析的性能">标识符解析的性能</h3><p>一个标识符所在的位置越深，他的读写速度就越慢，因此读写局部变量总是最快的，而读写全局变量通常是最慢的。全局变量总是存在于运行期上下文作用域链的最末端，因此是最远的。在没有优化javascript引擎的浏览器中，尽量使用局部变量，如果某个跨作用域的值在函数中被引用了多次，就把他存储到局部变量里。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>,</div><div class="line">      bd = doc.body,</div><div class="line">      links = doc.getElementByTagName(<span class="string">'a'</span>);</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">      len = links.length;</div><div class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">      update(links[i++]);</div><div class="line">  &#125;</div><div class="line">  doc.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      start();</div><div class="line">  &#125;;</div><div class="line">     bd.className = <span class="string">'active'</span></div><div class="line">&#125;</div><div class="line">    <span class="comment">//首先将document对象引用存储到局部变量doc中，全局变量的访问减少，当有很多全局变量</span></div><div class="line">    <span class="comment">//被反复访问时，这种方法对性能的改善是很明显的。</span></div></pre></td></tr></table></figure>
<h3 id="闭包，作用域和内存">闭包，作用域和内存</h3><p>将常用的跨作用域变量存储在局部变量中，然后访问局部变量嵌套的对象成员会明显影响性能，尽量少用<br>通常来说，把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善javascript性能，因为局部变量访问速度更快。</p>
<p>DOM</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHtml1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">15000</span>;i++)&#123;</div><div class="line">     <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML+=<span class="string">'a'</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHtml2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">15000</span>;i++)&#123;</div><div class="line">     html+=<span class="string">'a'</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML = html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>initHtml1()比initHtml2()速度慢很多，initHtml2()使用局部变量存储更新后的内容，减少了DOM访问，因此，减少DOM访问次数，讲运算尽量留在ECMAScript这端处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="javascript加载和运行">javascript加载和运行</h2><h3 id="脚本位置">脚本位置</h3><p>尽管浏览器已经允许并行下载javascript文件，但是javascript下载过程仍然会阻塞其他资源的下载，如图片。页面仍然需要等待所有javascript代码下载并执行完成才能继续所以优化javascript的首要原则：将脚本放在底部（<code>&lt;/body&gt;</code>之前)</p>
<h3 id="组织脚本">组织脚本</h3><p>每个<code>&lt;script&gt;</code>标签初始下载都会阻塞页面渲染，所以减少页面包含的<code>&lt;script&gt;</code>标签数量有助于改善这一情况。考虑到到HTTP请求会额外带来性能的开销。下载单个100B的文件比下载4个25B的文件更快。所以，减少页面中外链脚本文件的数量会改善性能。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://dearxiaojie.xyz/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://dearxiaojie.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="学习笔记" scheme="http://dearxiaojie.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
