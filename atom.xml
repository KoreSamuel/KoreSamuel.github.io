<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KoreSamuel</title>
  
  <subtitle>我们泪流满面，步步回头，却只能向前走。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dearxiaojie.top/"/>
  <updated>2020-05-24T10:11:29.179Z</updated>
  <id>http://dearxiaojie.top/</id>
  
  <author>
    <name>koresamuel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我也要立Flag了</title>
    <link href="http://dearxiaojie.top/article/2020-05-24-%E6%88%91%E4%B9%9F%E8%A6%81%E7%AB%8BFlag%E4%BA%86.html"/>
    <id>http://dearxiaojie.top/article/2020-05-24-%E6%88%91%E4%B9%9F%E8%A6%81%E7%AB%8BFlag%E4%BA%86.html</id>
    <published>2020-05-24T09:32:46.000Z</published>
    <updated>2020-05-24T10:11:29.179Z</updated>
    
    <content type="html"><![CDATA[<p>今日得空(平时也不忙，就是懒)打开了之前用hexo创建的博客代码仓库，同时也打开博客页面看着之前写过的一些博客。这都写的是些啥呀，于是把一些面试笔记和流水账式的年终终结删掉了。</p><p>仔细一想，好像换到目前这份工作之后，就没有更新博客了，哪怕是一篇很简单的bug总结也没有。究其主要原因，还是太懒。不愿意去记录，觉得一些东西没有记录的必要，跟各种大佬的技术博客和公众号文章差的太远(如果只是简单的写点东西而没有深入的研究和一些自己的思考，那岂不是暴露了自己的水平，哈哈哈~)。但从百度统计访问量来看，我想多了。博客基本没有啥访问量，可能还不如在掘金，思否，或者一些其他博客系统中发布的文章有点击率。</p><p>浏览器装了掘金插件的原因，每天打开浏览器首先看到的就是一篇篇的面经，一篇篇的十分钟速成xxxx或者又是深入理解xxxx。有时候会被一些标题党文章所吸引，点进去确实大失所望。有时候点开一些文章觉得深度还不错，然后看了作者信息，人家也才毕业一两年。我当然有理由安慰自己，毕业前两年工作压力没那么大，精神状态好，能熬夜，敢说敢写。</p><p>我好像又在记流水账了。（不管了，我的博客，我记流水账怎么了）</p><p>怎么说呢，就是有点感触。做了那么久的前端，好像还没有系统的整理过学过的东西。所以想着接下来开始整理一些东西，比如javascript里的作用域、原型链、闭包，比如息息相关的浏览器环境，比如性能优化，比如前端工程化相关的东西等等。这些东西提到都能说一些，但要我系统的或者有条理的一条一条的罗列出来讲清楚，目前还是有点困难。也就是一些零散的知识没有形成线条、网络、系统，没有去深挖和思考他们之间的联系。</p><p>当然，也不是心血来潮说写就写。首先我应该列一份知识架构图，然后再去各个击破。所以，六月开始，保证一月能有至少四篇整理文章产出吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日得空(平时也不忙，就是懒)打开了之前用hexo创建的博客代码仓库，同时也打开博客页面看着之前写过的一些博客。这都写的是些啥呀，于是把一些面试笔记和流水账式的年终终结删掉了。&lt;/p&gt;
&lt;p&gt;仔细一想，好像换到目前这份工作之后，就没有更新博客了，哪怕是一篇很简单的bug总结
      
    
    </summary>
    
    
      <category term="Flag" scheme="http://dearxiaojie.top/category/Flag/"/>
    
    
  </entry>
  
  <entry>
    <title>我的 mac 常用软件</title>
    <link href="http://dearxiaojie.top/article/2018-09-11-my-mac-config.html"/>
    <id>http://dearxiaojie.top/article/2018-09-11-my-mac-config.html</id>
    <published>2018-09-11T02:37:09.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a></li><li><a href="https://www.google.com/chrome/" target="_blank" rel="noopener">chrome 浏览器</a></li><li><a href="https://robomongo.org/" target="_blank" rel="noopener">Robo 3T</a></li><li><a href="http://xclient.info/s/charles.html?t=2c5f238779ee02ff6e1b5cda873deeacaeabc304" target="_blank" rel="noopener">Charles</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">小程序开发工具</a></li><li>mongodb</li><li>…<a id="more"></a></li></ul><h3 id="chrome-插件"><a href="#chrome-插件" class="headerlink" title="chrome 插件"></a>chrome 插件</h3><ul><li><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener">Adblock Plus</a> Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。</li><li><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc" target="_blank" rel="noopener">JSONView</a> Validate and view JSON documents</li><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">Octotree</a> Code tree for GitHub</li><li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">React Developer Tools</a> Adds React debugging tools to the Chrome Developer Tools.</li><li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">Redux DevTools</a> Redux DevTools for debugging application’s state changes.</li><li><a href="https://chrome.google.com/webstore/detail/session-manager/mghenlmbmjcpehccoangkdpagbcbkdpc" target="_blank" rel="noopener">session manager</a> Simple yet powerful tab set management. Quickly and easily save, update, remove, and restore sets of tabs!</li><li><a href="https://chrome.google.com/webstore/detail/smart-toc/lifgeihcfpkmmlfjbailfpfhbahhibba" target="_blank" rel="noopener">Smart TOC</a> Add a table of contents for web article or documentation</li><li><a href="https://chrome.google.com/webstore/detail/smartup-gestures/bgjfekefhjemchdeigphccilhncnjldn" target="_blank" rel="noopener">smartUp 手势</a> 一个更好的手势类扩展。功能包括：鼠标手势，简易拖曳，超级拖曳，摇杆手势和滚轮手势。</li><li><a href="https://chrome.google.com/webstore/detail/the-qr-code-extension/oijdcdmnjjgnnhgljmhkjlablaejfeeb" target="_blank" rel="noopener">The QR code extension</a> 允许当前页面生成 QR 码，并使用网络摄像头扫描 QR 码。</li><li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">vuejs devtools</a> Chrome and Firefox DevTools extension for debugging Vue.js applications.</li><li><a href="https://chrome.google.com/webstore/detail/%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8chrome%E5%88%92%E8%AF%8D%E6%8F%92%E4%BB%B6/eopjamdnofihpioajgfdikhhbobonhbb" target="_blank" rel="noopener">youdao 划词翻译</a> 支持 Chrome 浏览器的划词翻译</li><li><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll" target="_blank" rel="noopener">简阅 SimpRead</a> 让你瞬间进入沉浸式阅读的 Chrome 扩展，类似 Safari 的阅读模式。</li><li>…</li></ul><h3 id="chrome-app"><a href="#chrome-app" class="headerlink" title="chrome app"></a>chrome app</h3><ul><li><a href="https://chrome.google.com/webstore/detail/marmoset/npkfpddkpefnmkflhhligbkofhnafieb" target="_blank" rel="noopener">Marmoset</a> Marmoset is a Chrome App which lets you create gorgeous code snapshots within seconds.</li><li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=zh-CN" target="_blank" rel="noopener">Postman</a> Postman makes API development faster, easier, and better.</li><li><a href="https://chrome.google.com/webstore/detail/tamper-chrome-extension/hifhgpdkfodlpnlmlnmhchnkepplebkb" target="_blank" rel="noopener">Tamper Chrome</a> Intercept and modify Chrome requests</li><li><a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb" target="_blank" rel="noopener">Web Server for Chrome</a> A Web Server for Chrome, serves web pages from a local folder over the network, using HTTP. Runs offline.</li><li>…</li></ul><h3 id="vscode-插件"><a href="#vscode-插件" class="headerlink" title="vscode 插件"></a>vscode 插件</h3><ul><li>Better Comments</li><li>Debugger for Chrome</li><li>Import Cost</li><li>open in browser</li><li>vetur</li><li>VS Live Share</li><li>Cobalt2 Theme Official</li><li>Code Runner</li><li>GitLens — Git supercharged</li><li>Custom CSS and JS Loader</li></ul><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><ul><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">item2</a></li><li><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a></li><li><a href="https://github.com/KoreSamuel/.tmux" target="_blank" rel="noopener">tmux</a></li><li>…</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.6.1/ShadowsocksX-NG.1.6.1.zip" target="_blank" rel="noopener">ShadowsocksX-NG</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></li><li><a href="http://nvm.sh/" target="_blank" rel="noopener">nvm</a></li><li>…</li></ul><h3 id="npm-常用包"><a href="#npm-常用包" class="headerlink" title="npm 常用包"></a>npm 常用包</h3><ul><li>anywhere 随地启动一个<code>local http server</code></li><li>npm-check 检查项目中的 npm 包是否有新的版本，并可以选择更新</li><li>nrm npm 源管理，方便切换</li><li>ntl npm task list, 快速查看<code>package.json</code>可执行的<code>script</code>命令</li><li>yarn 快速依赖管理</li><li>hexo-cli hexo 博客 cli</li><li>pm2 node 进程管理</li><li>wepy-cli 小程序开发框架</li><li>…</li></ul><h2 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h2><ul><li><a href="https://weixin.qq.com/cgi-bin/readtemplate?t=mac&lang=zh_CN" target="_blank" rel="noopener">WeChat</a></li><li><a href="https://im.qq.com/macqq/" target="_blank" rel="noopener">QQ</a></li><li><a href="http://xclient.info/s/office-for-mac.html?t=2c5f238779ee02ff6e1b5cda873deeacaeabc304#versions" target="_blank" rel="noopener">Microsoft Office</a></li><li><a href="http://xclient.info/s/wondershare-video-converter-ultimate.html?t=2c5f238779ee02ff6e1b5cda873deeacaeabc304#versions" target="_blank" rel="noopener">Wondershare Video Converter Ultimate</a> 万能视频格式转换器，可以将包括 MP4、MOV 、3GP、AVI、WMV、RM、MPEG-1、MPEG-2、FLV、ASF、M4A、WMA、WAV、MP3、AAC 和 AC3 在内的多媒体格式转换为便携式视频/音频播放器（Zune、iPod、Apple TV、iPhone、PSP）支持的格式,且不会失去原有的品质。</li><li><a href="http://xclient.info/s/alfred.html?t=2c5f238779ee02ff6e1b5cda873deeacaeabc304" target="_blank" rel="noopener">Alfed</a> 效率工具，如查字典、打开书签、搜索文件、打开文件等</li><li><a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a></li><li><a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">LICEcap</a> gif 录制工具</li><li><a href="https://evernote.com/intl/zh-cn/download" target="_blank" rel="noopener">Evernote</a></li><li><a href="https://music.163.com/#/download" target="_blank" rel="noopener">网易云音乐</a></li><li><a href="https://support.apple.com/zh-cn/keynote" target="_blank" rel="noopener">keynote</a> 一个演示幻灯片应用软件</li><li>…</li></ul><h3 id="usersetting-json"><a href="#usersetting-json" class="headerlink" title="usersetting.json"></a>usersetting.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"workbench.iconTheme"</span>: <span class="string">"material-icon-theme"</span>,</span><br><span class="line">  <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Cobalt2"</span>,</span><br><span class="line">  <span class="attr">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">    <span class="attr">"suppressCommitHasNoPreviousCommitWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressCommitNotFoundWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressFileNotUnderSourceControlWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressGitVersionWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressLineUncommittedWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressNoRepositoryWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressResultsExplorerNotice"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"suppressShowKeyBindingsNotice"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"terminal.integrated.cursorBlinking"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"extensions.ignoreRecommendations"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"terminal.integrated.fontFamily"</span>: <span class="string">"Inconsolata for Powerline"</span>,</span><br><span class="line">  <span class="attr">"editor.fontFamily"</span>: <span class="string">"Monaco"</span>,</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"editor.lineHeight"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">"editor.letterSpacing"</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">"files.trimTrailingWhitespace"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.fontWeight"</span>: <span class="string">"400"</span>,</span><br><span class="line">  <span class="attr">"editor.cursorStyle"</span>: <span class="string">"line"</span>,</span><br><span class="line">  <span class="attr">"editor.cursorWidth"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"editor.cursorBlinking"</span>: <span class="string">"blink"</span>,</span><br><span class="line">  <span class="attr">"vscode_custom_css.imports"</span>: [<span class="string">"file:///User/xiaojie/.vscodestyles.css"</span>],</span><br><span class="line">  <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="attr">"window.zoomLevel"</span>: <span class="number">-2</span>,</span><br><span class="line">  <span class="attr">"gitlens.historyExplorer.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">  <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"javascript.updateImportsOnFileMove.enabled"</span>: <span class="string">"always"</span>,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"editor.detectIndentation"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"files.autoSave"</span>: <span class="string">"off"</span>,</span><br><span class="line">  <span class="attr">"breadcrumbs.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.renderControlCharacters"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"gitlens.gitExplorer.files.layout"</span>: <span class="string">"list"</span>,</span><br><span class="line">  <span class="attr">"better-comments.highlightPlainText"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.wpy"</span>: <span class="string">"vue"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vscodestyles-css"><a href="#vscodestyles-css" class="headerlink" title=".vscodestyles.css"></a>.vscodestyles.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.monaco-shell</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Operator Mono'</span>, <span class="string">'Inconsolata'</span>, monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This makes the dirty tab circle yellow */</span></span><br><span class="line"><span class="selector-class">.vs-dark</span></span><br><span class="line">  <span class="selector-class">.monaco-workbench</span></span><br><span class="line">  &gt; <span class="selector-class">.part</span><span class="selector-class">.editor</span></span><br><span class="line">  &gt; <span class="selector-class">.content</span></span><br><span class="line">  &gt; <span class="selector-class">.one-editor-silo</span></span><br><span class="line">  &gt; <span class="selector-class">.container</span></span><br><span class="line">  &gt; <span class="selector-class">.title</span></span><br><span class="line">  <span class="selector-class">.tabs-container</span></span><br><span class="line">  &gt; <span class="selector-class">.tab</span><span class="selector-class">.dirty</span></span><br><span class="line">  <span class="selector-class">.close-editor-action</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' height='16' width='16'%3E%3Ccircle fill='%23ffc600' cx='8' cy='8' r='4'/%3E%3C/svg%3E"</span>)</span><br><span class="line">    <span class="number">50%</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.monaco-workbench</span> &gt; <span class="selector-class">.editor</span> &gt; <span class="selector-class">.content</span> &gt; <span class="selector-class">.one-editor-silo</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#15232d</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one-editor-silo</span> + <span class="selector-class">.one-editor-silo</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#15232d</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This puts a thin yellow border around the found items like Sublime did it</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.monaco-editor</span> <span class="selector-class">.findMatch</span>,</span><br><span class="line"><span class="selector-class">.monaco-editor</span> <span class="selector-class">.selectionHighlight</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This accounts for larger font cutting off - bump up 3px */</span></span><br><span class="line"><span class="selector-class">.monaco-workbench</span></span><br><span class="line">  &gt; <span class="selector-class">.activitybar</span></span><br><span class="line">  &gt; <span class="selector-class">.content</span></span><br><span class="line">  <span class="selector-class">.monaco-action-bar</span></span><br><span class="line">  <span class="selector-class">.badge</span></span><br><span class="line">  <span class="selector-class">.badge-content</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">17px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;开发&quot;&gt;&lt;/a&gt;开发&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/chrome/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;chrome 浏览器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://robomongo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Robo 3T&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xclient.info/s/charles.html?t=2c5f238779ee02ff6e1b5cda873deeacaeabc304&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Charles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小程序开发工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;…
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用git-cherry-pick</title>
    <link href="http://dearxiaojie.top/article/2018-07-05-git-cherry-pick.html"/>
    <id>http://dearxiaojie.top/article/2018-07-05-git-cherry-pick.html</id>
    <published>2018-07-05T06:44:02.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个项目中可能有多个功能并行开发着，开发完的代码通常就合到 develop 分支进行测试，即测试环境中会有多个功能在测试，而先后进入测试并不一定先后上线，很有可能因为某些原因，先开发的功能需要延期上线，后开发的功能测试完后得先上线。这时候需要将后开发的功能代码抽出来，<code>git cherry-pick</code>就派上用场</p>  <a id="more"></a><h2 id="什么是-cherry-pick"><a href="#什么是-cherry-pick" class="headerlink" title="什么是 cherry-pick"></a>什么是 cherry-pick</h2><p><code>cherry-pick</code>是 git 中的一个命令，像<code>pull，push，commit</code>一样。<br>它可以用于将在其他分支上的 <code>commit</code> 修改，移植到当前的分支。<br>如之前所说场景，就可以使用 <code>cherry-pick</code> 命令，将这个功能相关的 <code>commit</code> 提取出来，合入稳定版本的分支上。</p><h2 id="如何使用-cherry-pick"><a href="#如何使用-cherry-pick" class="headerlink" title="如何使用 cherry-pick"></a>如何使用 cherry-pick</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]</span><br><span class="line">      [-S[&lt;keyid&gt;]] &lt;commit&gt;…​</span><br><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br><span class="line">git cherry-pick --quit</span><br><span class="line">git cherry-pick --abort</span><br></pre></td></tr></table></figure><p>常用的使用方式是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit-id</span><br></pre></td></tr></table></figure><p>执行 <code>git log --graph --oneline --all</code>可以看到类似下面的 log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* f07407f (origin/develop, develop) feat: 这是第三个功能</span><br><span class="line">* 948fa63 feat: 这是第二个功能</span><br><span class="line">* ba09a70 feat: 这是第一个功能</span><br><span class="line">* e6d4aef (HEAD -&gt; master, origin/master, origin/HEAD) Initial commit</span><br></pre></td></tr></table></figure><p>如果我们需要将<code>第二个功能</code>摘取出来，即<code>commit-id</code>为<code>948fa63</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 948fa630</span><br></pre></td></tr></table></figure><p>执行完之后会产生一个新的 commitid,如果遇到有冲突，<code>git diff</code>或者用<code>diff</code>工具修改就行，顺利的话就可以正常提交了。<br>此时执行 <code>git log --graph --oneline --all</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 762491f (HEAD -&gt; develop, origin/develop) feat: 这是第二个功能</span><br><span class="line">* f07407f feat: 这是第三个功能</span><br><span class="line">* 948fa63 feat: 这是第二个功能</span><br><span class="line">* ba09a70 feat: 这是第一个功能</span><br><span class="line">* e6d4aef (origin/master, origin/HEAD, master) Initial commit</span><br></pre></td></tr></table></figure><p>而当前的代码也是<code>第二个功能</code>时的代码。<br>这时候 <code>第三个功能</code>也要上线了,那就将它也摘出来吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick -x f07407f</span><br></pre></td></tr></table></figure><p>上面命令多了 <code>-x</code> 参数，这是更高级一点的用法，表示保留原提交的作者信息进行提交。<br>当然，如果需要摘出多个<code>commit-id</code>,首先可以重复执行<code>git cherry-pick</code>，另外可以使用下面的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;start-commit-id&gt;&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure><p>它的范围就是 <code>start-commit-id</code> 到 <code>end-commit-id</code> 之间所有的 <code>commit-id</code>，但是它这是一个 (前开 ，后闭] 的区间，也就是说，它将不会包含 <code>start-commit-id</code> 的 <code>commit-id</code>。<br>而如果想要包含 <code>start-commit-id</code> 的话，就需要使用 <code>^</code> 标记一下，就会变成一个 [前闭，后闭] 的区间</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/docs/git-cherry-pick" target="_blank" rel="noopener">https://git-scm.com/docs/git-cherry-pick</a></li><li><a href="https://www.codementor.io/olatundegaruba/how-to-git-cherry-pick-dyrp9pnmc" target="_blank" rel="noopener">Understanding Git Cherry-pick: How to Use</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在一个项目中可能有多个功能并行开发着，开发完的代码通常就合到 develop 分支进行测试，即测试环境中会有多个功能在测试，而先后进入测试并不一定先后上线，很有可能因为某些原因，先开发的功能需要延期上线，后开发的功能测试完后得先上线。这时候需要将后开发的功能代码抽出来，&lt;code&gt;git cherry-pick&lt;/code&gt;就派上用场&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://dearxiaojie.top/tag/git/"/>
    
  </entry>
  
  <entry>
    <title>javascirpt常用函数实现</title>
    <link href="http://dearxiaojie.top/article/2018-07-03-javascirpt-common-method.html"/>
    <id>http://dearxiaojie.top/article/2018-07-03-javascirpt-common-method.html</id>
    <published>2018-07-03T12:02:30.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>随手记录点好玩的东西</p><h3 id="实现一个-sleep-函数"><a href="#实现一个-sleep-函数" class="headerlink" title="实现一个 sleep 函数"></a>实现一个 sleep 函数</h3>  <a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">sleep(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(t2 - t1); <span class="comment">// 1005</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//await/async</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ts = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(t2 - t1);</span><br><span class="line">&#125;;</span><br><span class="line">ts(); <span class="comment">// 1001</span></span><br></pre></td></tr></table></figure><p>在社区能找到一个<a href="https://github.com/erikdubbelboer/node-sleep" target="_blank" rel="noopener">https://github.com/erikdubbelboer/node-sleep</a>,不过需要安装才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="built_in">require</span>(<span class="string">'sleep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">sleep.msleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(t2 - t1); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双重循环</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rst = [];</span><br><span class="line">  <span class="keyword">let</span> i, j, len, lens;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>, lens = rst.length; j &lt; lens; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === rst[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    lens === j &amp;&amp; rst.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rst;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">//[ 1, 2, 3, '4' ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter/indexOf</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">// [ 1, 2, 3, '4' ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce 类似hash</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, cur, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !acc.includes(cur) &amp;&amp; acc.push(cur), acc;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> hash = &#123;&#125;,</span><br><span class="line">    rst = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (!hash[cur]) &#123;</span><br><span class="line">      rst.push(cur);</span><br><span class="line">      hash[cur] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rst;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">// [ 1, 2, 3, '4' ]</span></span><br></pre></td></tr></table></figure><p>但是如果数组元素不限于 <code>Number</code> 和 <code>String</code> 类型，为了保证 <code>hash key</code> 的唯一性，我们可以传递一个 <code>hasher</code> 函数处理 <code>key</code>。如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> arrs = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="string">'false'</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ming'</span> &#125;,</span><br><span class="line">  <span class="string">'4'</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ming'</span> &#125;,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> unique = <span class="function">(<span class="params">arr, hasher</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认使用JSON.stringify,不过对于Function不适用，可传入其他处理方式</span></span><br><span class="line">  hasher = hasher || <span class="built_in">JSON</span>.stringify;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rst = [],</span><br><span class="line">    hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = arr[i];</span><br><span class="line">    <span class="keyword">let</span> hashkey = hasher(cur);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hash[hashkey]) &#123;</span><br><span class="line">      rst.push(cur);</span><br><span class="line">      hash[hashkey] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rst;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">// [ 1, 2, 3, '4' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(unique(arrs)); <span class="comment">// [ 1, false, 'false', 2, &#123; name: 'ming' &#125;, '4' ]</span></span><br></pre></td></tr></table></figure><p>当然啦，还有最终极的版本，那就是<code>ES6</code>提供的<code>Set</code>.不过处理的  数据类型也是有限的，可以按情况选择  哪种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> arrs = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="string">'false'</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ming'</span> &#125;,</span><br><span class="line">  <span class="string">'4'</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ming'</span> &#125;,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">// [ 1, 2, 3, '4' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(unique(arrs)); <span class="comment">// [ 1, false, 'false', 2, &#123; name: 'ming' &#125;, '4', &#123; name: 'ming' &#125; ] 不符合预期</span></span><br></pre></td></tr></table></figure><h3 id="array-like-转成-array"><a href="#array-like-转成-array" class="headerlink" title="array-like 转成 array"></a>array-like 转成 array</h3><p>所谓<code>array-like</code>就是按照数组下标排序的对象，有<code>length</code>属性，如<code>{0: &#39;aa&#39;, 1: &#39;bb&#39;, 2: &#39;cc&#39;, length: 3}</code>;</p><p>将函数参数<code>arguments</code>转换成数组，常见的处理方式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// [ 'aa', 'bb', 'cc' ]</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> arr = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// [ 'aa', 'bb', 'cc' ]</span></span><br></pre></td></tr></table></figure><p>至于上面两种方式的区别，可以查看<a href="https://www.zhihu.com/question/46724226" target="_blank" rel="noopener">js 中 [].slice 与 Array.prototype.slice 有什么区别?</a>了解<br>使用<code>ES6</code>之后，可以有另外两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// and</span></span><br><span class="line"><span class="keyword">const</span> arr = [...arguments]; <span class="comment">// 适用于arguments</span></span><br></pre></td></tr></table></figure><h3 id="用数组-reduce-方法实现-map"><a href="#用数组-reduce-方法实现-map" class="headerlink" title="用数组 reduce 方法实现 map"></a>用数组 reduce 方法实现 map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map2 = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, curr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    prev.push(callback(acc, index));</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> testarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> aftermap2 = testarr.map2(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [index + <span class="string">'-'</span> + item]: item</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(aftermap2);</span><br><span class="line"><span class="comment">//[&#123;"0-1":1&#125;,&#123;"1-2":2&#125;,&#123;"2-23":23&#125;,&#123;"3-4":4&#125;,&#123;"4-5":5&#125;,&#123;"5-5":5&#125;]</span></span><br><span class="line"><span class="comment">// 实现filter同理</span></span><br></pre></td></tr></table></figure><h3 id="防抖函数-debounce-的实现"><a href="#防抖函数-debounce-的实现" class="headerlink" title=" 防抖函数 debounce 的实现"></a> 防抖函数 debounce 的实现</h3><blockquote><p>多次触发事件，在事件触发 n 秒后执行，如果在一个事件触发的 n 秒内又触发这个事件，那就以新的事件事件为准，继续等 n 秒后执行。常见 window 的 resise，scroll，mousemove 等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一版， 最简版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(fn, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二版，处理this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="keyword">this</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(ctx);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三版 event对象，</span></span><br><span class="line"><span class="comment">// 在事件处理函数中会提供事件对象event，如果不传，获取会是undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(ctx, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扁平化，实现一个-flatten-函数"><a href="#数组扁平化，实现一个-flatten-函数" class="headerlink" title="数组扁平化，实现一个 flatten 函数"></a>数组扁平化，实现一个 flatten 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  [].concat(...arr.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item)));</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>], [[<span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr)); <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// reduce</span></span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc.concat(<span class="built_in">Array</span>.isArray(cur) ? flatten(cur) : cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 还有个骚操作</span></span><br><span class="line"><span class="comment">// 不过这个方式会存在问题，比如[1, 2, '3', [2, 3]]</span></span><br><span class="line"><span class="comment">// 含有Number和String，处理后不能区分</span></span><br><span class="line"><span class="comment">// 具体查看[Array.prototype.toString()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)</span></span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">','</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> +item);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现一个-new-函数"><a href="#实现一个-new-函数" class="headerlink" title="实现一个 new 函数"></a>实现一个 new 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// 1.创建一个对象；</span></span><br><span class="line">  <span class="keyword">let</span> cons = [...arguments].shift(); <span class="comment">// 2. 获取构造函数</span></span><br><span class="line">  a.__proto__ = cons.prototype; <span class="comment">// 3. 链接到原型</span></span><br><span class="line">  <span class="keyword">let</span> rst = cons.call(a, <span class="built_in">arguments</span>); <span class="comment">// 4. 绑定this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> rst === <span class="string">'object'</span> ? rst : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>待续</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随手记录点好玩的东西&lt;/p&gt;
&lt;h3 id=&quot;实现一个-sleep-函数&quot;&gt;&lt;a href=&quot;#实现一个-sleep-函数&quot; class=&quot;headerlink&quot; title=&quot;实现一个 sleep 函数&quot;&gt;&lt;/a&gt;实现一个 sleep 函数&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go-practice-follow-offical-tour</title>
    <link href="http://dearxiaojie.top/article/2018-06-15-go-practice-follow-offical-tour.html"/>
    <id>http://dearxiaojie.top/article/2018-06-15-go-practice-follow-offical-tour.html</id>
    <published>2018-06-15T09:37:50.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 go 相关的东西，以下为<a href="https://tour.go-zh.org/welcome/1" target="_blank" rel="noopener">Go 官方指南</a>中的练习记录</p><ol><li>循环与函数<br>实现一个平方根函数：用<a href="https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95" target="_blank" rel="noopener">牛顿法</a>实现平方根函数  <a id="more"></a></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    z := x / <span class="number">2</span></span><br><span class="line">    cnt := <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> cnt &gt; <span class="number">0</span> &#123;</span><br><span class="line">        z -= (z * z - x) / (<span class="number">2</span> * z)</span><br><span class="line">        cnt = cnt - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sqrt(<span class="number">3</span>)) <span class="comment">// 1.7320508075688772</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>切片<br>实现 Pic。它应当返回一个长度为 dy 的切片，其中每个元素是一个长度为 dx，元素类型为 uint8 的切片。<br>当你运行此程序时，它会将每个整数解释为灰度值（好吧，其实是蓝度值）并显示它所对应的图像</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/pic"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="keyword">int</span>)</span> [][]<span class="title">uint8</span></span> &#123;</span><br><span class="line">    pic := <span class="built_in">make</span>([][]<span class="keyword">uint8</span>, dy*dx)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; dy; i++ &#123;</span><br><span class="line">        in := <span class="built_in">make</span>([]<span class="keyword">uint8</span>, dx)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; dx; j++ &#123;</span><br><span class="line">            in[j] = <span class="keyword">uint8</span>(<span class="number">1</span> &lt;&lt; <span class="keyword">uint8</span>(j%<span class="number">8</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        pic[i] = in</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pic.Show(Pic)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>映射<br>实现 WordCount。它应当返回一个映射，其中包含字符串 s 中每个“单词”的个数。函数 wc.Test 会对此函数执行一系列测试用例，并输出成功还是失败</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"golang.org/x/tour/wc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">    field := strings.Fields(s)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(field); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> m[field[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            m[field[i]] = m[field[i]] + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m[field[i]] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">func main() &#123;</span></span><br><span class="line"><span class="comment">    wc.Test(WordCount)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f("I am learning Go!") =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;"I":1, "am":1, "learning":1, "Go!":1&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f("The quick brown fox jumped over the lazy dog.") =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;"dog.":1, "The":1, "fox":1, "over":1, "the":1, "quick":1, "brown":1, "jumped":1, "lazy":1&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f("I ate a donut. Then I ate another donut.") =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;"another":1, "I":2, "ate":2, "a":1, "donut.":2, "Then":1&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f("A man a plan a canal panama.") =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;"plan":1, "canal":1, "panama.":1, "A":1, "man":1, "a":2&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="4"><li>斐波纳契闭包<br>实现一个 fibonacci 函数，它返回一个函数（闭包），该闭包返回一个<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波纳契数列</a> <code>(0, 1, 1, 2, 3, 5, ...)</code>。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    a, b, c := <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">-1</span> &#123;</span><br><span class="line">            a = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">0</span> &#123;</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c = a + b</span><br><span class="line">            b = a</span><br><span class="line">            a = c</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(f())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34</span></span><br></pre></td></tr></table></figure><!-- next start https://tour.go-zh.org/methods/9 --><ol start="5"><li>Stringer<br>通过让 IPAddr 类型实现 fmt.Stringer 来打印点号分隔的地址。<br>例如，IPAddr{1, 2, 3, 4} 应当打印为 “1.2.3.4”。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> ip &#123;</span><br><span class="line">        result += fmt.Sprintf(<span class="string">"%v"</span>, v)</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(ip) - <span class="number">1</span> &#123;</span><br><span class="line">            result += <span class="string">"."</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</span><br><span class="line">        <span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        <span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// loopback: 127.0.0.1</span></span><br><span class="line"><span class="comment">// googleDNS: 8.8.8.8</span></span><br></pre></td></tr></table></figure><p><em>note(方法与指针)</em></p><ul><li>带指针参数的函数必须接受一个指针,而以指针为接收者的方法被调用时，接收者既能为值又能为指针。</li><li>由于指针参数的函数方法有一个指针接收者，为方便起见，Go 会将语句 v.Scale(5) 解释为 (&amp;v).Scale(5)；</li><li>接受一个值作为参数的函数必须接受一个指定类型的值，而以值为接收者的方法被调用时，接收者既能为值又能为指针，方法调用 p.Abs() 会被解释为 (*p).Abs()</li><li>使用指针接收者的原因有二：<ul><li>首先，方法能够修改其接收者指向的值。</li><li>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习 go 相关的东西，以下为&lt;a href=&quot;https://tour.go-zh.org/welcome/1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go 官方指南&lt;/a&gt;中的练习记录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;循环与函数&lt;br&gt;实现一个平方根函数：用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;牛顿法&lt;/a&gt;实现平方根函数
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用JavaScript处理点九图</title>
    <link href="http://dearxiaojie.top/article/2018-01-09-use-javascript-to-handle-9-patch.html"/>
    <id>http://dearxiaojie.top/article/2018-01-09-use-javascript-to-handle-9-patch.html</id>
    <published>2018-01-09T09:56:03.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，常会将图片作为某个元素的背景图，但是背景图的大小和比例和元素有偏差，所以一般要使元素有全背景的话，只能将图片拉伸。这里不考虑<code>background-repeat</code>。最好的办法还是将图片修改为比例和元素相同以等比缩放。<br>使用微信或者 QQ 的人应该会发现聊天气泡，气泡会随着内容多少的改变而去适应它，但是并没有使气泡图片有拉伸的效果，这里就用到了<a href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch" target="_blank" rel="noopener">点九图</a></p>  <a id="more"></a><h2 id="点九图"><a href="#点九图" class="headerlink" title="点九图"></a>点九图</h2><p>关于点九图这里不做过多介绍，简单来说，它是<code>andriod</code>平台的应用软件开发里的一种特殊的图片形式，扩展名为<code>.9.png</code>。它有两个重要的特点是：四周必须要有四条一像素纯黑的线或点；左上两条线控制拉伸区，右下两条线控制内容区。<br>这里我们需要将上传的点九图片拉伸成指定的或者自适应的比例，在没有接触点九图之前根本没有任何想法，于是上<code>github</code>上找到一个在 web 端处理点九图的<a href="https://github.com/chrislondon/9-Patch-Image-for-Websites" target="_blank" rel="noopener">库</a>，将代码拉取到本地即可看到<code>demo</code>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>阅读源码发现主要使用<code>border-image</code>和用<code>canvas</code>绘制两种方式实现。首先先取出点九图左边和上边<code>1px</code>，这里以水平方向为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tempCtx, tempCanvas;</span><br><span class="line">tempCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">tempCtx = tempCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">tempCtx.drawImage(<span class="keyword">this</span>.bgImage, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> data = tempCtx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.bgImage.width, <span class="number">1</span>).data;</span><br></pre></td></tr></table></figure><p>上面的<code>data</code>存放的为只读的<code>ImageData.data</code>属性，返回<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray" target="_blank" rel="noopener"><code>Uint8ClampedArray</code></a>,描述一个一维数组，包含以 <code>RGBA</code> 顺序的数据，数据使用 <code>0</code> 至 <code>255</code>（包含）的整数表示。然后遍历这个一维数组，每<code>4</code>位一个<code>step</code>，找到可拉伸的区间数量和区域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">NinePatch.prototype.getPieces = <span class="function"><span class="keyword">function</span>(<span class="params">data, staticColor, repeatColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tempDS, tempPosition, tempWidth, tempColor, tempType;</span><br><span class="line">  <span class="keyword">var</span> tempArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  tempColor = data[<span class="number">4</span>] + <span class="string">','</span> + data[<span class="number">5</span>] + <span class="string">','</span> + data[<span class="number">6</span>] + <span class="string">','</span> + data[<span class="number">7</span>];</span><br><span class="line">  tempDS =</span><br><span class="line">    tempColor == staticColor ? <span class="string">'s'</span> : tempColor == repeatColor ? <span class="string">'r'</span> : <span class="string">'d'</span>;</span><br><span class="line">  tempPosition = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">4</span>, n = data.length - <span class="number">4</span>; i &lt; n; i += <span class="number">4</span>) &#123;</span><br><span class="line">    tempColor =</span><br><span class="line">      data[i] + <span class="string">','</span> + data[i + <span class="number">1</span>] + <span class="string">','</span> + data[i + <span class="number">2</span>] + <span class="string">','</span> + data[i + <span class="number">3</span>];</span><br><span class="line">    tempType =</span><br><span class="line">      tempColor == staticColor ? <span class="string">'s'</span> : tempColor == repeatColor ? <span class="string">'r'</span> : <span class="string">'d'</span>;</span><br><span class="line">    <span class="keyword">if</span> (tempDS != tempType) &#123;</span><br><span class="line">      <span class="comment">// box changed colors</span></span><br><span class="line">      tempWidth = i / <span class="number">4</span> - tempPosition;</span><br><span class="line">      tempArray.push(<span class="keyword">new</span> <span class="built_in">Array</span>(tempDS, tempPosition, tempWidth));</span><br><span class="line"></span><br><span class="line">      tempDS = tempType;</span><br><span class="line">      tempPosition = i / <span class="number">4</span>;</span><br><span class="line">      tempWidth = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push end</span></span><br><span class="line">  tempWidth = i / <span class="number">4</span> - tempPosition;</span><br><span class="line">  tempArray.push(<span class="keyword">new</span> <span class="built_in">Array</span>(tempDS, tempPosition, tempWidth));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tempArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的<code>getPieces</code>方法存放了可用于判断拉伸区间数量和可拉伸范围的数组。在将其传入绘制函数中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = <span class="keyword">this</span>.horizontalPieces.length; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.horizontalPieces[i][<span class="number">0</span>] == <span class="string">'s'</span>) &#123;</span><br><span class="line">    tempStaticWidth += <span class="keyword">this</span>.horizontalPieces[i][<span class="number">2</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tempDynamicCount++; <span class="comment">// 拉伸区间数量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fillWidth = (dWidth - tempStaticWidth) / tempDynamicCount; <span class="comment">// 可拉伸区间</span></span><br></pre></td></tr></table></figure><p>再将取得的水平和垂直的<code>1px</code>获取到的数组进行嵌套循环，去填充拉伸图片，这里就不贴代码了，可以查阅源码理解。</p><h2 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h2><p>找到的这种方式只能将图片进行放大，如果点九图比需要预览的图大，那就不适用了，还有个新问题是，点九图的宽或高跟预览图相比，有个的值大，有一个的值小，如：W 点九 &gt; W 预览，H 点九 &lt; H 预览。这种情景也不适用，所以考虑处理点九图。<br>这里只说最终的解决办法，当点九图的宽或高其中一个大于预览图的对应值时，将对应边缩小到预览图的值，再将另一边等比缩小，产生新的点九图片，这样新的点九图肯定比预览图小，可以正常拉伸了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  <span class="keyword">this</span>.div.offsetWidth &lt; <span class="keyword">this</span>.bgImage.width &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.div.offsetHeight &gt; <span class="keyword">this</span>.bgImage.height</span><br><span class="line">) &#123;</span><br><span class="line">  tmpCanvas.width = <span class="keyword">this</span>.div.offsetWidth;</span><br><span class="line">  tmpCanvas.height = <span class="built_in">Math</span>.floor(</span><br><span class="line">    (<span class="keyword">this</span>.bgImage.height * <span class="keyword">this</span>.div.offsetWidth) / <span class="keyword">this</span>.bgImage.width</span><br><span class="line">  );</span><br><span class="line">  tmpCtx.drawImage(</span><br><span class="line">    <span class="keyword">this</span>.bgImage,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">this</span>.div.offsetWidth,</span><br><span class="line">    <span class="built_in">Math</span>.floor(</span><br><span class="line">      (<span class="keyword">this</span>.bgImage.height * <span class="keyword">this</span>.div.offsetWidth) / <span class="keyword">this</span>.bgImage.width</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> tmpImage = <span class="keyword">new</span> Image();</span><br><span class="line">  tmpImage.src = tmpCanvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line">  <span class="keyword">this</span>.bakImage = <span class="keyword">this</span>.bgImage;</span><br><span class="line">  <span class="keyword">this</span>.bgImage = tmpImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h2><p>按照上面的缩放方式，不论是宽还是高缩小，都会影响原点九图左边或者上面的<code>1px</code>的边界，导致在 <code>getPieces</code>方法中误取可拉伸区间值，这种情况一般发生在边界线离点九图非透明色边界距离较近时发生，暂时没有想到解决方案。<br>想到其实这也是种模拟实现的方式，在实际的产品中不可能多用。不过这个过程收获也是挺大。<br>有好的解决方案欢迎轻敲~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前端开发中，常会将图片作为某个元素的背景图，但是背景图的大小和比例和元素有偏差，所以一般要使元素有全背景的话，只能将图片拉伸。这里不考虑&lt;code&gt;background-repeat&lt;/code&gt;。最好的办法还是将图片修改为比例和元素相同以等比缩放。&lt;br&gt;使用微信或者 QQ 的人应该会发现聊天气泡，气泡会随着内容多少的改变而去适应它，但是并没有使气泡图片有拉伸的效果，这里就用到了&lt;a href=&quot;https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点九图&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="积累" scheme="http://dearxiaojie.top/category/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://dearxiaojie.top/tag/javascript/"/>
    
      <category term="canvas" scheme="http://dearxiaojie.top/tag/canvas/"/>
    
      <category term="9-patch" scheme="http://dearxiaojie.top/tag/9-patch/"/>
    
  </entry>
  
  <entry>
    <title>记一次多图上传+本地预览中遇到的问题</title>
    <link href="http://dearxiaojie.top/article/2017-11-30-mutiple-image-upload.html"/>
    <id>http://dearxiaojie.top/article/2017-11-30-mutiple-image-upload.html</id>
    <published>2017-11-30T06:54:54.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>在 web 开发中常会遇到图片预览的场景，比如在图片上传的情况下，一个办法是将图片上传到服务器之后，服务端将存储的 URL 返回来，然后异步通过 URL 加载刚上传的图片，达到图片的预览。但是在这个过程中会有两次 web 请求，一次是发送文件，一次是下载文件。我们可以在图片上传前就进行图片的预览，这样可以避免不必要的网络请求和等待。</p>  <a id="more"></a><h2 id="图片添加"><a href="#图片添加" class="headerlink" title="图片添加"></a>图片添加</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"uploadcontainer"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"images"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span>=<span class="string">"multiple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">accept</span>=<span class="string">"image/*"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>如上，<code>input</code>将<code>type</code>设置为<code>file</code>即可以上传文件，<code>accept</code>可以设置接收文件类型，这里是上传图片，所以设置成了<code>image/*</code>, <code>multiple</code> 属性可以支持多文件上传。</p><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><blockquote><p>以下代码默认加载了 jquery</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听图片添加</span></span><br><span class="line">$(<span class="string">'#uploadcontainer'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> files = $(<span class="keyword">this</span>).prop(<span class="string">'files'</span>);</span><br><span class="line">    that.preview(files);</span><br><span class="line">&#125;);</span><br><span class="line">preview: <span class="function"><span class="keyword">function</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 遍历预览</span></span><br><span class="line">    $.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        <span class="keyword">let</span> tpl = <span class="keyword">new</span> Template($(<span class="string">'#tpl'</span>).html());</span><br><span class="line">        fileReader.readAsDataURL(item);</span><br><span class="line">        fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            that.FILES.push(item); <span class="comment">// *** 图片onload过程中将图片存在一个全局的数组中,因为在预览过程中还会有分类等处理，会在真正上传的时候添加更多参数</span></span><br><span class="line">            html = tpl.render(&#123;</span><br><span class="line">                cover_url: e.currentTarget.result,</span><br><span class="line">                title: item.name.split(<span class="string">'.'</span>)[<span class="number">0</span>],</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// ... 将html放到页面</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><blockquote><p>假定我们的接口只支持每次只能上传一张图片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">upload: <span class="function"><span class="keyword">function</span>(<span class="params">f, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">uploads</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> file = f.shift();</span><br><span class="line">        <span class="keyword">if</span> (file) &#123;</span><br><span class="line">            <span class="comment">// 避免重名导致上传混乱，每次都重新创建新的对象</span></span><br><span class="line">            <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            formData.append(<span class="string">'image'</span>, file.image);</span><br><span class="line">            formData.append(<span class="string">'title'</span>, file.title);</span><br><span class="line">            formData.append(<span class="string">'category'</span>, file.category);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                url: <span class="string">'****'</span>,</span><br><span class="line">                data: formData,</span><br><span class="line">                contentType: <span class="literal">false</span>,<span class="comment">// *</span></span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                processData: <span class="literal">false</span> <span class="comment">// *</span></span><br><span class="line">            &#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params">rst</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (rst.ret == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(file.title + <span class="string">' 上传中...'</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(ret.msg || file.title + <span class="string">' 上传失败...'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                uploads();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上传完成...'</span>);</span><br><span class="line">            cb();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>使用<code>FormData</code>对象，设置<code>contentType</code>为<code>false</code>, <code>processData</code>为<code>false</code></li><li><code>fileReader.onload</code>的时候缓存图片，不然不能对应图片及增加的参数，导致图片和参数对应混乱</li><li>递归上传，每次创建<code>FormData</code>对象，避免重复上传和重名混乱</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 web 开发中常会遇到图片预览的场景，比如在图片上传的情况下，一个办法是将图片上传到服务器之后，服务端将存储的 URL 返回来，然后异步通过 URL 加载刚上传的图片，达到图片的预览。但是在这个过程中会有两次 web 请求，一次是发送文件，一次是下载文件。我们可以在图片上传前就进行图片的预览，这样可以避免不必要的网络请求和等待。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端积累" scheme="http://dearxiaojie.top/category/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="js" scheme="http://dearxiaojie.top/tag/js/"/>
    
  </entry>
  
  <entry>
    <title>highcharts 线型图表处理</title>
    <link href="http://dearxiaojie.top/article/2017-08-29-diy-highcharts.html"/>
    <id>http://dearxiaojie.top/article/2017-08-29-diy-highcharts.html</id>
    <published>2017-08-29T07:05:40.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>某次需求中，需要使用<a href="https://www.highcharts.com/" target="_blank" rel="noopener"><code>highcharts</code></a>展示数据以对比。可是这批数据量级相差较大，如果在同一张图表中展示，会导致线条相隔很远或者没有波动幅度；还需要在点击某根线条的时候改变图表 Y 轴为当前线条数量级的，并处理他们的样式以区分。</p>  <a id="more"></a><p>那么，第一个问题，要在同一张表中展示不同量级的数据，且相互具有参考性，有个办法就是将数据统一处理成一个维度的，如<a href="https://baike.baidu.com/item/%E5%BD%92%E4%B8%80%E5%8C%96%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">数据归一化</a>，将数据映射到<code>0~1</code>之间的小数，那不同量级的数据之间就有一定的参考性了。<br>第二个问题的话本来想过改源码，但是感觉意义不大，使用场景不多，就找<code>highcharts</code>的<code>api</code>文档，各种拼接。差不多实现了需求.</p><h2 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h2><p>采用<code>min-max标准化</code>，也叫离差标准化，对原始数据的线性变化，结果落到<code>[0, 1]</code>之间。将需要处理的数据组，即<code>series</code>数据先处理，找到每组的最大最小，并计算.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizing</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cur = arr[i].data;</span><br><span class="line">    arr[i].visible = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> name = arr[i].name;</span><br><span class="line">    arr[i].showInLegend = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, cur);</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, cur);</span><br><span class="line">    <span class="keyword">var</span> news = cur.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (x - min) / max;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> item = &#123; <span class="attr">name</span>: name, <span class="attr">data</span>: news &#125;;</span><br><span class="line">    arr.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，将原数据的每个线条设置为不显示，再将归一化后的数据<code>push</code>到数组后面。即最终图表上显示的是处理后的数据绘制的线条，这样的操作会引发后面的问题，接下来会提到。</p><h2 id="展示真实数据"><a href="#展示真实数据" class="headerlink" title="展示真实数据"></a>展示真实数据</h2><p>在上面一步中，将所有数据都处理成了[0, 1]之间的数据，那鼠标<code>hover</code>上去显示的就是计算后的数据。这显然不是我们想要的，所以才没有去除原来的数据。查看<code>highcharts</code>的<code>api</code>，发现可以改变<code>hover</code>显示的格式，那我只需要找到计算后与之相对应的原数据就能正确显示了。<br>现在<code>hover</code>能够正确显示数据了，图表里的线条也有了一定的对比性，但是 Y 轴坐标依然是按照归一化后数据量级来的。在考虑到需要在点击线条的时候显示成其原数据量级的 Y 轴，所以采用以下办法。<br>取出选中线条数据中的最大最小，按照归一化算法逆回去，那么其实现在图表中的线条已经不是<code>[0, 1]</code>之间的数据了，而是分别乘上点击线条最大值，并加上最小值后的数据。那么，<code>Y</code>轴的自然就变成了当前的数据量级。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustSeries</span>(<span class="params">activeName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = chart.series;</span><br><span class="line">  <span class="keyword">var</span> max, min;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="number">6</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> curName = data[i + <span class="number">6</span>].name;</span><br><span class="line">    <span class="keyword">var</span> current = data[i];</span><br><span class="line">    <span class="keyword">if</span> (curName === activeName) &#123;</span><br><span class="line">      max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, current.yData);</span><br><span class="line">      min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, current.yData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">6</span>, len = originData.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cur = originData[i].data || [];</span><br><span class="line">    <span class="keyword">var</span> newc = cur.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> cnt = <span class="built_in">Math</span>.round(item * max) + min;</span><br><span class="line">      <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> upObj = &#123;</span><br><span class="line">      data: newc,</span><br><span class="line">      lineWidth: <span class="number">1</span>,</span><br><span class="line">      dashStyle: <span class="string">'Dash'</span>,</span><br><span class="line">      dataLabels: &#123; <span class="attr">enabled</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      className: <span class="string">'half-opacity'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (originData[i].name === activeName) &#123;</span><br><span class="line">      upObj = &#123;</span><br><span class="line">        data: newc,</span><br><span class="line">        lineWidth: <span class="number">4</span>,</span><br><span class="line">        dashStyle: <span class="string">'Solid'</span>,</span><br><span class="line">        dataLabels: &#123; <span class="attr">enabled</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        className: <span class="string">'no-opacity'</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    chart.series[i].update(upObj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的<code>originData</code>其实就是归一化后存起来的一个副本，因为后面每次点击都会使用这个数据，所以在存数据的时候一定要保证<code>originData</code>不变，存放的是真实数据，而不是数据引用，<code>javascript</code>基础知识，不清楚的可查看<a href="https://www.zhihu.com/question/23031215" target="_blank" rel="noopener">javascript 中的深拷贝和浅拷贝</a>。</p><h2 id="使用到的-API"><a href="#使用到的-API" class="headerlink" title="使用到的 API"></a>使用到的 API</h2><ul><li>plotOptions.series.event.click 点击线条的时候处理相关逻辑</li><li>tooltip.formatter 更改鼠标<code>hover</code>的时候显示的数据和样式</li><li>chart.series[i].update 动态更新图表数据，定制线条样式</li><li>其他…</li></ul><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="http://api.highcharts.com/highcharts" target="_blank" rel="noopener">Highcharts API</a></li></ul><p><a href="http://dearxiaojie.top/note/demos/highcharts.html"><em>成品链接</em></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;某次需求中，需要使用&lt;a href=&quot;https://www.highcharts.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;highcharts&lt;/code&gt;&lt;/a&gt;展示数据以对比。可是这批数据量级相差较大，如果在同一张图表中展示，会导致线条相隔很远或者没有波动幅度；还需要在点击某根线条的时候改变图表 Y 轴为当前线条数量级的，并处理他们的样式以区分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端积累" scheme="http://dearxiaojie.top/category/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="js" scheme="http://dearxiaojie.top/tag/js/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器中懒加载ES2015模块</title>
    <link href="http://dearxiaojie.top/article/2017-06-05-lazy-loading-es2015-modules-in-the-browser.html"/>
    <id>http://dearxiaojie.top/article/2017-06-05-lazy-loading-es2015-modules-in-the-browser.html</id>
    <published>2017-06-05T11:51:28.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>ES2015 模块在浏览器懒加载</p><p>在过去的几年里，开发者们已经无情的将服务端网站移动到了客户端，前提是那样能使页面的性能得到提高。</p><p>然而，这可能是不够的。你是否考虑过你的网站也许加载更多于它实际用到的东西？遇到懒加载，一个延迟初始化（加载/分配）某个资源(代码/数据/静态资源)直到它需要的时候再加载。</p>  <a id="more"></a><p>与此同时，<code>ES2015</code>已经能在生产环境中使用了，通过一些<code>transpilers</code>如<code>Babel</code>。现在你不用参与到使用<code>AMD</code>还是<code>CommonJS</code>的战争中，参照这篇文章的描述（<a href="https://www.airpair.com/javascript/posts/the-mind-boggling-universe-of-javascript-modules" target="_blank" rel="noopener">The mind-boggling universe of JavaScript Module strategies</a>）,因为你可以写<code>ES2015</code>模块和让他们 transpiled 并交付给浏览器同时支持现有<code>CommonJS</code>或<code>AMD</code>模块。</p><p>在这篇文章中，我将讨论如何使用<a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener">System.js</a>同步(在页面加载的时候)和异步(懒加载)加载<code>ES2015</code>模块。</p><h2 id="页面加载-vs-懒加载"><a href="#页面加载-vs-懒加载" class="headerlink" title="页面加载 vs 懒加载"></a>页面加载 vs 懒加载</h2><p>在浏览器上开发<code>JavaScript</code>代码执行时,你必须决定什么时候你让它执行。<br>有一些代码必须在页面加载的同时就执行，比如 SPA 应用使用了一些框架如<code>Angular</code>，<code>Ember</code>，<code>Backbone</code>，或者<code>React</code>，这些代码可能通过一个或多个<code>&lt;script&gt;</code>标签，必须在一个页面请求返回到浏览器后被引用到<code>HTML</code>文档的主体结构中。</p><p>在另一方面，你可能有更多的代码块在一些特定的触发条件发生的时候在执行。经典的例子如：</p><ul><li>内容折叠。比如一个评论面板，在用户滚动到页底的时候才显示</li><li>事件触发内容显示。比如一个放大的覆盖层，在用户点击图片的时候在显示</li><li>少数内容。比如一个‘免运费’的控件，只只用于一些小的页面上</li><li>有时间间隔的内容显示。比如一个客服聊天框</li></ul><p>这样的话，对于给出一个类似上面的功能，如果他的触发条件未发生，他的代码块就永远不会被执行。因此，那个代码块在页面加载的时候明显是不需要的，是可以延迟加载的。</p><p>为了延迟加载，你只需要将在页面加载期间执行的代码从代码块中提取出来。这样在他的触发条件第一次发生的时候就被执行。</p><p>这种异步加载引用代码的方式，或者叫懒加载，在提升页面性能上扮演了一个重要的角色，从减少页面首屏时间和速度指数上来看的话。</p><p>为了学习更多关于对比页面加载和懒加载对页面性和速度指数的影响的知识，可以阅读这篇文章<a href="https://www.airpair.com/javascript/posts/the-tipping-point-of-clientside-performance" target="_blank" rel="noopener"> Leveling up: Simple steps to optimize the Critical Rendering Path</a></p><h2 id="AMD-陷阱"><a href="#AMD-陷阱" class="headerlink" title="AMD 陷阱"></a>AMD 陷阱</h2><p>AMD 标准是为在浏览器上异步加载加载创造的，是第一个作为全局<code>JavaScript</code>文件散落在页面的成功替代品。根据<a href="http://requirejs.org/docs/whyamd.html#amd" target="_blank" rel="noopener">Require.js 文档</a>:</p><blockquote><p>The AMD format comes from wanting a module format that was better than today’s “write a bunch of script tags with implicit dependencies that you have to manually order” and something that was easy to use directly in the browser.</p></blockquote><p>它是基于模块设计模式<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript" target="_blank" rel="noopener">Module Design Pattern</a>的授权，有一个模块加载器，依赖注入和异步能力。它的一个主要的作用就是执行模块的懒加载。</p><p>尽管是一个可怕的想法，它带来了一些固有的复杂性：也就是说，之前理解运行时模块的 timelines 是不那么重要的。这就意味着开发者们需要知道每个异步模块是什么时候做它预期的工作的。</p><p>如果不明白这点，开发者们发现这样的情况：它有时候能正常工作，有时候不能。由于竞态，调试是非常困难的。因为这样的事情，<code>AMD</code>失去了大量的势头和牵引。</p><p>学习更多关于<code>AMD</code>的陷阱，查看<a href="http://benmccormick.org/2015/05/28/moving-past-requirejs/" target="_blank" rel="noopener">Moving Past RequireJS</a></p><h2 id="ES2015-模块-101"><a href="#ES2015-模块-101" class="headerlink" title="ES2015 模块 101"></a>ES2015 模块 101</h2><p>在继续下去之前，我们回顾一下<code>ES2015</code>模块。如果你已经非常熟悉了，那这是一个快速的复习。<br>在<code>ES2015</code>中，模块已经成为官方<code>JavaScript</code>语言的一部分，它们非常强大而且很容易去掌握，站在<code>CommonJS</code>模块这个巨人的肩膀上的话。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>通常，一个<code>ES2015</code>模块所有的全局变量仅作用于自己这个文件，模块可以导出数据，也可以导入其他的模块。</p><h3 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h3><p>在一个你想导出的项目(如一个变量，函数、类)的前面加上一个关键词<code>export</code>就可以导出，在下面这个例子中，我们导出<code>Dog</code>和<code>Wolf</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zoo.js</span></span><br><span class="line"><span class="keyword">var</span> getBarkStyle = <span class="function"><span class="keyword">function</span>(<span class="params">isHowler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isHowler ? <span class="string">'woooooow!'</span> : <span class="string">'woof, woof!'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, breed) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.breed = breed;</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>: <span class="subst">$&#123;getBarkStyle(<span class="keyword">this</span>.breed === <span class="string">'husky'</span>)&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Wolf</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>: <span class="subst">$&#123;getBarkStyle(<span class="literal">true</span>)&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们想想如果在一个单元测试（如<code>Mocha/Chai</code>）用引入这个模块。使用语法<code>import &lt;object&gt; from &lt;path&gt;</code>，至于<code>&lt;object&gt;</code>我们可以选择我们想导入的元素–命名导入（<a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="noopener">named imports</a>）。接下来我们可以从<code>chai</code>中导入<code>expect</code>，同样，从<code>Zoo</code>中导入<code>Dog</code>和<code>Wolf</code>。这种命名导入的语法很像 ES2015 的另一个方便的特性–<a href="http://www.2ality.com/2015/01/es6-destructuring.html" target="_blank" rel="noopener">解构赋值</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zoo_spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dog, Wolf &#125; <span class="keyword">from</span> <span class="string">'../src/zoo'</span>;</span><br><span class="line">describe(<span class="string">'the zoo module'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should instantiate a regular dog'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'Sherlock'</span>, <span class="string">'beagle'</span>);</span><br><span class="line">    expect(dog.bark()).to.equal(<span class="string">'Sherlock: woof, woof!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'should instantiate a husky dog'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'Whisky'</span>, <span class="string">'husky'</span>);</span><br><span class="line">    expect(dog.bark()).to.equal(<span class="string">'Whisky: woooooow!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'should instantiate a wolf'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> wolf = <span class="keyword">new</span> Wolf(<span class="string">'Direwolf'</span>);</span><br><span class="line">    expect(wolf.bark()).to.equal(<span class="string">'Direwolf: woooooow!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>如果你只有一个项目要导出，你可以使用<code>export default</code>来将你需要导出的项目作为一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cat.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  meow() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>: You gotta be kidding that I'll obey you, right?`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入默认的模块更简单，至于结构赋值就不再用到了，你可以直接从模块中导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cat_spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"><span class="keyword">import</span> Cat <span class="keyword">from</span> <span class="string">'../src/cat'</span>;</span><br><span class="line">describe(<span class="string">'the cat module'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should instantiate a cat'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Bugsy'</span>);</span><br><span class="line">    expect(cat.meow()).to.equal(</span><br><span class="line">      <span class="string">"Bugsy: You gotta be kidding that I'll obey you, right?"</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>学习更多关于<code>ES2015</code>模块的知识，查看文章<a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">Exploring ES6 — Modules.</a></p><h2 id="ES2015-模块加载器和-System-js"><a href="#ES2015-模块加载器和-System-js" class="headerlink" title="ES2015 模块加载器和 System.js"></a>ES2015 模块加载器和 System.js</h2><p>惊奇的发现，<code>ES2015</code>实际上没有一个模块加载规范。这儿是一个非常受欢迎的对动态模块加载的提议–<a href="https://github.com/ModuleLoader/es6-module-loader" target="_blank" rel="noopener">es6-module-loader</a>–受<a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener">System.js</a>的启发。这个提议已经被撤回了，但是有个<a href="https://whatwg.github.io/loader/" target="_blank" rel="noopener">WhatWG</a>在讨论阶段的新的加载规范和<a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">Domenic Denicola</a>提出的动态导入规范。</p><p>然而，<code>System.js</code>目前是最常使用的支持<code>ES2015</code>的模块加载器实现之一，它支持<code>ES2015</code>，<code>AMD</code>，<code>CommonJS</code>和浏览器中的全局脚本，还有<code>NodeJS</code>。它提供了一个异步模块加载器（对比<code>Require.js</code>）和<code>ES2015</code>转换，通过<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>,<a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">Traceur</a>或者<a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">Typescript</a>。</p><p><code>System.js</code>使用<code>Promises-based API</code>实现了异步模块加载。自从<code>promises</code>可以被链式调用和组合，这是非常长强大和方便的方法。举个例子，如果你想平行的加载多个模块，你可以使用<code>Promises.all</code>，当所有<code>promises</code>都被解决后，<code>listener</code>就可以被解除了。</p><p>最后，动态导入规范正在得到更多的牵引，而且已经被编入<code>webpack 2</code>。你可以看看它在 webpack2 指南上是如何工作的<a href="https://webpack.js.org/guides/migrating/#code-splitting-with-es2015" target="_blank" rel="noopener">Code splitting with ES2015</a>，这也是受<code>system.js</code>的启发，所以过度起来也很简单。</p><h2 id="同步和异步导入模块"><a href="#同步和异步导入模块" class="headerlink" title="同步和异步导入模块"></a>同步和异步导入模块</h2><p>为了以同步和异步两种方式说明模块的加载，这里有一个简单的项目，将会在页面加载的时候同步加载我们的<code>Cat</code>模块，在用户点击按钮的时候懒加载<code>Zoo</code>模块。代码的<code>github</code>地址<a href="https://github.com/tiagorg/lazy-load-es2015-systemjs" target="_blank" rel="noopener">lazy-load-es2015-systemjs</a>。</p><p>让我们看一看主要的代码块中在页面加载时加载的代码，我们的<code>main.js</code>。</p><p>首先，注意通过<code>import</code>同步加载<code>Cat</code>时的表现，然后，创建了一个<code>Cat</code>的实例，调用它的方法<code>meow()</code>，然后添加结果到<code>DOM</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// Importing Cat module synchronously</span></span><br><span class="line"><span class="keyword">import</span> Cat <span class="keyword">from</span> <span class="string">'cat'</span>;</span><br><span class="line"><span class="comment">// DOM content node</span></span><br><span class="line"><span class="keyword">let</span> contentNode = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span><br><span class="line"><span class="comment">// Rendering cat</span></span><br><span class="line"><span class="keyword">let</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Bugsy'</span>);</span><br><span class="line">contentNode.innerHTML += myCat.meow();</span><br></pre></td></tr></table></figure><p>最后，注意通过<code>System.import(&#39;zoo&#39;)</code>异步导入<code>Zoo</code>，最后，<code>Dog</code>和<code>Wolf</code>分别调用他们的方法<code>back()</code>，再次将结果添加到<code>DOM</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button to lazy load Zoo</span></span><br><span class="line">contentNode.innerHTML += <span class="string">`&lt;p&gt;&lt;button id='loadZoo'&gt;Lazy load &lt;b&gt;Zoo&lt;/b&gt;&lt;/button&gt;&lt;/p&gt;`</span>;</span><br><span class="line"><span class="comment">// Listener to lazy load Zoo</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loadZoo'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="comment">// Importing Zoo module asynchronously</span></span><br><span class="line">  System.import(<span class="string">'zoo'</span>).then(<span class="function"><span class="params">Zoo</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Rendering dog</span></span><br><span class="line">    <span class="keyword">let</span> myDog = <span class="keyword">new</span> Zoo.Dog(<span class="string">'Sherlock'</span>, <span class="string">'beagle'</span>);</span><br><span class="line">    contentNode.innerHTML += <span class="string">`<span class="subst">$&#123;myDog.bark()&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// Rendering wolf</span></span><br><span class="line">    <span class="keyword">let</span> myWolf = <span class="keyword">new</span> Zoo.Wolf(<span class="string">'Direwolf'</span>);</span><br><span class="line">    contentNode.innerHTML += <span class="string">`&lt;br/&gt;<span class="subst">$&#123;myWolf.bark()&#125;</span>`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>掌握遵守页面加载最少必须加载和懒加载可延迟加载的模块可以明显的提升你的页面性能，<code>AMD</code>和<code>CommonJS</code>为<code>ES2015</code>模块铺路。你可以开始使用<code>System.js</code>加载<code>ES2015</code>模块，或者通过<code>webpack 2</code>使用动态导入规范。但是官方的解决方案至今还未发布。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://dzone.com/articles/lazy-loading-es2015-modules-in-the-browser" target="_blank" rel="noopener">lazy-loading-es2015-modules-in-the-browser</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES2015 模块在浏览器懒加载&lt;/p&gt;
&lt;p&gt;在过去的几年里，开发者们已经无情的将服务端网站移动到了客户端，前提是那样能使页面的性能得到提高。&lt;/p&gt;
&lt;p&gt;然而，这可能是不够的。你是否考虑过你的网站也许加载更多于它实际用到的东西？遇到懒加载，一个延迟初始化（加载/分配）某个资源(代码/数据/静态资源)直到它需要的时候再加载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://dearxiaojie.top/category/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="ES2015" scheme="http://dearxiaojie.top/tag/ES2015/"/>
    
  </entry>
  
  <entry>
    <title>8个npm常用技巧和简写</title>
    <link href="http://dearxiaojie.top/article/2017-06-03-several-npm-shorthand-or-trick.html"/>
    <id>http://dearxiaojie.top/article/2017-06-03-several-npm-shorthand-or-trick.html</id>
    <published>2017-06-03T09:17:15.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>在篇文章里,将介绍一些非常有用的 npm 技巧。在这有许多我们不能完全覆盖,所以主要介绍和我们开发工作最相关和最有用的技巧。</p>  <a id="more"></a><h2 id="最基本的一些简写"><a href="#最基本的一些简写" class="headerlink" title="最基本的一些简写"></a>最基本的一些简写</h2><p>为了大家在同一起跑线，特别是针对于我们的新手，下面先快速的复习一些基本的简写来保证没人忘记任何简单的东西。</p><h4 id="安装-package"><a href="#安装-package" class="headerlink" title="安装 package"></a>安装 package</h4><p>常规：<code>npm install pkg</code> 简写：<code>npm i pkg</code></p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>常规： <code>npm install --global pkg</code> 简写：<code>npm i -g pkg</code></p><h4 id="作为项目依赖"><a href="#作为项目依赖" class="headerlink" title="作为项目依赖"></a>作为项目依赖</h4><p>常规：<code>npm install --save pkg</code> 简写： <code>npm i -S pkg</code></p><h4 id="作为开发依赖"><a href="#作为开发依赖" class="headerlink" title="作为开发依赖"></a>作为开发依赖</h4><p>常规： <code>npm install --save-dev pkg</code> 简写： <code>npm i -D pkg</code></p><p><em>更多的简写请查看 npm 的<a href="https://docs.npmjs.com/misc/config#shorthands-and-other-cli-niceties" target="_blank" rel="noopener">简写表</a></em><br>接下来开始有趣的东西。</p><h3 id="初始化一个-package"><a href="#初始化一个-package" class="headerlink" title="初始化一个 package"></a>初始化一个 package</h3><p>我们都知道使用<code>npm init</code>，这是我们创建一个<code>package</code>需要做的第一步。但是，在默认情况下，我们会不停的敲<code>enter</code>键，所以我们怎么避免呢。<br><code>npm init -y</code> 或 <code>npm init -f</code>就可以一次搞定。</p><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><p>另一个我们都会的命令是<code>npm test</code>，基本上每天都会使用很多次。倘若我告诉你减少约<code>40%</code>的字符后可以做同样的事呢？非常幸运，这里有个命令<code>npm t</code>，确实能够做到。</p><h3 id="列举可用的脚本"><a href="#列举可用的脚本" class="headerlink" title="列举可用的脚本"></a>列举可用的脚本</h3><p>我们得到了一个新项目,不知道如何开始。通常想知道：如何运行它?哪些脚本可用?<br>有一种方式是打开<code>package.json</code>文件，查看<code>scripts</code>部分。但是我们可以做的更好，所以我们可以简单的运行<code>npm run</code>，之后就可以获得可用脚本的列表。<br>另一个方式是安装<code>ntl</code>(<code>npm i -g ntl</code>)，然后在项目根目录运行<code>ntl</code>，就会列举出可用脚本，并可以直接选择运行，非常方便。</p><h3 id="列举已安装的-packages"><a href="#列举已安装的-packages" class="headerlink" title="列举已安装的 packages"></a>列举已安装的 packages</h3><p>类似于可用的脚本,有时候我们需要知道在我们的项目的依赖关系。再次的，我们可以打开<code>package.json</code>文件查看。但是我们已经知道我们可以做的更好，那就是<br><code>npm ls --depth 0</code><br>如果需要列出全局安装的<code>packages</code>，我们运行同样的命令加上<code>-g</code>标志。<br><code>npm ls -g --depth 0</code></p><h3 id="运行安装的可执行文件"><a href="#运行安装的可执行文件" class="headerlink" title="运行安装的可执行文件"></a>运行安装的可执行文件</h3><p>我们安装了一个包在我们的项目中,它带有一个可执行的文件,但只有通过<code>npm</code>脚本运行它。你想知道为什么,或者如何克服它吗?<br>首先，我们理解为什么–当我们在我们终端执行命令的时候，其根本其实是在我们<code>PATH</code>环境变量中列举的路径中寻找同名的可执行文件。这就是他们可从任何地方访问的神奇之处。本地安装包在本地注册他们的可执行文件,所以他们没有列在我们的<code>PATH</code>中，也就不会被发现。<br>当我们通过一个 npm 脚本运行可执行文件，它是如何工作的？好问题！因为这种方式运行时,是<code>npm</code>的一个小技巧,增加了一个额外的文件夹路径<code>&lt;project-directory&gt;/node_modules/.bin</code>到<code>PATH</code>，<br><code>npm</code>添加了一些更有趣的东西，你可以通过运行<code>npm run env | grep &quot;$PATH&quot;</code>看见它。你也可以只是运行<code>npm run env</code>来查看所有可用的环境变量。<br>如果你想知道，<code>node_modules/.bin</code>巧好是本地安装包存放他们可执行文件的地方。<br>例如，如果在你的项目中安装了<code>mocha</code>，直接在项目中运行<code>./node_modules/.bin/mocha</code>看有什么动作<br>so easy,对吧？无论何时你想运行一个本地安装包的可执行文件，只需要运行<code>./node_modules/.bin/&lt;command&gt;</code></p><h3 id="在网上找你的-package"><a href="#在网上找你的-package" class="headerlink" title="在网上找你的 package"></a>在网上找你的 package</h3><p>在<code>package.json</code>文件中，你可能会看到<code>repository</code>的入口(‘entry’)，想知道它有什么好处呢？<br>要回答这个问题，只需要运行<code>npm repo</code>就可以在你的浏览器中看到。<br>顺便说一下,<code>npm home</code>命令和<code>npm homepage</code>同样适用,<br>如果你想在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npmjs</a>打开你的<code>package</code>，这里也有个不错的简写<code>npm docs</code></p><h3 id="在其他脚本前后运行脚本"><a href="#在其他脚本前后运行脚本" class="headerlink" title="在其他脚本前后运行脚本"></a>在其他脚本前后运行脚本</h3><p>也许你熟悉某些脚本例如<code>pretest</code>,这个允许你定义在<code>test</code>脚本运行前运行的代码。<br>你可能会惊讶地发现,你可以为每一个脚本增加预先和滞后执行的脚本,包括您自己的自定义脚本!<br>对于使用<code>npm</code>作为构建工具和有很多脚本需要编排的项目来说，是非常有用的。</p><h3 id="更换-package-的版本"><a href="#更换-package-的版本" class="headerlink" title="更换 package 的版本"></a>更换 package 的版本</h3><p>你有一个<code>package</code>，也许使用<a href="http://semver.org/" target="_blank" rel="noopener">semver</a>做版本控制，在一个新版本发布前需要更换版本。<br>一种方式是打开<code>package.json</code>文件手动的改变版本，但在这里我们不这样。<br>一个简单的方式是运行<code>npm version</code>加上<code>major</code>、<code>minor</code>或者<code>patch</code>。<br>That’s all</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>另外值得一提的是一些组合命令，如<code>npm it</code>将会运行安装和测试命令，等同于<code>npm install &amp;&amp; npm test</code>,非常方便。<br>如果你知道更多的有用的技巧,请在评论中分享一下吧!</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://medium.freecodecamp.com/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e" target="_blank" rel="noopener">8-npm-tricks-you-can-use-to-impress-your-colleagues</a><br><a href="https://docs.npmjs.com/misc/config#shorthands-and-other-cli-niceties" target="_blank" rel="noopener">shorthands-and-other-cli-niceties</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在篇文章里,将介绍一些非常有用的 npm 技巧。在这有许多我们不能完全覆盖,所以主要介绍和我们开发工作最相关和最有用的技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="积累" scheme="http://dearxiaojie.top/category/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="npm" scheme="http://dearxiaojie.top/tag/npm/"/>
    
  </entry>
  
  <entry>
    <title>使用Python发送HTML邮件</title>
    <link href="http://dearxiaojie.top/article/2017-05-26-use-python-smtp-to-send-mail.html"/>
    <id>http://dearxiaojie.top/article/2017-05-26-use-python-smtp-to-send-mail.html</id>
    <published>2017-05-25T16:13:29.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p><em>这段时间在慢慢学习<code>Python</code>，正巧有个与<code>Python</code>相关的活，借此机会好练练手</em></p><p>为什么要学习<code>Python</code>呢，作为一个前端，为什么不学习<code>nodejs</code>，而选择学习<code>Python</code>，对呀，其实我也这么问自己，但是，有什么影响嘛，爱学啥学啥，我不觉得啥该学不该学。学了如果不用，也慢慢会忘。扯远了，其实我是比较喜欢<code>Python</code>的语法和它的严格缩进，学了一段时间后，发现还是有和<code>es6/es7</code>相似的方法。</p>  <a id="more"></a><h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h2><p><code>SMTP</code>是发送邮件的协议，<code>Python</code>内置对<code>SMTP</code>的支持，可以发送纯文本、HTML 邮件。其中有两个用到的模块，<code>email</code>负责邮件构造，<code>smtplib</code>发送邮件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''using python send gmail'''</span></span><br><span class="line"><span class="comment"># !/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendGmail</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''send mail via gmail'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._from_addr = input(<span class="string">'From:'</span>)</span><br><span class="line">        self._password = input(<span class="string">'Password:'</span>)</span><br><span class="line">        self._to_addr = input(<span class="string">'To:'</span>)</span><br><span class="line">        self._smtp_server = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>)</span><br><span class="line">        self._msg = MIMEMultipart(<span class="string">'alternative'</span>)</span><br><span class="line">        self._msg[<span class="string">'From'</span>] = self._format_addrs(<span class="string">'&lt;%s&gt;'</span> % self._from_addr) <span class="comment"># 发件人</span></span><br><span class="line">        self._msg[<span class="string">'To'</span>] = self._format_addrs(<span class="string">'&lt;%s&gt;'</span> % self._to_addr) <span class="comment"># 收件人</span></span><br><span class="line">        subject = <span class="string">'hello python'</span></span><br><span class="line">        self._msg[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>).encode() <span class="comment"># 主题</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, mail_tmp_path=<span class="string">'mail.html'</span>)</span>:</span></span><br><span class="line">        <span class="string">'''get mail content'''</span></span><br><span class="line">        page = mail_tmp_path</span><br><span class="line">        file = open(page, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        content = file.read()</span><br><span class="line">        content = content.replace(<span class="string">'&lt;#send_name#&gt;'</span>, self._from_addr)</span><br><span class="line">        content = content.replace(<span class="string">'&lt;#name#&gt;'</span>, self._to_addr)</span><br><span class="line">        self._msg.attach(MIMEText(content, <span class="string">'html'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''send mail'''</span></span><br><span class="line">        server = self._smtp_server</span><br><span class="line">        server.ehlo()</span><br><span class="line">        server.starttls()</span><br><span class="line">        server.login(self._from_addr, self._password)</span><br><span class="line">        server.sendmail(self._from_addr, [self._to_addr], self._msg.as_string())</span><br><span class="line">        print(<span class="string">'success send to %s!'</span> % self._to_addr)</span><br><span class="line">        server.quit()</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_replace_tmp</span><span class="params">(cls, string)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_format_addrs</span><span class="params">(cls, string)</span>:</span></span><br><span class="line">        <span class="string">'''format addr'''</span></span><br><span class="line">        name, addr = parseaddr(string)</span><br><span class="line">        <span class="keyword">return</span> formataddr((Header(name, <span class="string">'utf-8'</span>).encode(), addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    MESSAGE = SendGmail()</span><br><span class="line">    MESSAGE.get_content()</span><br><span class="line">    MESSAGE.send_mail()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;这段时间在慢慢学习&lt;code&gt;Python&lt;/code&gt;，正巧有个与&lt;code&gt;Python&lt;/code&gt;相关的活，借此机会好练练手&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;为什么要学习&lt;code&gt;Python&lt;/code&gt;呢，作为一个前端，为什么不学习&lt;code&gt;nodejs&lt;/code&gt;，而选择学习&lt;code&gt;Python&lt;/code&gt;，对呀，其实我也这么问自己，但是，有什么影响嘛，爱学啥学啥，我不觉得啥该学不该学。学了如果不用，也慢慢会忘。扯远了，其实我是比较喜欢&lt;code&gt;Python&lt;/code&gt;的语法和它的严格缩进，学了一段时间后，发现还是有和&lt;code&gt;es6/es7&lt;/code&gt;相似的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="积累" scheme="http://dearxiaojie.top/category/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="Python" scheme="http://dearxiaojie.top/tag/Python/"/>
    
      <category term="SMTP" scheme="http://dearxiaojie.top/tag/SMTP/"/>
    
      <category term="mail" scheme="http://dearxiaojie.top/tag/mail/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署Hexo博客到Github上</title>
    <link href="http://dearxiaojie.top/article/2017-05-04-use-travisci-build-your-hexo-site.html"/>
    <id>http://dearxiaojie.top/article/2017-05-04-use-travisci-build-your-hexo-site.html</id>
    <published>2017-05-04T15:27:53.000Z</published>
    <updated>2020-05-24T10:11:29.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>自从在<code>github page</code>上搭建博客以来，都是使用的<a href="http://hexo.io/" target="_blank" rel="noopener">hexo</a>，每次都是通过<code>hexo</code>命令<code>build</code>生成静态文件，再<code>push</code>到<code>github</code>上，后来找到一个<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">deploy</a>插件，只需要填写好<code>github</code>的<code>repos</code>地址就好。但是源码的保存是个问题，更换电脑想要写博客很不方便，甚至蠢到将源码保存到 u 盘里面，这样每次提交后又要备份一次，很容易忘记。说到这里那为什么不将源码保存到<code>github</code>上呢。</p>  <a id="more"></a><p>其实也是因为懒，给博客换了几次主题后，使得博客源码很乱，甚至自己也忘了改了主题的哪些代码，加上主题也是个<code>repos</code>，直接提交博客源码是提不上的，涉及到子模块问题，麻烦。想到自己还喜欢改动别人的主题，索性将主题文件夹<code>.git</code>文件删掉，让他成为一个普通的文件夹，这样就能提交到<code>github</code>了。废话不多说，估计是很久没写博客了，没有重点，下面简单说说使用<code>Travis CI</code>自动部署<code>Hexo</code>博客到<code>github</code>上。</p><h2 id="什么是-Travis-CI？"><a href="#什么是-Travis-CI？" class="headerlink" title="什么是 Travis CI？"></a>什么是 Travis CI？</h2><blockquote><p><code>Travis CI</code> 是目前新兴的开源持续集成构建项目，它与<code>jenkins</code>，<code>GO</code>的很明显的特别在于采用<code>yaml</code>格式，简洁清新独树一帜。目前大多数的 github 项目都已经移入到<code>Travis CI</code>的构建队列中，据说<code>Travis CI</code>每天运行超过<code>4000</code>次完整构建。</p></blockquote><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>首先进入<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>官网，使用<code>github</code>账号登录，如下图<br><img src="/images/travis.png" alt="travis"><br>登录成功后进入如下界面，以为我再此之前已经构建过，所以会用红色框内的内容，如果没有使用过是没有的。<br><img src="/images/list.png" alt="list"><br>然后点击<code>My Repositories</code>右边的<code>+</code>，添加需要自动构建的<code>repos</code>，进入如下页面。<br><img src="/images/new.png" alt="new"><br>可以看到这个界面会显示当前<code>github</code>账号的所以项目，如果没有显示，点击右上角的<code>Sync account</code>按钮，就可以同步过来了，点击需要构建的<code>repos</code>前面的按钮为<code>ON</code>，再点击其后的原形设置图标，进入如下界面<br><img src="/images/config.png" alt="config"><br>如图中设置，将<code>Build only if .travis.yml is present</code>及另外两个设置为<code>ON</code>，功能如字面意思不多说。<br>到目前为止，已经将需要构建的<code>repos</code>开启，那么，我们如何在将源码提交到<code>github</code>的时候，它就自动构建并将<code>build</code>后的静态文件<code>push</code>到我的静态文件<code>branch</code>或者<code>repos</code>呢（我是将<code>build</code>后的静态文件放到一个单独的<code>repos</code>了，也可以放在源码<code>repos</code>的另一个<code>branch</code>，例如起名叫<code>hexo</code>），接下来说如何让<code>Travis CI</code>访问<code>github</code>.</p><h2 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h2><p>我们需要在<code>Travis</code>上配置<code>Access Token</code>，就可以在构建完毕后自动<code>push</code>到<code>github</code>上保存静态文件的<code>repos</code>了。</p><h3 id="生成-Access-Token"><a href="#生成-Access-Token" class="headerlink" title="生成 Access Token"></a>生成 Access Token</h3><p>登录<a href="https://github.com/" target="_blank" rel="noopener">github</a>，进入个人主页，点击<code>setting</code>，进入界面后找到下图所指位置。<br><img src="/images/token.png" alt="token"><br>点击<code>Personal access tokens</code>，进入页面后，在点击右上角<code>Generate new token</code>,会再次让输入<code>github</code>密码，然后在<code>Token description</code>下起一个名字，再勾选一些权限，我是全给勾选上了，在点击下面<code>Generate token</code>这里就不多截图了。复制生成的<code>token</code>码。</p><h3 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h3><p>回到<code>Travis</code>的<code>setting</code>页面，如上面图，在<code>Environment Variables</code>这一栏，点击<code>Add</code>，起一个名字到<code>Name</code>，将复制的<code>token</code>码粘贴到<code>Value</code>框中，到这步为止，已经完成了<code>Travis</code>的设置。到博客源码根目录，创建一个<code>.travis.yml</code>的配置文件，内容如下，附注释，注意缩进</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment">#设置语言</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment">#设置相应的版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment">#安装hexo及插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment">#清除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="comment">#生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"KoreSamuel"</span> <span class="comment">#修改name</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"swustxiaojie@163.com"</span> <span class="comment">#修改email</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"update site"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span>  <span class="string">"https://$&#123;travis&#125;@$&#123;GH_REF&#125;"</span> <span class="string">master:master</span> <span class="comment">#travis是在Travis中配置token的名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#只监测master，可根据自己情况设置，若是存放同一个仓库，这儿可以选择存放源码的branch，如hexo</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/KoreSamuel/tb.git</span> <span class="comment">#设置GH_REF，注意更改yourname</span></span><br></pre></td></tr></table></figure><p>因为我是新起了一个<code>repos</code>来存放静态文件了，所以上面的<code>GH_REF</code>是对应那个<code>repos</code>地址，若是放同一个<code>repos</code>中，那这儿一般都是<code>yourname.github.io</code>那个仓库。到此，配置已经完成了。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>我们可以创建一篇文章<code>hexo new post use-travis-build-your-hexo-site</code>，添加内容后，并<code>push</code>到<code>github</code>，正常情况下，进入<code>Travis</code>网站就可以看到已经在构建了，如图<br><img src="/images/success.png" alt="success"><br>完成后，<a href="https://dearxiaojie.top/article/2017-05-04-use-travisci-build-your-hexo-site.html">访问链接</a>就可以看到这篇文章了。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>很久没有花时间写点东西了，不管有没有价值，总是一种对知识的积累和总结，输出也意味着输入，所以以后还是将学到的东西和积累总结下，自己可以将知识梳理的同时能帮助到别人是更好的了。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="master-commit-树被清空"><a href="#master-commit-树被清空" class="headerlink" title="master commit 树被清空"></a>master commit 树被清空</h3><p>仔细查看上面的配置文件，我们发现每次都是将 public 目录下的文件重新生成了一个 git 项目，然后强制覆盖提交到了 master 分支下，这就是问题的所在。<br>为了解决这个问题，我将配置文件改为了如下的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">after_script:</span><br><span class="line">  - git <span class="built_in">clone</span> https://<span class="variable">$&#123;GH_REF&#125;</span> .deploy_git</span><br><span class="line">  - <span class="built_in">cd</span> .deploy_git</span><br><span class="line">  - git checkout master</span><br><span class="line">  - <span class="built_in">cd</span> ../</span><br><span class="line">  - mv .deploy_git/.git/ ./public/</span><br><span class="line">  - <span class="built_in">cd</span> ./public</span><br><span class="line">  - git config user.name <span class="string">"KoreSamuel"</span>  <span class="comment">#修改name</span></span><br><span class="line">  - git config user.email <span class="string">"swustxiaojie@163.com"</span>  <span class="comment">#修改email</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://<span class="variable">$&#123;travis&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master  <span class="comment">#travis是在Travis中配置token的名称</span></span><br></pre></td></tr></table></figure><p>在 after_script 部分，我先将博客项目 clone 到本地的 .deploy_git 目录下（目录名可自定义）,然后切换到 master 分支，将 master 分支下的 .git 目录拷贝到了 public 目录下，接着继续后面的 commit 操作。</p><h3 id="添加-commit-时间戳"><a href="#添加-commit-时间戳" class="headerlink" title="添加 commit 时间戳"></a>添加 commit 时间戳</h3><p>按照前面的方法配置 <code>travis.yml</code> 的内容，在 <code>master</code> 分支下的提交记录是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Travis CI Auto Builder</span><br><span class="line">Travis CI Auto Builder</span><br><span class="line">Travis CI Auto Builder</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>看到每次的提交记录中没有提交的时间戳，所以考虑着要把 <code>commit</code> 的时间戳给加上。<br><code>script</code> 命令下是可以执行 <code>shell</code> 命令的，所以对 <code>travis.yml</code> 文件进行了修改。<br>在 <code>shell</code> 中获取当前的时间戳，可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">&gt; date +<span class="string">"%Y-%m-%d %H:%M"</span></span><br><span class="line">2018-05-05 12:13</span><br></pre></td></tr></table></figure><p><code>Travis CI</code> 中使用的<code>linux</code>系统在编译生成时使用的是<code>UTC</code>时间，这样我们在<code>github</code>中的提交列表中看到的提交时间就会晚 8 小时。我们需要在执行时将时区改为东八区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - <span class="built_in">export</span> TZ=<span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><p>然后将<code>after_script</code>中的命令移到单独的<code>shell</code>文件中。最终的两个文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; build.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -ev</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://<span class="variable">$&#123;GH_REF&#125;</span> .deploy_git</span><br><span class="line"><span class="built_in">cd</span> .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">mv .deploy_git/.git/ ./public/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ./public</span><br><span class="line"></span><br><span class="line">git config user.name <span class="string">"KoreSamuel"</span>  <span class="comment">#修改name</span></span><br><span class="line">git config user.email <span class="string">"swustxiaojie@163.com"</span>  <span class="comment">#修改email</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Travis CI Auto Builder at `date +"</span>%Y-%m-%d %H:%M<span class="string">"`"</span></span><br><span class="line"></span><br><span class="line">git push --force --quiet <span class="string">"https://<span class="variable">$&#123;travis&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master  <span class="comment">#travis是在Travis中配置token的名称</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;</span> <span class="string">.travis.yml</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">apt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span> <span class="comment"># 更改时区</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./build.sh</span>  <span class="comment"># 为shell文件添加可执行权限</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./build.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"> <span class="attr">global:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/KoreSamuel/KoreSamuel.github.io.git</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="noopener">Customizing the Build</a></li><li><a href="http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/" target="_blank" rel="noopener">IT 范儿 | 使用 Travis CI 自动部署 Hexo 博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;自从在&lt;code&gt;github page&lt;/code&gt;上搭建博客以来，都是使用的&lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;，每次都是通过&lt;code&gt;hexo&lt;/code&gt;命令&lt;code&gt;build&lt;/code&gt;生成静态文件，再&lt;code&gt;push&lt;/code&gt;到&lt;code&gt;github&lt;/code&gt;上，后来找到一个&lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;deploy&lt;/a&gt;插件，只需要填写好&lt;code&gt;github&lt;/code&gt;的&lt;code&gt;repos&lt;/code&gt;地址就好。但是源码的保存是个问题，更换电脑想要写博客很不方便，甚至蠢到将源码保存到 u 盘里面，这样每次提交后又要备份一次，很容易忘记。说到这里那为什么不将源码保存到&lt;code&gt;github&lt;/code&gt;上呢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="积累" scheme="http://dearxiaojie.top/category/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="hexo" scheme="http://dearxiaojie.top/tag/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Show &#39;Search&#39; button in iPhone/iPad Safari keyboard</title>
    <link href="http://dearxiaojie.top/article/2016-10-23-search-btn.html"/>
    <id>http://dearxiaojie.top/article/2016-10-23-search-btn.html</id>
    <published>2016-10-23T09:36:09.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>点击搜索框的时候，需要将软键盘的<code>return</code> <code>go</code> <code>前往</code> 按键文案变成 <code>搜索</code>或 <code>search</code>，并且点击的时候发起搜索。</p><a id="more"></a><p>实现方式是将<code>input</code>框<code>type</code> 设置成 <code>search</code>，并在外层套一个<code>form</code>，在一般浏览器如 QQ 浏览器，uc 浏览器等上能将软键盘显示成<code>搜索</code>,但是在 safari 浏览器上并不能正常将软键盘文案改变。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在<code>form</code>上设置<code>action</code>,并将其值设置成<code>.</code>,但是需要控制在搜索的时候应将表单默认行为拦截，<code>form</code>上添加<code>return false</code>即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-top"</span> <span class="attr">action</span>=<span class="string">"."</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"key"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"search-input"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"keyword..."</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autocapitalize</span>=<span class="string">"off"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autocomplete</span>=<span class="string">"off"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autocorrect</span>=<span class="string">"off"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-reset reset"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cancel-btn"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.search-top'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = $(<span class="string">'#search-input'</span>)</span><br><span class="line">    .val()</span><br><span class="line">    .trim();</span><br><span class="line">  text &amp;&amp; that.emit.emit(<span class="string">'search'</span>, text);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><blockquote><p><a href="http://stackoverflow.com/questions/4864167/show-search-button-in-iphone-ipad-safari-keyboard" target="_blank" rel="noopener">Show ‘Search’ button in iPhone/iPad Safari keyboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;点击搜索框的时候，需要将软键盘的&lt;code&gt;return&lt;/code&gt; &lt;code&gt;go&lt;/code&gt; &lt;code&gt;前往&lt;/code&gt; 按键文案变成 &lt;code&gt;搜索&lt;/code&gt;或 &lt;code&gt;search&lt;/code&gt;，并且点击的时候发起搜索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://dearxiaojie.top/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://dearxiaojie.top/tag/CSS/"/>
    
  </entry>
  
  <entry>
    <title>remove white space below image</title>
    <link href="http://dearxiaojie.top/article/2015-10-20-remove-white-space-below-image.html"/>
    <id>http://dearxiaojie.top/article/2015-10-20-remove-white-space-below-image.html</id>
    <published>2015-10-20T10:23:18.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到过关于<code>&lt;img&gt;</code>标签显示一张图片在一个<code>&lt;div&gt;</code>里面，<code>&lt;div&gt;</code>的宽高由<code>image</code>撑起。可是在图片的底部和<code>&lt;div&gt;</code>底部之间，多出神秘的 2~3px 的空白。如下图：</p><a id="more"></a><p><img src="/images/1.JPG" alt="have white space"><br>我知道<code>&lt;img&gt;</code>是个特殊的元素，为什么会出现这种现象？</p><h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p><code>&lt;img&gt;</code> 元素在默认情况下是 inline 元素，inline 元素默认和父级元素的 baseline 对齐的，而 baseline 又和父级底边有一定距离，注意下面两段文字。</p><blockquote><p>Look at this line of text. Notice there are no letters that breach the baseline</p></blockquote><p>另一段：</p><blockquote><p>By just crossing the bridge he probably got away.</p></blockquote><p>注意比较上面两段文字中字母<code>y,j,p,g</code>,下图更形象的显示<br><img src="/images/jQaJx.png" alt="jQaJx"><br>因为浏览器提供空间低于 inline 元素来适应字体。这就是上面出现的白边。这不是 CSS 的 padding 或 margin,所以开发中不容易发现。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>给<code>&lt;img&gt;</code>元素设置<code>display:block</code></li><li>给<code>&lt;img&gt;</code>元素设置<code>vertical-align:bottom</code>或者<code>vertical-align:top</code></li><li>给<code>&lt;img&gt;</code>元素设置<code>font-size:0; vertical-align:middle;</code></li><li>给<code>&lt;div&gt;</code>元素设置<code>line-height:0</code></li><li>给<code>&lt;div&gt;</code>元素设置<code>font-size:0</code></li><li>给<code>&lt;img&gt;</code>元素设置<code>vertical-align:text-bottom</code></li></ul><p>以上最后一条效果并不好，设置后仍有 1px 的白边，如下图：<br><img src="/images/3.JPG" alt="1px white space"><br>而正常处理后是没有白边的，如下图：<br><img src="/images/2.JPG" alt="no white space"></p><h2 id="Code-source"><a href="#Code-source" class="headerlink" title="Code source"></a>Code source</h2><p><a href="http://runjs.cn/code/eozhsutb" target="_blank" rel="noopener">源码与在线演示</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://stackoverflow.com/questions/31444891/mystery-white-space-underneath-image-tag/31445364#31445364" target="_blank" rel="noopener">Mystery white space underneath image tag</a></li><li><a href="http://salman-w.blogspot.com/2012/10/remove-space-below-images-and-inline-block-elements.html" target="_blank" rel="noopener">How to Remove the Space Below Images and Other Inline-Block Elements</a></li><li><a href="http://stackoverflow.com/questions/7774814/remove-white-space-below-image" target="_blank" rel="noopener">Remove white space below image</a></li></ul><p><em>欢迎补充</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到过关于&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签显示一张图片在一个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;里面，&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的宽高由&lt;code&gt;image&lt;/code&gt;撑起。可是在图片的底部和&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;底部之间，多出神秘的 2~3px 的空白。如下图：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端积累" scheme="http://dearxiaojie.top/category/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="CSS" scheme="http://dearxiaojie.top/tag/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 伪元素::after 提示用法</title>
    <link href="http://dearxiaojie.top/article/2015-09-05-CSS%E4%BC%AA%E5%85%83%E7%B4%A0-after.html"/>
    <id>http://dearxiaojie.top/article/2015-09-05-CSS%E4%BC%AA%E5%85%83%E7%B4%A0-after.html</id>
    <published>2015-09-05T11:40:37.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CSS 伪元素::after 用来匹配已选中元素的一个虚拟的最后子元素，通常会配合 content 属性来为该元素添加装饰内容.这个虚拟元素默认是行内元素</p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p><code>element:after { style properties }</code> /_ CSS2 语法 <em>/<br><code>element::after { style properties }</code> /</em> CSS3 语法 _/</p></blockquote><p><code>::after</code>表示法是在 CSS 3 中引入的,::符号是用来区分伪类和伪元素的.支持 CSS3 的浏览器同时也都支持 CSS2 中引入的表示法<code>:after</code>.</p><p>##例子</p><p>用<code>::after</code>伪元素，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/attr" target="_blank" rel="noopener">attr()</a>CSS 表达式和一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="noopener">自定义数据属性</a> <code>data-descr</code> 创建一个纯 CSS, 词汇表提示工具</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这是一段并没有什么用的</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">"collection of words and punctuation"</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    ，完全是为了凑数才出现的文字，实现一个</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">"small popups which also hide again"</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    功能，可以吧鼠标放上去</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-descr</span>=<span class="string">"not to be taken literrlly"</span>&gt;</span>看看<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[data-descr]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: help;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-descr);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#aaaaaa</span> solid;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffcc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://runjs.cn/code/hkmnji2p" target="_blank" rel="noopener">在线演示</a></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/css%20after.png" alt="css-after"></p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p><img src="/images/table.png" alt="兼容性"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter" target="_blank" rel="noopener">::after (:after)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;CSS 伪元素::after 用来匹配已选中元素的一个虚拟的最后子元素，通常会配合 content 属性来为该元素添加装饰内容.这个虚拟元素默认是行内元素&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端积累" scheme="http://dearxiaojie.top/category/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="CSS" scheme="http://dearxiaojie.top/tag/CSS/"/>
    
  </entry>
  
  <entry>
    <title>图解 Javascript 上下文与作用域</title>
    <link href="http://dearxiaojie.top/article/2015-08-04-%E5%9B%BE%E8%A7%A3Javascript%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>http://dearxiaojie.top/article/2015-08-04-%E5%9B%BE%E8%A7%A3Javascript%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.html</id>
    <published>2015-08-04T06:54:54.000Z</published>
    <updated>2020-05-24T10:11:29.179Z</updated>
    
    <content type="html"><![CDATA[<p>本文尝试阐述 Javascript 中的上下文与作用域背后的机制，主要涉及到执行上下文（<code>execution context</code>）、作用域链（<code>scope chain</code>）、闭包（<code>closure</code>）、<code>this</code>等概念。</p><a id="more"></a><h2 id="Execution-context"><a href="#Execution-context" class="headerlink" title="Execution context"></a>Execution context</h2><p>执行上下文（简称上下文）决定了 Js 执行过程中可以获取哪些变量、函数、数据，一段程序可能被分割成许多不同的上下文，每一个上下文都会绑定一个变量对象（<code>variable object</code>），它就像一个容器，用来存储当前上下文中所有已定义或可获取的变量、函数等。位于最顶端或最外层的上下文称为全局上下文（<code>global context</code>），全局上下文取决于执行环境，如 Node 中的<code>global</code>和 Browser 中的<code>window</code>：<br><img src="/images/zhuanzai1.jpg" alt=""><br>需要注意的是，上下文与作用域（<code>scope</code>）是不同的概念。Js 本身是单线程的，每当有<code>function</code>被执行时，就会产生一个新的上下文，这一上下文会被压入 Js 的上下文堆栈（<code>context stack</code>）中，<code>function</code>执行结束后则被弹出，因此 Js 解释器总是在栈顶上下文中执行。在生成新的上下文时，首先会绑定该上下文的变量对象，其中包括<code>arguments</code>和该函数中定义的变量；之后会创建属于该上下文的作用域链（<code>scope chain</code>），最后将<code>this</code>赋予这一<code>function</code>所属的<code>Object</code>，这一过程可以通过下图表示：<br><img src="/images/zhuanzai2.jpg" alt=""></p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>上文提到<code>this</code>被赋予<code>function</code>所属的<code>Object</code>，具体来说，当<code>function</code>是定义在<code>global</code>对中时，<code>this</code>指向<code>global</code>；当<code>function</code>作为<code>Object</code>的方法时，<code>this</code>指向该<code>Object</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;;</span><br><span class="line">f(); <span class="comment">// -&gt; 1</span></span><br><span class="line"><span class="keyword">var</span> ff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;;</span><br><span class="line">ff(); <span class="comment">// -&gt; 2</span></span><br><span class="line">x; <span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="string">"o's x"</span>, <span class="attr">f</span>: f &#125;;</span><br><span class="line">o.f(); <span class="comment">// "o's x"</span></span><br></pre></td></tr></table></figure><h2 id="Scope-chain"><a href="#Scope-chain" class="headerlink" title="Scope chain"></a>Scope chain</h2><p>上文提到，在<code>function</code>被执行时生成新的上下文时会先绑定当前上下文的变量对象，再创建作用域链。我们知道<code>function</code>的定义是可以嵌套在其他<code>function</code>所创建的上下文中，也可以并列地定义在同一个上下文中（如<code>global</code>）。作用域链实际上就是自下而上地将所有嵌套定义的上下文所绑定的变量对象串接到一起，使嵌套的<code>function</code>可以“继承”上层上下文的变量，而并列的<code>function</code>之间互不干扰：<br><img src="/images/zhuanzai3.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"a's x"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">"b's y"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"c's x"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">  &#125;</span><br><span class="line">  d();</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// -&gt; "a's x"</span></span><br><span class="line">c(); <span class="comment">// -&gt; ReferenceError: y is not defined</span></span><br><span class="line">x; <span class="comment">// -&gt; "global"</span></span><br><span class="line">y; <span class="comment">// -&gt; ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>如果理解了上文中提到的上下文与作用域链的机制，再来看闭包的概念就很清楚了。每个<code>function</code>在调用时会创建新的上下文及作用域链，而作用域链就是将外层（上层）上下文所绑定的变量对象逐一串连起来，使当前<code>function</code>可以获取外层上下文的变量、数据等。如果我们在<code>function</code>中定义新的<code>function</code>，同时将内层<code>function</code>作为值返回，那么内层<code>function</code>所包含的作用域链将会一起返回，即使内层<code>function</code>在其他上下文中执行，其内部的作用域链仍然保持着原有的数据，而当前的上下文可能无法获取原先外层<code>function</code>中的数据，使得<code>function</code>内部的作用域链被保护起来，从而形成“闭包”。看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> inc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> inc1 = inc();</span><br><span class="line"><span class="keyword">var</span> inc2 = inc();</span><br><span class="line">inc1(); <span class="comment">// -&gt; 0</span></span><br><span class="line">inc1(); <span class="comment">// -&gt; 1</span></span><br><span class="line">inc2(); <span class="comment">// -&gt; 0</span></span><br><span class="line">inc1(); <span class="comment">// -&gt; 2</span></span><br><span class="line">inc2(); <span class="comment">// -&gt; 1</span></span><br><span class="line">x; <span class="comment">// -&gt; 100</span></span><br></pre></td></tr></table></figure><p>执行过程如下图所示，<code>inc</code>内部返回的匿名<code>function</code>在创建时生成的作用域链包括了<code>inc</code>中的<code>x</code>，即使后来赋值给<code>inc1</code>和<code>inc2</code>之后，直接在<code>global context</code>下调用，它们的作用域链仍然是由定义中所处的上下文环境决定，而且由于<code>x</code>是在<code>function inc</code>中定义的，无法被外层的<code>global context</code>所改变，从而实现了闭包的效果：<br><img src="/images/zhuanzai4.jpg" alt=""></p><h2 id="this-in-closure"><a href="#this-in-closure" class="headerlink" title="this in closure"></a>this in closure</h2><p>我们已经反复提到执行上下文和作用域实际上是通过<code>function</code>创建、分割的，而<code>function</code>中的<code>this</code>与作用域链不同，它是由执行该<code>function</code>时当前所处的<code>Object</code>环境所决定的，这也是<code>this</code>最容易被混淆用错的一点。一般情况下的例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'o'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">o.getName(); <span class="comment">// -&gt; "o"</span></span><br></pre></td></tr></table></figure><p>由于执行<code>o.getName()</code>时<code>getName</code>所绑定的<code>this</code>是调用它的<code>o</code>，所以此时<code>this == o</code>；更容易搞混的是在<code>closure</code>条件下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">var</span> oo = &#123;</span><br><span class="line">  name: <span class="string">'oo'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">oo.getNameFunc()(); <span class="comment">// -&gt; "global"</span></span><br></pre></td></tr></table></figure><p>此时闭包函数被<code>return</code>后调用相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getName = oo.getNameFunc();</span><br><span class="line">getName(); <span class="comment">// -&gt; "global"</span></span><br></pre></td></tr></table></figure><p>换一个更明显的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ooo = &#123;</span><br><span class="line">  name: <span class="string">'ooo'</span>,</span><br><span class="line">  getName: oo.getNameFunc() <span class="comment">// 此时闭包函数的this被绑定到新的Object</span></span><br><span class="line">&#125;;</span><br><span class="line">ooo.getName(); <span class="comment">// -&gt; "ooo"</span></span><br></pre></td></tr></table></figure><p>当然，有时候为了避免闭包中的<code>this</code>在执行时被替换，可以采取下面的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">var</span> oooo = &#123;</span><br><span class="line">  name: <span class="string">'ox4'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">oooo.getNameFunc()(); <span class="comment">// -&gt; "ox4"</span></span><br></pre></td></tr></table></figure><p>或者是在调用时强行定义执行的<code>Object</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">var</span> oo = &#123;</span><br><span class="line">  name: <span class="string">'oo'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">oo.getNameFunc()(); <span class="comment">// -&gt; "global"</span></span><br><span class="line">oo.getNameFunc().bind(oo)(); <span class="comment">// -&gt; "oo"</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Js 是一门很有趣的语言，由于它的很多特性是针对 HTML 中 DOM 的操作，因而显得随意而略失严谨，但随着前端的不断繁荣发展和 Node 的兴起，Js 已经不再是”toy language”或是 jQuery 时代的”CSS 扩展”，本文提到的这些概念无论是对新手还是从传统 Web 开发中过度过来的 Js 开发人员来说，都很容易被混淆或误解，希望本文可以有所帮助。</p><p>写这篇总结的原因是我在 Github 上分享的<a href="https://github.com/coodict/javascript-in-one-pic" target="_blank" rel="noopener">Learn javascript in one picture</a>，刚开始有人质疑这只能算是一张语法表（syntax cheat sheet），根本不会涉及更深层的闭包、作用域等内容，但是出乎意料的是这个项目竟然获得 3000 多个 star，所以不能虎头蛇尾，以上。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/" target="_blank" rel="noopener">Understanding Scope and Context in JavaScript</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noopener">this - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">闭包 - JavaScript | MDN</a></li></ul><p><em><a href="http://blog.rainy.im/2015/07/04/scope-chain-and-prototype-chain-in-js/" target="_blank" rel="noopener">原文猛戳</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文尝试阐述 Javascript 中的上下文与作用域背后的机制，主要涉及到执行上下文（&lt;code&gt;execution context&lt;/code&gt;）、作用域链（&lt;code&gt;scope chain&lt;/code&gt;）、闭包（&lt;code&gt;closure&lt;/code&gt;）、&lt;code&gt;this&lt;/code&gt;等概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://dearxiaojie.top/category/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="javascript" scheme="http://dearxiaojie.top/tag/javascript/"/>
    
      <category term="概念理解" scheme="http://dearxiaojie.top/tag/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>javascript 性能优化小知识</title>
    <link href="http://dearxiaojie.top/article/2015-07-27-javascript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E7%9F%A5%E8%AF%86.html"/>
    <id>http://dearxiaojie.top/article/2015-07-27-javascript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E7%9F%A5%E8%AF%86.html</id>
    <published>2015-07-27T02:22:26.000Z</published>
    <updated>2020-05-24T10:11:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>前面有一篇也是关于<code>javascript</code>性能方面的文章，是看了<a href="http://book.douban.com/subject/5362856/" target="_blank" rel="noopener">《高性能 javascript》</a>后的笔记，这是一篇自己在项目和学习过程中的积累，部分参考了一些学习博客。对面试和代码的编写都有帮助。</p><a id="more"></a><h3 id="避免全局查找"><a href="#避免全局查找" class="headerlink" title="避免全局查找"></a>避免全局查找</h3><p>在一个函数中会用到全局对象存储为局部变量来减少全局查找，因为访问局部变量的速度要比访问全局变量的速度更快些。</p><h3 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h3><p>如果要连接多个字符串，应该少使用+=，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s += a;</span><br><span class="line">s += b;</span><br><span class="line">s += c;</span><br></pre></td></tr></table></figure><p>应该写成 s+=a + b + c；<br>而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用<code>JavaScript</code>数组来收集，最后使用<code>join</code>方法连接起来。</p><h3 id="数字转换成字符串"><a href="#数字转换成字符串" class="headerlink" title="数字转换成字符串"></a>数字转换成字符串</h3><p><code>(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</code><br>字符串如’1322’转换成数字的时候可以在前面加’+’,如<code>var str = &#39;123&#39;;var num = +str</code>,那么<code>typeof num</code>为<code>number</code></p><h3 id="浮点数转换成整型"><a href="#浮点数转换成整型" class="headerlink" title="浮点数转换成整型"></a>浮点数转换成整型</h3><p>很多人喜欢使用<code>parseInt()</code>，其实<code>parseInt()</code>是用于将字符串转换成数字，而不是浮点数和整型之间的转换，我们应该使用<code>Math.floor()</code>或者<code>Math.round()</code>。</p><h3 id="使用-DocumentFragment-优化多次-append"><a href="#使用-DocumentFragment-优化多次-append" class="headerlink" title="使用 DocumentFragment 优化多次 append"></a>使用 DocumentFragment 优化多次 append</h3><p>一旦需要更新 DOM,请考虑使用文档碎片来构建 DOM 结构，然后再将其添加到现存的文档中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  el.innerHTML = i;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为：</span></span><br><span class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  el.innerHTML = i;</span><br><span class="line">  frag.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(frag);</span><br></pre></td></tr></table></figure><h3 id="使用一次-innerHTML-赋值代替构建-dom-元素"><a href="#使用一次-innerHTML-赋值代替构建-dom-元素" class="headerlink" title="使用一次 innerHTML 赋值代替构建 dom 元素"></a>使用一次 innerHTML 赋值代替构建 dom 元素</h3><p>对于大的 DOM 更改，使用<code>innerHTML</code>要比使用标准的 DOM 方法创建同样的 DOM 结构快得多。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  el.innerHTML = i;</span><br><span class="line">  frag.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(frag);</span><br><span class="line"><span class="comment">//可以替换为：</span></span><br><span class="line"><span class="keyword">var</span> html = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  html.push(<span class="string">'&lt;p&gt;'</span> + i + <span class="string">'&lt;/p&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = html.join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="使用事件代理"><a href="#使用事件代理" class="headerlink" title="使用事件代理"></a>使用事件代理</h3><p>任何可以冒泡的事件都不仅仅可以在事件目标上进行处理，目标的任何祖先节点上也能处理，使用这个知识就可以将事件处理程序附加到更高的地方负责多个目标的事件处理，同样，对于内容动态增加并且子节点都需要相同的事件处理函数的情况，可以把事件注册提到父节点上，这样就不需要为每个子节点注册事件监听了。另外，现有的 js 库都采用<code>observe</code>方式来创建事件监听,其实现上隔离了 DOM 对象和事件处理函数之间的循环引用,所以应该尽量采用这种方式来创建事件监听</p><h3 id="缩短否定检测"><a href="#缩短否定检测" class="headerlink" title="缩短否定检测"></a>缩短否定检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oTest != <span class="string">'#ff0000'</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (oTest != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (oTest != <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：</span></span><br><span class="line"><span class="keyword">if</span> (!oTest) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h3><p>将条件分支，按可能性顺序从高到低排列：可以减少解释器对条件的探测次数<br>在同一条件子的多（&gt;2）条件分支时，使用<code>switch</code>优于<code>if</code>：<code>switch</code>分支选择的效率高于 if，在 IE 下尤为明显。4 分支的测试，IE 下<code>switch</code>的执行时间约为 if 的一半。<br>使用三目运算符替代条件分支</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  num = a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  num = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为：</span></span><br><span class="line">num = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><p><em>续。。。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面有一篇也是关于&lt;code&gt;javascript&lt;/code&gt;性能方面的文章，是看了&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《高性能 javascript》&lt;/a&gt;后的笔记，这是一篇自己在项目和学习过程中的积累，部分参考了一些学习博客。对面试和代码的编写都有帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://dearxiaojie.top/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://dearxiaojie.top/tag/javascript/"/>
    
      <category term="性能优化" scheme="http://dearxiaojie.top/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>高性能 JavaScript</title>
    <link href="http://dearxiaojie.top/article/2015-05-24-%E9%AB%98%E6%80%A7%E8%83%BDJavaScript.html"/>
    <id>http://dearxiaojie.top/article/2015-05-24-%E9%AB%98%E6%80%A7%E8%83%BDJavaScript.html</id>
    <published>2015-05-24T11:12:54.000Z</published>
    <updated>2020-05-24T10:11:29.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript-加载和运行"><a href="#javascript-加载和运行" class="headerlink" title="javascript 加载和运行"></a>javascript 加载和运行</h2><h3 id="脚本位置"><a href="#脚本位置" class="headerlink" title="脚本位置"></a>脚本位置</h3><p>尽管浏览器已经允许并行下载 javascript 文件，但是 javascript 下载过程仍然会阻塞其他资源的下载，如图片。页面仍然需要等待所有 javascript 代码下载并执行完成才能继续所以优化 javascript 的首要原则：将脚本放在底部（<code>&lt;/body&gt;</code>之前)</p><a id="more"></a><h3 id="组织脚本"><a href="#组织脚本" class="headerlink" title="组织脚本"></a>组织脚本</h3><p>每个<code>&lt;script&gt;</code>标签初始下载都会阻塞页面渲染，所以减少页面包含的<code>&lt;script&gt;</code>标签数量有助于改善这一情况。考虑到到 HTTP 请求会额外带来性能的开销。下载单个 100B 的文件比下载 4 个 25B 的文件更快。所以，减少页面中外链脚本文件的数量会改善性能。</p><!--more--><h3 id="无阻塞的脚本"><a href="#无阻塞的脚本" class="headerlink" title="无阻塞的脚本"></a>无阻塞的脚本</h3><ul><li>延迟的脚本：带有 defer 属性的<code>&lt;script&gt;</code>标签，需要浏览器支持</li><li>动态脚本元素:在跨浏览器兼容性和易用的优势，是最通用的无阻塞加载解决方案</li><li>XMLHttpRequest 注入：先创建一个 XHR 对象，然后用她下载 javascript 文件，最后通过创建动态<code>&lt;script&gt;</code>元素将代码注入页面中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"file.js"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = funtion()&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.creatElement(<span class="string">"script"</span>);</span><br><span class="line">            script.type=<span class="string">"text/javascript"</span>;</span><br><span class="line">            script.text=xhr.responseText;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//由于代码是在&lt;script&gt;标签之前返回的，因此它下载后不会自动执行。</span></span><br><span class="line"><span class="comment">//同样的代码在所有主流浏览器中无一例外都能正常工作</span></span><br><span class="line"><span class="comment">//局限性在于：javascript文件必须与请求的页面处于相同的域，即javascript不能从CDN下载</span></span><br></pre></td></tr></table></figure><h3 id="无阻塞脚本加载工具"><a href="#无阻塞脚本加载工具" class="headerlink" title="无阻塞脚本加载工具"></a>无阻塞脚本加载工具</h3><p>lazyLoad 类库、LABjs 等等</p><p>##管理作用域</p><h3 id="作用域链和标识符解析"><a href="#作用域链和标识符解析" class="headerlink" title="作用域链和标识符解析"></a>作用域链和标识符解析</h3><p>在函数执行的过程中，没遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取或存储数据。该过程搜索运行期上下文的作用域链，查找同名的标识符。搜索过程从作用域链头部开始也就是当前运行函数的活动对象，如果找到了，就使用这个标示符对应的变量；如果没有找到，继续搜索作用域链中的下一个对象，直到标识符被找到，或者没有可用于搜索的对象为止，这种情况下标识符被认为是未定义的。正是这个搜索过程影响了性能。</p><h3 id="标识符解析的性能"><a href="#标识符解析的性能" class="headerlink" title="标识符解析的性能"></a>标识符解析的性能</h3><p>一个标识符所在的位置越深，他的读写速度就越慢，因此读写局部变量总是最快的，而读写全局变量通常是最慢的。全局变量总是存在于运行期上下文作用域链的最末端，因此是最远的。在没有优化 javascript 引擎的浏览器中，尽量使用局部变量，如果某个跨作用域的值在函数中被引用了多次，就把他存储到局部变量里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>,</span><br><span class="line">    bd = doc.body,</span><br><span class="line">    links = doc.getElementByTagName(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    len = links.length;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    update(links[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  doc.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    start();</span><br><span class="line">  &#125;;</span><br><span class="line">  bd.className = <span class="string">'active'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先将document对象引用存储到局部变量doc中，全局变量的访问减少，当有很多全局变量</span></span><br><span class="line"><span class="comment">//被反复访问时，这种方法对性能的改善是很明显的。</span></span><br></pre></td></tr></table></figure><h3 id="闭包，作用域和内存"><a href="#闭包，作用域和内存" class="headerlink" title="闭包，作用域和内存"></a>闭包，作用域和内存</h3><p>将常用的跨作用域变量存储在局部变量中，然后访问局部变量嵌套的对象成员会明显影响性能，尽量少用<br>通常来说，把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善 javascript 性能，因为局部变量访问速度更快。</p><p>DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHtml1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">15000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML += <span class="string">'a'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHtml2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">15000</span>; i++) &#123;</span><br><span class="line">    html += <span class="string">'a'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML = html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initHtml1()比 initHtml2()速度慢很多，initHtml2()使用局部变量存储更新后的内容，减少了 DOM 访问，因此，减少 DOM 访问次数，讲运算尽量留在 ECMAScript 这端处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javascript-加载和运行&quot;&gt;&lt;a href=&quot;#javascript-加载和运行&quot; class=&quot;headerlink&quot; title=&quot;javascript 加载和运行&quot;&gt;&lt;/a&gt;javascript 加载和运行&lt;/h2&gt;&lt;h3 id=&quot;脚本位置&quot;&gt;&lt;a href=&quot;#脚本位置&quot; class=&quot;headerlink&quot; title=&quot;脚本位置&quot;&gt;&lt;/a&gt;脚本位置&lt;/h3&gt;&lt;p&gt;尽管浏览器已经允许并行下载 javascript 文件，但是 javascript 下载过程仍然会阻塞其他资源的下载，如图片。页面仍然需要等待所有 javascript 代码下载并执行完成才能继续所以优化 javascript 的首要原则：将脚本放在底部（&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;之前)&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://dearxiaojie.top/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://dearxiaojie.top/tag/javascript/"/>
    
      <category term="性能优化" scheme="http://dearxiaojie.top/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
